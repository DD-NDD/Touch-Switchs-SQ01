

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri Aug 23 11:36:37 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16LF1559
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	stringtext4,global,class=STRCODE,delta=2
    12                           	psect	stringtext5,global,class=STRCODE,delta=2
    13                           	psect	stringtext6,global,class=STRCODE,delta=2
    14                           	psect	stringtext7,global,class=STRCODE,delta=2
    15                           	psect	stringtext8,global,class=STRCODE,delta=2
    16                           	psect	stringtext9,global,class=STRCODE,delta=2
    17                           	psect	cinit,global,class=CODE,merge=1,delta=2
    18                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    22                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    23                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    24                           	psect	inittext,global,class=CODE,delta=2
    25                           	psect	clrtext,global,class=CODE,delta=2
    26                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    27                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    28                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    29                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    30                           	psect	text1,local,class=CODE,merge=1,delta=2
    31                           	psect	text2,local,class=CODE,merge=1,delta=2
    32                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    33                           	psect	text4,local,class=CODE,merge=1,delta=2
    34                           	psect	text5,local,class=CODE,merge=1,delta=2
    35                           	psect	text6,local,class=CODE,merge=1,delta=2
    36                           	psect	text7,local,class=CODE,merge=1,delta=2
    37                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    38                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    39                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    40                           	psect	text11,local,class=CODE,merge=1,delta=2
    41                           	psect	text12,local,class=CODE,merge=1,delta=2
    42                           	psect	text13,local,class=CODE,merge=1,delta=2
    43                           	psect	text14,local,class=CODE,merge=1,delta=2
    44                           	psect	text15,local,class=CODE,merge=1,delta=2
    45                           	psect	text16,local,class=CODE,merge=1,delta=2
    46                           	psect	text17,local,class=CODE,merge=1,delta=2
    47                           	psect	text18,local,class=CODE,merge=1,delta=2
    48                           	psect	text19,local,class=CODE,merge=1,delta=2
    49                           	psect	text20,local,class=CODE,merge=1,delta=2
    50                           	psect	text21,local,class=CODE,merge=1,delta=2
    51                           	psect	text22,local,class=CODE,merge=1,delta=2
    52                           	psect	text23,local,class=CODE,merge=1,delta=2
    53                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    54                           	psect	text25,local,class=CODE,merge=1,delta=2
    55                           	psect	text26,local,class=CODE,merge=1,delta=2
    56                           	psect	text27,local,class=CODE,merge=1,delta=2
    57                           	psect	text28,local,class=CODE,merge=1,delta=2
    58                           	psect	text29,local,class=CODE,merge=1,delta=2
    59                           	psect	text30,local,class=CODE,merge=1,delta=2
    60                           	psect	text31,local,class=CODE,merge=1,delta=2
    61                           	psect	text32,local,class=CODE,merge=1,delta=2
    62                           	psect	text33,local,class=CODE,merge=1,delta=2
    63                           	psect	text34,local,class=CODE,merge=1,delta=2
    64                           	psect	text35,local,class=CODE,merge=1,delta=2
    65                           	psect	text36,local,class=CODE,merge=1,delta=2
    66                           	psect	text37,local,class=CODE,merge=1,inline,delta=2
    67                           	psect	text38,local,class=CODE,merge=1,delta=2
    68                           	psect	text39,local,class=CODE,merge=1,delta=2
    69                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    70                           	psect	text41,local,class=CODE,merge=1,delta=2
    71                           	psect	text42,local,class=CODE,merge=1,delta=2
    72                           	psect	text43,local,class=CODE,merge=1,delta=2
    73                           	psect	text44,local,class=CODE,merge=1,delta=2
    74                           	psect	text45,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text47,local,class=CODE,merge=1,delta=2
    77                           	psect	text48,local,class=CODE,merge=1,delta=2
    78                           	psect	text49,local,class=CODE,merge=1,delta=2
    79                           	psect	text50,local,class=CODE,merge=1,delta=2
    80                           	psect	text51,local,class=CODE,merge=1,delta=2
    81                           	psect	text52,local,class=CODE,merge=1,delta=2
    82                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text54,local,class=CODE,merge=1,delta=2
    84                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    85                           	psect	text56,local,class=CODE,merge=1,delta=2
    86                           	psect	text57,local,class=CODE,merge=1,delta=2,group=2
    87                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    88                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    89                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    90                           	psect	text61,local,class=CODE,merge=1,delta=2
    91                           	psect	text62,local,class=CODE,merge=1,delta=2
    92                           	psect	text63,local,class=CODE,merge=1,delta=2
    93                           	psect	text64,local,class=CODE,merge=1,delta=2
    94                           	psect	text65,local,class=CODE,merge=1,delta=2
    95                           	psect	text66,local,class=CODE,merge=1,delta=2
    96                           	psect	text67,local,class=CODE,merge=1,delta=2
    97                           	psect	text68,local,class=CODE,merge=1,delta=2
    98                           	psect	text69,local,class=CODE,merge=1,delta=2
    99                           	psect	text70,local,class=CODE,merge=1,delta=2
   100                           	psect	text71,local,class=CODE,merge=1,delta=2
   101                           	psect	text72,local,class=CODE,merge=1,delta=2
   102                           	psect	text73,local,class=CODE,merge=1,delta=2
   103                           	psect	text74,local,class=CODE,merge=1,delta=2
   104                           	psect	text75,local,class=CODE,merge=1,delta=2
   105                           	psect	text76,local,class=CODE,merge=1,delta=2
   106                           	psect	text77,local,class=CODE,merge=1,delta=2
   107                           	psect	text78,local,class=CODE,merge=1,delta=2
   108                           	psect	text79,local,class=CODE,merge=1,delta=2
   109                           	psect	text80,local,class=CODE,merge=1,delta=2,group=1
   110                           	psect	text81,local,class=CODE,merge=1,delta=2
   111                           	psect	text82,local,class=CODE,merge=1,delta=2
   112                           	psect	text83,local,class=CODE,merge=1,delta=2
   113                           	psect	text84,local,class=CODE,merge=1,delta=2
   114                           	psect	text85,local,class=CODE,merge=1,delta=2
   115                           	psect	text86,local,class=CODE,merge=1,delta=2
   116                           	psect	text87,local,class=CODE,merge=1,delta=2
   117                           	psect	text88,local,class=CODE,merge=1,delta=2
   118                           	psect	text89,local,class=CODE,merge=1,delta=2
   119                           	psect	text90,local,class=CODE,merge=1,delta=2
   120                           	psect	text91,local,class=CODE,merge=1,delta=2
   121                           	psect	intentry,global,class=CODE,delta=2
   122                           	psect	text93,local,class=CODE,merge=1,delta=2
   123                           	psect	text94,local,class=CODE,merge=1,delta=2
   124                           	psect	text95,local,class=CODE,merge=1,delta=2
   125                           	psect	text96,local,class=CODE,merge=1,delta=2
   126                           	psect	text97,local,class=CODE,merge=1,delta=2
   127                           	psect	text98,local,class=CODE,merge=1,delta=2
   128                           	dabs	1,0x7E,2
   129  0000                     
   130                           ; Version 2.05
   131                           ; Generated 20/12/2018 GMT
   132                           ; 
   133                           ; Copyright © 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   134                           ; All rights reserved.
   135                           ; 
   136                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   137                           ; 
   138                           ; Redistribution and use in source and binary forms, with or without modification, are
   139                           ; permitted provided that the following conditions are met:
   140                           ; 
   141                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   142                           ;        conditions and the following disclaimer.
   143                           ; 
   144                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   145                           ;        of conditions and the following disclaimer in the documentation and/or other
   146                           ;        materials provided with the distribution.
   147                           ; 
   148                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   149                           ;        software without specific prior written permission.
   150                           ; 
   151                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   152                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   153                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   154                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   155                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   156                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   157                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   158                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   159                           ; 
   160                           ; 
   161                           ; Code-generator required, PIC16LF1559 Definitions
   162                           ; 
   163                           ; SFR Addresses
   164  0000                     	;# 
   165  0001                     	;# 
   166  0002                     	;# 
   167  0003                     	;# 
   168  0004                     	;# 
   169  0005                     	;# 
   170  0006                     	;# 
   171  0007                     	;# 
   172  0008                     	;# 
   173  0009                     	;# 
   174  000A                     	;# 
   175  000B                     	;# 
   176  000C                     	;# 
   177  000D                     	;# 
   178  000E                     	;# 
   179  0011                     	;# 
   180  0012                     	;# 
   181  0015                     	;# 
   182  0016                     	;# 
   183  0016                     	;# 
   184  0017                     	;# 
   185  0018                     	;# 
   186  0019                     	;# 
   187  001A                     	;# 
   188  001B                     	;# 
   189  001C                     	;# 
   190  008C                     	;# 
   191  008D                     	;# 
   192  008E                     	;# 
   193  0091                     	;# 
   194  0092                     	;# 
   195  0095                     	;# 
   196  0096                     	;# 
   197  0097                     	;# 
   198  0099                     	;# 
   199  009A                     	;# 
   200  009B                     	;# 
   201  009B                     	;# 
   202  009C                     	;# 
   203  009D                     	;# 
   204  009E                     	;# 
   205  009F                     	;# 
   206  010C                     	;# 
   207  010D                     	;# 
   208  010E                     	;# 
   209  0116                     	;# 
   210  0117                     	;# 
   211  011D                     	;# 
   212  018C                     	;# 
   213  018D                     	;# 
   214  018E                     	;# 
   215  0191                     	;# 
   216  0191                     	;# 
   217  0192                     	;# 
   218  0193                     	;# 
   219  0193                     	;# 
   220  0194                     	;# 
   221  0195                     	;# 
   222  0196                     	;# 
   223  0199                     	;# 
   224  019A                     	;# 
   225  019B                     	;# 
   226  019B                     	;# 
   227  019C                     	;# 
   228  019D                     	;# 
   229  019E                     	;# 
   230  019F                     	;# 
   231  020C                     	;# 
   232  020D                     	;# 
   233  0211                     	;# 
   234  0211                     	;# 
   235  0212                     	;# 
   236  0212                     	;# 
   237  0213                     	;# 
   238  0213                     	;# 
   239  0214                     	;# 
   240  0214                     	;# 
   241  0215                     	;# 
   242  0215                     	;# 
   243  0215                     	;# 
   244  0216                     	;# 
   245  0216                     	;# 
   246  0217                     	;# 
   247  0217                     	;# 
   248  0391                     	;# 
   249  0392                     	;# 
   250  0393                     	;# 
   251  0394                     	;# 
   252  0395                     	;# 
   253  0396                     	;# 
   254  0611                     	;# 
   255  0612                     	;# 
   256  0613                     	;# 
   257  0613                     	;# 
   258  0614                     	;# 
   259  0615                     	;# 
   260  0616                     	;# 
   261  0616                     	;# 
   262  0711                     	;# 
   263  0711                     	;# 
   264  0711                     	;# 
   265  0712                     	;# 
   266  0712                     	;# 
   267  0713                     	;# 
   268  0713                     	;# 
   269  0713                     	;# 
   270  0714                     	;# 
   271  0714                     	;# 
   272  0714                     	;# 
   273  0715                     	;# 
   274  0715                     	;# 
   275  0716                     	;# 
   276  0716                     	;# 
   277  0716                     	;# 
   278  0716                     	;# 
   279  0717                     	;# 
   280  0717                     	;# 
   281  0717                     	;# 
   282  0717                     	;# 
   283  0718                     	;# 
   284  0718                     	;# 
   285  0718                     	;# 
   286  0719                     	;# 
   287  0719                     	;# 
   288  0719                     	;# 
   289  0719                     	;# 
   290  071A                     	;# 
   291  071A                     	;# 
   292  071A                     	;# 
   293  071A                     	;# 
   294  071A                     	;# 
   295  071B                     	;# 
   296  071B                     	;# 
   297  071C                     	;# 
   298  071C                     	;# 
   299  071C                     	;# 
   300  071C                     	;# 
   301  071C                     	;# 
   302  071D                     	;# 
   303  071D                     	;# 
   304  071E                     	;# 
   305  071E                     	;# 
   306  0791                     	;# 
   307  0791                     	;# 
   308  0793                     	;# 
   309  0793                     	;# 
   310  0794                     	;# 
   311  0794                     	;# 
   312  0796                     	;# 
   313  0796                     	;# 
   314  0796                     	;# 
   315  0797                     	;# 
   316  0797                     	;# 
   317  0797                     	;# 
   318  0798                     	;# 
   319  0798                     	;# 
   320  0799                     	;# 
   321  0799                     	;# 
   322  0799                     	;# 
   323  079A                     	;# 
   324  079A                     	;# 
   325  079A                     	;# 
   326  079B                     	;# 
   327  079C                     	;# 
   328  079C                     	;# 
   329  079C                     	;# 
   330  079D                     	;# 
   331  079E                     	;# 
   332  079E                     	;# 
   333  0F8C                     	;# 
   334  0F8D                     	;# 
   335  0F91                     	;# 
   336  0F96                     	;# 
   337  0F97                     	;# 
   338  0F9C                     	;# 
   339  0F9D                     	;# 
   340  0F9E                     	;# 
   341  0FE3                     	;# 
   342  0FE4                     	;# 
   343  0FE5                     	;# 
   344  0FE6                     	;# 
   345  0FE7                     	;# 
   346  0FE8                     	;# 
   347  0FE9                     	;# 
   348  0FEA                     	;# 
   349  0FEB                     	;# 
   350  0FED                     	;# 
   351  0FEE                     	;# 
   352  0FEF                     	;# 
   353  0000                     	;# 
   354  0001                     	;# 
   355  0002                     	;# 
   356  0003                     	;# 
   357  0004                     	;# 
   358  0005                     	;# 
   359  0006                     	;# 
   360  0007                     	;# 
   361  0008                     	;# 
   362  0009                     	;# 
   363  000A                     	;# 
   364  000B                     	;# 
   365  000C                     	;# 
   366  000D                     	;# 
   367  000E                     	;# 
   368  0011                     	;# 
   369  0012                     	;# 
   370  0015                     	;# 
   371  0016                     	;# 
   372  0016                     	;# 
   373  0017                     	;# 
   374  0018                     	;# 
   375  0019                     	;# 
   376  001A                     	;# 
   377  001B                     	;# 
   378  001C                     	;# 
   379  008C                     	;# 
   380  008D                     	;# 
   381  008E                     	;# 
   382  0091                     	;# 
   383  0092                     	;# 
   384  0095                     	;# 
   385  0096                     	;# 
   386  0097                     	;# 
   387  0099                     	;# 
   388  009A                     	;# 
   389  009B                     	;# 
   390  009B                     	;# 
   391  009C                     	;# 
   392  009D                     	;# 
   393  009E                     	;# 
   394  009F                     	;# 
   395  010C                     	;# 
   396  010D                     	;# 
   397  010E                     	;# 
   398  0116                     	;# 
   399  0117                     	;# 
   400  011D                     	;# 
   401  018C                     	;# 
   402  018D                     	;# 
   403  018E                     	;# 
   404  0191                     	;# 
   405  0191                     	;# 
   406  0192                     	;# 
   407  0193                     	;# 
   408  0193                     	;# 
   409  0194                     	;# 
   410  0195                     	;# 
   411  0196                     	;# 
   412  0199                     	;# 
   413  019A                     	;# 
   414  019B                     	;# 
   415  019B                     	;# 
   416  019C                     	;# 
   417  019D                     	;# 
   418  019E                     	;# 
   419  019F                     	;# 
   420  020C                     	;# 
   421  020D                     	;# 
   422  0211                     	;# 
   423  0211                     	;# 
   424  0212                     	;# 
   425  0212                     	;# 
   426  0213                     	;# 
   427  0213                     	;# 
   428  0214                     	;# 
   429  0214                     	;# 
   430  0215                     	;# 
   431  0215                     	;# 
   432  0215                     	;# 
   433  0216                     	;# 
   434  0216                     	;# 
   435  0217                     	;# 
   436  0217                     	;# 
   437  0391                     	;# 
   438  0392                     	;# 
   439  0393                     	;# 
   440  0394                     	;# 
   441  0395                     	;# 
   442  0396                     	;# 
   443  0611                     	;# 
   444  0612                     	;# 
   445  0613                     	;# 
   446  0613                     	;# 
   447  0614                     	;# 
   448  0615                     	;# 
   449  0616                     	;# 
   450  0616                     	;# 
   451  0711                     	;# 
   452  0711                     	;# 
   453  0711                     	;# 
   454  0712                     	;# 
   455  0712                     	;# 
   456  0713                     	;# 
   457  0713                     	;# 
   458  0713                     	;# 
   459  0714                     	;# 
   460  0714                     	;# 
   461  0714                     	;# 
   462  0715                     	;# 
   463  0715                     	;# 
   464  0716                     	;# 
   465  0716                     	;# 
   466  0716                     	;# 
   467  0716                     	;# 
   468  0717                     	;# 
   469  0717                     	;# 
   470  0717                     	;# 
   471  0717                     	;# 
   472  0718                     	;# 
   473  0718                     	;# 
   474  0718                     	;# 
   475  0719                     	;# 
   476  0719                     	;# 
   477  0719                     	;# 
   478  0719                     	;# 
   479  071A                     	;# 
   480  071A                     	;# 
   481  071A                     	;# 
   482  071A                     	;# 
   483  071A                     	;# 
   484  071B                     	;# 
   485  071B                     	;# 
   486  071C                     	;# 
   487  071C                     	;# 
   488  071C                     	;# 
   489  071C                     	;# 
   490  071C                     	;# 
   491  071D                     	;# 
   492  071D                     	;# 
   493  071E                     	;# 
   494  071E                     	;# 
   495  0791                     	;# 
   496  0791                     	;# 
   497  0793                     	;# 
   498  0793                     	;# 
   499  0794                     	;# 
   500  0794                     	;# 
   501  0796                     	;# 
   502  0796                     	;# 
   503  0796                     	;# 
   504  0797                     	;# 
   505  0797                     	;# 
   506  0797                     	;# 
   507  0798                     	;# 
   508  0798                     	;# 
   509  0799                     	;# 
   510  0799                     	;# 
   511  0799                     	;# 
   512  079A                     	;# 
   513  079A                     	;# 
   514  079A                     	;# 
   515  079B                     	;# 
   516  079C                     	;# 
   517  079C                     	;# 
   518  079C                     	;# 
   519  079D                     	;# 
   520  079E                     	;# 
   521  079E                     	;# 
   522  0F8C                     	;# 
   523  0F8D                     	;# 
   524  0F91                     	;# 
   525  0F96                     	;# 
   526  0F97                     	;# 
   527  0F9C                     	;# 
   528  0F9D                     	;# 
   529  0F9E                     	;# 
   530  0FE3                     	;# 
   531  0FE4                     	;# 
   532  0FE5                     	;# 
   533  0FE6                     	;# 
   534  0FE7                     	;# 
   535  0FE8                     	;# 
   536  0FE9                     	;# 
   537  0FEA                     	;# 
   538  0FEB                     	;# 
   539  0FED                     	;# 
   540  0FEE                     	;# 
   541  0FEF                     	;# 
   542  0000                     	;# 
   543  0001                     	;# 
   544  0002                     	;# 
   545  0003                     	;# 
   546  0004                     	;# 
   547  0005                     	;# 
   548  0006                     	;# 
   549  0007                     	;# 
   550  0008                     	;# 
   551  0009                     	;# 
   552  000A                     	;# 
   553  000B                     	;# 
   554  000C                     	;# 
   555  000D                     	;# 
   556  000E                     	;# 
   557  0011                     	;# 
   558  0012                     	;# 
   559  0015                     	;# 
   560  0016                     	;# 
   561  0016                     	;# 
   562  0017                     	;# 
   563  0018                     	;# 
   564  0019                     	;# 
   565  001A                     	;# 
   566  001B                     	;# 
   567  001C                     	;# 
   568  008C                     	;# 
   569  008D                     	;# 
   570  008E                     	;# 
   571  0091                     	;# 
   572  0092                     	;# 
   573  0095                     	;# 
   574  0096                     	;# 
   575  0097                     	;# 
   576  0099                     	;# 
   577  009A                     	;# 
   578  009B                     	;# 
   579  009B                     	;# 
   580  009C                     	;# 
   581  009D                     	;# 
   582  009E                     	;# 
   583  009F                     	;# 
   584  010C                     	;# 
   585  010D                     	;# 
   586  010E                     	;# 
   587  0116                     	;# 
   588  0117                     	;# 
   589  011D                     	;# 
   590  018C                     	;# 
   591  018D                     	;# 
   592  018E                     	;# 
   593  0191                     	;# 
   594  0191                     	;# 
   595  0192                     	;# 
   596  0193                     	;# 
   597  0193                     	;# 
   598  0194                     	;# 
   599  0195                     	;# 
   600  0196                     	;# 
   601  0199                     	;# 
   602  019A                     	;# 
   603  019B                     	;# 
   604  019B                     	;# 
   605  019C                     	;# 
   606  019D                     	;# 
   607  019E                     	;# 
   608  019F                     	;# 
   609  020C                     	;# 
   610  020D                     	;# 
   611  0211                     	;# 
   612  0211                     	;# 
   613  0212                     	;# 
   614  0212                     	;# 
   615  0213                     	;# 
   616  0213                     	;# 
   617  0214                     	;# 
   618  0214                     	;# 
   619  0215                     	;# 
   620  0215                     	;# 
   621  0215                     	;# 
   622  0216                     	;# 
   623  0216                     	;# 
   624  0217                     	;# 
   625  0217                     	;# 
   626  0391                     	;# 
   627  0392                     	;# 
   628  0393                     	;# 
   629  0394                     	;# 
   630  0395                     	;# 
   631  0396                     	;# 
   632  0611                     	;# 
   633  0612                     	;# 
   634  0613                     	;# 
   635  0613                     	;# 
   636  0614                     	;# 
   637  0615                     	;# 
   638  0616                     	;# 
   639  0616                     	;# 
   640  0711                     	;# 
   641  0711                     	;# 
   642  0711                     	;# 
   643  0712                     	;# 
   644  0712                     	;# 
   645  0713                     	;# 
   646  0713                     	;# 
   647  0713                     	;# 
   648  0714                     	;# 
   649  0714                     	;# 
   650  0714                     	;# 
   651  0715                     	;# 
   652  0715                     	;# 
   653  0716                     	;# 
   654  0716                     	;# 
   655  0716                     	;# 
   656  0716                     	;# 
   657  0717                     	;# 
   658  0717                     	;# 
   659  0717                     	;# 
   660  0717                     	;# 
   661  0718                     	;# 
   662  0718                     	;# 
   663  0718                     	;# 
   664  0719                     	;# 
   665  0719                     	;# 
   666  0719                     	;# 
   667  0719                     	;# 
   668  071A                     	;# 
   669  071A                     	;# 
   670  071A                     	;# 
   671  071A                     	;# 
   672  071A                     	;# 
   673  071B                     	;# 
   674  071B                     	;# 
   675  071C                     	;# 
   676  071C                     	;# 
   677  071C                     	;# 
   678  071C                     	;# 
   679  071C                     	;# 
   680  071D                     	;# 
   681  071D                     	;# 
   682  071E                     	;# 
   683  071E                     	;# 
   684  0791                     	;# 
   685  0791                     	;# 
   686  0793                     	;# 
   687  0793                     	;# 
   688  0794                     	;# 
   689  0794                     	;# 
   690  0796                     	;# 
   691  0796                     	;# 
   692  0796                     	;# 
   693  0797                     	;# 
   694  0797                     	;# 
   695  0797                     	;# 
   696  0798                     	;# 
   697  0798                     	;# 
   698  0799                     	;# 
   699  0799                     	;# 
   700  0799                     	;# 
   701  079A                     	;# 
   702  079A                     	;# 
   703  079A                     	;# 
   704  079B                     	;# 
   705  079C                     	;# 
   706  079C                     	;# 
   707  079C                     	;# 
   708  079D                     	;# 
   709  079E                     	;# 
   710  079E                     	;# 
   711  0F8C                     	;# 
   712  0F8D                     	;# 
   713  0F91                     	;# 
   714  0F96                     	;# 
   715  0F97                     	;# 
   716  0F9C                     	;# 
   717  0F9D                     	;# 
   718  0F9E                     	;# 
   719  0FE3                     	;# 
   720  0FE4                     	;# 
   721  0FE5                     	;# 
   722  0FE6                     	;# 
   723  0FE7                     	;# 
   724  0FE8                     	;# 
   725  0FE9                     	;# 
   726  0FEA                     	;# 
   727  0FEB                     	;# 
   728  0FED                     	;# 
   729  0FEE                     	;# 
   730  0FEF                     	;# 
   731  0000                     	;# 
   732  0001                     	;# 
   733  0002                     	;# 
   734  0003                     	;# 
   735  0004                     	;# 
   736  0005                     	;# 
   737  0006                     	;# 
   738  0007                     	;# 
   739  0008                     	;# 
   740  0009                     	;# 
   741  000A                     	;# 
   742  000B                     	;# 
   743  000C                     	;# 
   744  000D                     	;# 
   745  000E                     	;# 
   746  0011                     	;# 
   747  0012                     	;# 
   748  0015                     	;# 
   749  0016                     	;# 
   750  0016                     	;# 
   751  0017                     	;# 
   752  0018                     	;# 
   753  0019                     	;# 
   754  001A                     	;# 
   755  001B                     	;# 
   756  001C                     	;# 
   757  008C                     	;# 
   758  008D                     	;# 
   759  008E                     	;# 
   760  0091                     	;# 
   761  0092                     	;# 
   762  0095                     	;# 
   763  0096                     	;# 
   764  0097                     	;# 
   765  0099                     	;# 
   766  009A                     	;# 
   767  009B                     	;# 
   768  009B                     	;# 
   769  009C                     	;# 
   770  009D                     	;# 
   771  009E                     	;# 
   772  009F                     	;# 
   773  010C                     	;# 
   774  010D                     	;# 
   775  010E                     	;# 
   776  0116                     	;# 
   777  0117                     	;# 
   778  011D                     	;# 
   779  018C                     	;# 
   780  018D                     	;# 
   781  018E                     	;# 
   782  0191                     	;# 
   783  0191                     	;# 
   784  0192                     	;# 
   785  0193                     	;# 
   786  0193                     	;# 
   787  0194                     	;# 
   788  0195                     	;# 
   789  0196                     	;# 
   790  0199                     	;# 
   791  019A                     	;# 
   792  019B                     	;# 
   793  019B                     	;# 
   794  019C                     	;# 
   795  019D                     	;# 
   796  019E                     	;# 
   797  019F                     	;# 
   798  020C                     	;# 
   799  020D                     	;# 
   800  0211                     	;# 
   801  0211                     	;# 
   802  0212                     	;# 
   803  0212                     	;# 
   804  0213                     	;# 
   805  0213                     	;# 
   806  0214                     	;# 
   807  0214                     	;# 
   808  0215                     	;# 
   809  0215                     	;# 
   810  0215                     	;# 
   811  0216                     	;# 
   812  0216                     	;# 
   813  0217                     	;# 
   814  0217                     	;# 
   815  0391                     	;# 
   816  0392                     	;# 
   817  0393                     	;# 
   818  0394                     	;# 
   819  0395                     	;# 
   820  0396                     	;# 
   821  0611                     	;# 
   822  0612                     	;# 
   823  0613                     	;# 
   824  0613                     	;# 
   825  0614                     	;# 
   826  0615                     	;# 
   827  0616                     	;# 
   828  0616                     	;# 
   829  0711                     	;# 
   830  0711                     	;# 
   831  0711                     	;# 
   832  0712                     	;# 
   833  0712                     	;# 
   834  0713                     	;# 
   835  0713                     	;# 
   836  0713                     	;# 
   837  0714                     	;# 
   838  0714                     	;# 
   839  0714                     	;# 
   840  0715                     	;# 
   841  0715                     	;# 
   842  0716                     	;# 
   843  0716                     	;# 
   844  0716                     	;# 
   845  0716                     	;# 
   846  0717                     	;# 
   847  0717                     	;# 
   848  0717                     	;# 
   849  0717                     	;# 
   850  0718                     	;# 
   851  0718                     	;# 
   852  0718                     	;# 
   853  0719                     	;# 
   854  0719                     	;# 
   855  0719                     	;# 
   856  0719                     	;# 
   857  071A                     	;# 
   858  071A                     	;# 
   859  071A                     	;# 
   860  071A                     	;# 
   861  071A                     	;# 
   862  071B                     	;# 
   863  071B                     	;# 
   864  071C                     	;# 
   865  071C                     	;# 
   866  071C                     	;# 
   867  071C                     	;# 
   868  071C                     	;# 
   869  071D                     	;# 
   870  071D                     	;# 
   871  071E                     	;# 
   872  071E                     	;# 
   873  0791                     	;# 
   874  0791                     	;# 
   875  0793                     	;# 
   876  0793                     	;# 
   877  0794                     	;# 
   878  0794                     	;# 
   879  0796                     	;# 
   880  0796                     	;# 
   881  0796                     	;# 
   882  0797                     	;# 
   883  0797                     	;# 
   884  0797                     	;# 
   885  0798                     	;# 
   886  0798                     	;# 
   887  0799                     	;# 
   888  0799                     	;# 
   889  0799                     	;# 
   890  079A                     	;# 
   891  079A                     	;# 
   892  079A                     	;# 
   893  079B                     	;# 
   894  079C                     	;# 
   895  079C                     	;# 
   896  079C                     	;# 
   897  079D                     	;# 
   898  079E                     	;# 
   899  079E                     	;# 
   900  0F8C                     	;# 
   901  0F8D                     	;# 
   902  0F91                     	;# 
   903  0F96                     	;# 
   904  0F97                     	;# 
   905  0F9C                     	;# 
   906  0F9D                     	;# 
   907  0F9E                     	;# 
   908  0FE3                     	;# 
   909  0FE4                     	;# 
   910  0FE5                     	;# 
   911  0FE6                     	;# 
   912  0FE7                     	;# 
   913  0FE8                     	;# 
   914  0FE9                     	;# 
   915  0FEA                     	;# 
   916  0FEB                     	;# 
   917  0FED                     	;# 
   918  0FEE                     	;# 
   919  0FEF                     	;# 
   920  0000                     	;# 
   921  0001                     	;# 
   922  0002                     	;# 
   923  0003                     	;# 
   924  0004                     	;# 
   925  0005                     	;# 
   926  0006                     	;# 
   927  0007                     	;# 
   928  0008                     	;# 
   929  0009                     	;# 
   930  000A                     	;# 
   931  000B                     	;# 
   932  000C                     	;# 
   933  000D                     	;# 
   934  000E                     	;# 
   935  0011                     	;# 
   936  0012                     	;# 
   937  0015                     	;# 
   938  0016                     	;# 
   939  0016                     	;# 
   940  0017                     	;# 
   941  0018                     	;# 
   942  0019                     	;# 
   943  001A                     	;# 
   944  001B                     	;# 
   945  001C                     	;# 
   946  008C                     	;# 
   947  008D                     	;# 
   948  008E                     	;# 
   949  0091                     	;# 
   950  0092                     	;# 
   951  0095                     	;# 
   952  0096                     	;# 
   953  0097                     	;# 
   954  0099                     	;# 
   955  009A                     	;# 
   956  009B                     	;# 
   957  009B                     	;# 
   958  009C                     	;# 
   959  009D                     	;# 
   960  009E                     	;# 
   961  009F                     	;# 
   962  010C                     	;# 
   963  010D                     	;# 
   964  010E                     	;# 
   965  0116                     	;# 
   966  0117                     	;# 
   967  011D                     	;# 
   968  018C                     	;# 
   969  018D                     	;# 
   970  018E                     	;# 
   971  0191                     	;# 
   972  0191                     	;# 
   973  0192                     	;# 
   974  0193                     	;# 
   975  0193                     	;# 
   976  0194                     	;# 
   977  0195                     	;# 
   978  0196                     	;# 
   979  0199                     	;# 
   980  019A                     	;# 
   981  019B                     	;# 
   982  019B                     	;# 
   983  019C                     	;# 
   984  019D                     	;# 
   985  019E                     	;# 
   986  019F                     	;# 
   987  020C                     	;# 
   988  020D                     	;# 
   989  0211                     	;# 
   990  0211                     	;# 
   991  0212                     	;# 
   992  0212                     	;# 
   993  0213                     	;# 
   994  0213                     	;# 
   995  0214                     	;# 
   996  0214                     	;# 
   997  0215                     	;# 
   998  0215                     	;# 
   999  0215                     	;# 
  1000  0216                     	;# 
  1001  0216                     	;# 
  1002  0217                     	;# 
  1003  0217                     	;# 
  1004  0391                     	;# 
  1005  0392                     	;# 
  1006  0393                     	;# 
  1007  0394                     	;# 
  1008  0395                     	;# 
  1009  0396                     	;# 
  1010  0611                     	;# 
  1011  0612                     	;# 
  1012  0613                     	;# 
  1013  0613                     	;# 
  1014  0614                     	;# 
  1015  0615                     	;# 
  1016  0616                     	;# 
  1017  0616                     	;# 
  1018  0711                     	;# 
  1019  0711                     	;# 
  1020  0711                     	;# 
  1021  0712                     	;# 
  1022  0712                     	;# 
  1023  0713                     	;# 
  1024  0713                     	;# 
  1025  0713                     	;# 
  1026  0714                     	;# 
  1027  0714                     	;# 
  1028  0714                     	;# 
  1029  0715                     	;# 
  1030  0715                     	;# 
  1031  0716                     	;# 
  1032  0716                     	;# 
  1033  0716                     	;# 
  1034  0716                     	;# 
  1035  0717                     	;# 
  1036  0717                     	;# 
  1037  0717                     	;# 
  1038  0717                     	;# 
  1039  0718                     	;# 
  1040  0718                     	;# 
  1041  0718                     	;# 
  1042  0719                     	;# 
  1043  0719                     	;# 
  1044  0719                     	;# 
  1045  0719                     	;# 
  1046  071A                     	;# 
  1047  071A                     	;# 
  1048  071A                     	;# 
  1049  071A                     	;# 
  1050  071A                     	;# 
  1051  071B                     	;# 
  1052  071B                     	;# 
  1053  071C                     	;# 
  1054  071C                     	;# 
  1055  071C                     	;# 
  1056  071C                     	;# 
  1057  071C                     	;# 
  1058  071D                     	;# 
  1059  071D                     	;# 
  1060  071E                     	;# 
  1061  071E                     	;# 
  1062  0791                     	;# 
  1063  0791                     	;# 
  1064  0793                     	;# 
  1065  0793                     	;# 
  1066  0794                     	;# 
  1067  0794                     	;# 
  1068  0796                     	;# 
  1069  0796                     	;# 
  1070  0796                     	;# 
  1071  0797                     	;# 
  1072  0797                     	;# 
  1073  0797                     	;# 
  1074  0798                     	;# 
  1075  0798                     	;# 
  1076  0799                     	;# 
  1077  0799                     	;# 
  1078  0799                     	;# 
  1079  079A                     	;# 
  1080  079A                     	;# 
  1081  079A                     	;# 
  1082  079B                     	;# 
  1083  079C                     	;# 
  1084  079C                     	;# 
  1085  079C                     	;# 
  1086  079D                     	;# 
  1087  079E                     	;# 
  1088  079E                     	;# 
  1089  0F8C                     	;# 
  1090  0F8D                     	;# 
  1091  0F91                     	;# 
  1092  0F96                     	;# 
  1093  0F97                     	;# 
  1094  0F9C                     	;# 
  1095  0F9D                     	;# 
  1096  0F9E                     	;# 
  1097  0FE3                     	;# 
  1098  0FE4                     	;# 
  1099  0FE5                     	;# 
  1100  0FE6                     	;# 
  1101  0FE7                     	;# 
  1102  0FE8                     	;# 
  1103  0FE9                     	;# 
  1104  0FEA                     	;# 
  1105  0FEB                     	;# 
  1106  0FED                     	;# 
  1107  0FEE                     	;# 
  1108  0FEF                     	;# 
  1109  0000                     	;# 
  1110  0001                     	;# 
  1111  0002                     	;# 
  1112  0003                     	;# 
  1113  0004                     	;# 
  1114  0005                     	;# 
  1115  0006                     	;# 
  1116  0007                     	;# 
  1117  0008                     	;# 
  1118  0009                     	;# 
  1119  000A                     	;# 
  1120  000B                     	;# 
  1121  000C                     	;# 
  1122  000D                     	;# 
  1123  000E                     	;# 
  1124  0011                     	;# 
  1125  0012                     	;# 
  1126  0015                     	;# 
  1127  0016                     	;# 
  1128  0016                     	;# 
  1129  0017                     	;# 
  1130  0018                     	;# 
  1131  0019                     	;# 
  1132  001A                     	;# 
  1133  001B                     	;# 
  1134  001C                     	;# 
  1135  008C                     	;# 
  1136  008D                     	;# 
  1137  008E                     	;# 
  1138  0091                     	;# 
  1139  0092                     	;# 
  1140  0095                     	;# 
  1141  0096                     	;# 
  1142  0097                     	;# 
  1143  0099                     	;# 
  1144  009A                     	;# 
  1145  009B                     	;# 
  1146  009B                     	;# 
  1147  009C                     	;# 
  1148  009D                     	;# 
  1149  009E                     	;# 
  1150  009F                     	;# 
  1151  010C                     	;# 
  1152  010D                     	;# 
  1153  010E                     	;# 
  1154  0116                     	;# 
  1155  0117                     	;# 
  1156  011D                     	;# 
  1157  018C                     	;# 
  1158  018D                     	;# 
  1159  018E                     	;# 
  1160  0191                     	;# 
  1161  0191                     	;# 
  1162  0192                     	;# 
  1163  0193                     	;# 
  1164  0193                     	;# 
  1165  0194                     	;# 
  1166  0195                     	;# 
  1167  0196                     	;# 
  1168  0199                     	;# 
  1169  019A                     	;# 
  1170  019B                     	;# 
  1171  019B                     	;# 
  1172  019C                     	;# 
  1173  019D                     	;# 
  1174  019E                     	;# 
  1175  019F                     	;# 
  1176  020C                     	;# 
  1177  020D                     	;# 
  1178  0211                     	;# 
  1179  0211                     	;# 
  1180  0212                     	;# 
  1181  0212                     	;# 
  1182  0213                     	;# 
  1183  0213                     	;# 
  1184  0214                     	;# 
  1185  0214                     	;# 
  1186  0215                     	;# 
  1187  0215                     	;# 
  1188  0215                     	;# 
  1189  0216                     	;# 
  1190  0216                     	;# 
  1191  0217                     	;# 
  1192  0217                     	;# 
  1193  0391                     	;# 
  1194  0392                     	;# 
  1195  0393                     	;# 
  1196  0394                     	;# 
  1197  0395                     	;# 
  1198  0396                     	;# 
  1199  0611                     	;# 
  1200  0612                     	;# 
  1201  0613                     	;# 
  1202  0613                     	;# 
  1203  0614                     	;# 
  1204  0615                     	;# 
  1205  0616                     	;# 
  1206  0616                     	;# 
  1207  0711                     	;# 
  1208  0711                     	;# 
  1209  0711                     	;# 
  1210  0712                     	;# 
  1211  0712                     	;# 
  1212  0713                     	;# 
  1213  0713                     	;# 
  1214  0713                     	;# 
  1215  0714                     	;# 
  1216  0714                     	;# 
  1217  0714                     	;# 
  1218  0715                     	;# 
  1219  0715                     	;# 
  1220  0716                     	;# 
  1221  0716                     	;# 
  1222  0716                     	;# 
  1223  0716                     	;# 
  1224  0717                     	;# 
  1225  0717                     	;# 
  1226  0717                     	;# 
  1227  0717                     	;# 
  1228  0718                     	;# 
  1229  0718                     	;# 
  1230  0718                     	;# 
  1231  0719                     	;# 
  1232  0719                     	;# 
  1233  0719                     	;# 
  1234  0719                     	;# 
  1235  071A                     	;# 
  1236  071A                     	;# 
  1237  071A                     	;# 
  1238  071A                     	;# 
  1239  071A                     	;# 
  1240  071B                     	;# 
  1241  071B                     	;# 
  1242  071C                     	;# 
  1243  071C                     	;# 
  1244  071C                     	;# 
  1245  071C                     	;# 
  1246  071C                     	;# 
  1247  071D                     	;# 
  1248  071D                     	;# 
  1249  071E                     	;# 
  1250  071E                     	;# 
  1251  0791                     	;# 
  1252  0791                     	;# 
  1253  0793                     	;# 
  1254  0793                     	;# 
  1255  0794                     	;# 
  1256  0794                     	;# 
  1257  0796                     	;# 
  1258  0796                     	;# 
  1259  0796                     	;# 
  1260  0797                     	;# 
  1261  0797                     	;# 
  1262  0797                     	;# 
  1263  0798                     	;# 
  1264  0798                     	;# 
  1265  0799                     	;# 
  1266  0799                     	;# 
  1267  0799                     	;# 
  1268  079A                     	;# 
  1269  079A                     	;# 
  1270  079A                     	;# 
  1271  079B                     	;# 
  1272  079C                     	;# 
  1273  079C                     	;# 
  1274  079C                     	;# 
  1275  079D                     	;# 
  1276  079E                     	;# 
  1277  079E                     	;# 
  1278  0F8C                     	;# 
  1279  0F8D                     	;# 
  1280  0F91                     	;# 
  1281  0F96                     	;# 
  1282  0F97                     	;# 
  1283  0F9C                     	;# 
  1284  0F9D                     	;# 
  1285  0F9E                     	;# 
  1286  0FE3                     	;# 
  1287  0FE4                     	;# 
  1288  0FE5                     	;# 
  1289  0FE6                     	;# 
  1290  0FE7                     	;# 
  1291  0FE8                     	;# 
  1292  0FE9                     	;# 
  1293  0FEA                     	;# 
  1294  0FEB                     	;# 
  1295  0FED                     	;# 
  1296  0FEE                     	;# 
  1297  0FEF                     	;# 
  1298  0000                     	;# 
  1299  0001                     	;# 
  1300  0002                     	;# 
  1301  0003                     	;# 
  1302  0004                     	;# 
  1303  0005                     	;# 
  1304  0006                     	;# 
  1305  0007                     	;# 
  1306  0008                     	;# 
  1307  0009                     	;# 
  1308  000A                     	;# 
  1309  000B                     	;# 
  1310  000C                     	;# 
  1311  000D                     	;# 
  1312  000E                     	;# 
  1313  0011                     	;# 
  1314  0012                     	;# 
  1315  0015                     	;# 
  1316  0016                     	;# 
  1317  0016                     	;# 
  1318  0017                     	;# 
  1319  0018                     	;# 
  1320  0019                     	;# 
  1321  001A                     	;# 
  1322  001B                     	;# 
  1323  001C                     	;# 
  1324  008C                     	;# 
  1325  008D                     	;# 
  1326  008E                     	;# 
  1327  0091                     	;# 
  1328  0092                     	;# 
  1329  0095                     	;# 
  1330  0096                     	;# 
  1331  0097                     	;# 
  1332  0099                     	;# 
  1333  009A                     	;# 
  1334  009B                     	;# 
  1335  009B                     	;# 
  1336  009C                     	;# 
  1337  009D                     	;# 
  1338  009E                     	;# 
  1339  009F                     	;# 
  1340  010C                     	;# 
  1341  010D                     	;# 
  1342  010E                     	;# 
  1343  0116                     	;# 
  1344  0117                     	;# 
  1345  011D                     	;# 
  1346  018C                     	;# 
  1347  018D                     	;# 
  1348  018E                     	;# 
  1349  0191                     	;# 
  1350  0191                     	;# 
  1351  0192                     	;# 
  1352  0193                     	;# 
  1353  0193                     	;# 
  1354  0194                     	;# 
  1355  0195                     	;# 
  1356  0196                     	;# 
  1357  0199                     	;# 
  1358  019A                     	;# 
  1359  019B                     	;# 
  1360  019B                     	;# 
  1361  019C                     	;# 
  1362  019D                     	;# 
  1363  019E                     	;# 
  1364  019F                     	;# 
  1365  020C                     	;# 
  1366  020D                     	;# 
  1367  0211                     	;# 
  1368  0211                     	;# 
  1369  0212                     	;# 
  1370  0212                     	;# 
  1371  0213                     	;# 
  1372  0213                     	;# 
  1373  0214                     	;# 
  1374  0214                     	;# 
  1375  0215                     	;# 
  1376  0215                     	;# 
  1377  0215                     	;# 
  1378  0216                     	;# 
  1379  0216                     	;# 
  1380  0217                     	;# 
  1381  0217                     	;# 
  1382  0391                     	;# 
  1383  0392                     	;# 
  1384  0393                     	;# 
  1385  0394                     	;# 
  1386  0395                     	;# 
  1387  0396                     	;# 
  1388  0611                     	;# 
  1389  0612                     	;# 
  1390  0613                     	;# 
  1391  0613                     	;# 
  1392  0614                     	;# 
  1393  0615                     	;# 
  1394  0616                     	;# 
  1395  0616                     	;# 
  1396  0711                     	;# 
  1397  0711                     	;# 
  1398  0711                     	;# 
  1399  0712                     	;# 
  1400  0712                     	;# 
  1401  0713                     	;# 
  1402  0713                     	;# 
  1403  0713                     	;# 
  1404  0714                     	;# 
  1405  0714                     	;# 
  1406  0714                     	;# 
  1407  0715                     	;# 
  1408  0715                     	;# 
  1409  0716                     	;# 
  1410  0716                     	;# 
  1411  0716                     	;# 
  1412  0716                     	;# 
  1413  0717                     	;# 
  1414  0717                     	;# 
  1415  0717                     	;# 
  1416  0717                     	;# 
  1417  0718                     	;# 
  1418  0718                     	;# 
  1419  0718                     	;# 
  1420  0719                     	;# 
  1421  0719                     	;# 
  1422  0719                     	;# 
  1423  0719                     	;# 
  1424  071A                     	;# 
  1425  071A                     	;# 
  1426  071A                     	;# 
  1427  071A                     	;# 
  1428  071A                     	;# 
  1429  071B                     	;# 
  1430  071B                     	;# 
  1431  071C                     	;# 
  1432  071C                     	;# 
  1433  071C                     	;# 
  1434  071C                     	;# 
  1435  071C                     	;# 
  1436  071D                     	;# 
  1437  071D                     	;# 
  1438  071E                     	;# 
  1439  071E                     	;# 
  1440  0791                     	;# 
  1441  0791                     	;# 
  1442  0793                     	;# 
  1443  0793                     	;# 
  1444  0794                     	;# 
  1445  0794                     	;# 
  1446  0796                     	;# 
  1447  0796                     	;# 
  1448  0796                     	;# 
  1449  0797                     	;# 
  1450  0797                     	;# 
  1451  0797                     	;# 
  1452  0798                     	;# 
  1453  0798                     	;# 
  1454  0799                     	;# 
  1455  0799                     	;# 
  1456  0799                     	;# 
  1457  079A                     	;# 
  1458  079A                     	;# 
  1459  079A                     	;# 
  1460  079B                     	;# 
  1461  079C                     	;# 
  1462  079C                     	;# 
  1463  079C                     	;# 
  1464  079D                     	;# 
  1465  079E                     	;# 
  1466  079E                     	;# 
  1467  0F8C                     	;# 
  1468  0F8D                     	;# 
  1469  0F91                     	;# 
  1470  0F96                     	;# 
  1471  0F97                     	;# 
  1472  0F9C                     	;# 
  1473  0F9D                     	;# 
  1474  0F9E                     	;# 
  1475  0FE3                     	;# 
  1476  0FE4                     	;# 
  1477  0FE5                     	;# 
  1478  0FE6                     	;# 
  1479  0FE7                     	;# 
  1480  0FE8                     	;# 
  1481  0FE9                     	;# 
  1482  0FEA                     	;# 
  1483  0FEB                     	;# 
  1484  0FED                     	;# 
  1485  0FEE                     	;# 
  1486  0FEF                     	;# 
  1487  0000                     	;# 
  1488  0001                     	;# 
  1489  0002                     	;# 
  1490  0003                     	;# 
  1491  0004                     	;# 
  1492  0005                     	;# 
  1493  0006                     	;# 
  1494  0007                     	;# 
  1495  0008                     	;# 
  1496  0009                     	;# 
  1497  000A                     	;# 
  1498  000B                     	;# 
  1499  000C                     	;# 
  1500  000D                     	;# 
  1501  000E                     	;# 
  1502  0011                     	;# 
  1503  0012                     	;# 
  1504  0015                     	;# 
  1505  0016                     	;# 
  1506  0016                     	;# 
  1507  0017                     	;# 
  1508  0018                     	;# 
  1509  0019                     	;# 
  1510  001A                     	;# 
  1511  001B                     	;# 
  1512  001C                     	;# 
  1513  008C                     	;# 
  1514  008D                     	;# 
  1515  008E                     	;# 
  1516  0091                     	;# 
  1517  0092                     	;# 
  1518  0095                     	;# 
  1519  0096                     	;# 
  1520  0097                     	;# 
  1521  0099                     	;# 
  1522  009A                     	;# 
  1523  009B                     	;# 
  1524  009B                     	;# 
  1525  009C                     	;# 
  1526  009D                     	;# 
  1527  009E                     	;# 
  1528  009F                     	;# 
  1529  010C                     	;# 
  1530  010D                     	;# 
  1531  010E                     	;# 
  1532  0116                     	;# 
  1533  0117                     	;# 
  1534  011D                     	;# 
  1535  018C                     	;# 
  1536  018D                     	;# 
  1537  018E                     	;# 
  1538  0191                     	;# 
  1539  0191                     	;# 
  1540  0192                     	;# 
  1541  0193                     	;# 
  1542  0193                     	;# 
  1543  0194                     	;# 
  1544  0195                     	;# 
  1545  0196                     	;# 
  1546  0199                     	;# 
  1547  019A                     	;# 
  1548  019B                     	;# 
  1549  019B                     	;# 
  1550  019C                     	;# 
  1551  019D                     	;# 
  1552  019E                     	;# 
  1553  019F                     	;# 
  1554  020C                     	;# 
  1555  020D                     	;# 
  1556  0211                     	;# 
  1557  0211                     	;# 
  1558  0212                     	;# 
  1559  0212                     	;# 
  1560  0213                     	;# 
  1561  0213                     	;# 
  1562  0214                     	;# 
  1563  0214                     	;# 
  1564  0215                     	;# 
  1565  0215                     	;# 
  1566  0215                     	;# 
  1567  0216                     	;# 
  1568  0216                     	;# 
  1569  0217                     	;# 
  1570  0217                     	;# 
  1571  0391                     	;# 
  1572  0392                     	;# 
  1573  0393                     	;# 
  1574  0394                     	;# 
  1575  0395                     	;# 
  1576  0396                     	;# 
  1577  0611                     	;# 
  1578  0612                     	;# 
  1579  0613                     	;# 
  1580  0613                     	;# 
  1581  0614                     	;# 
  1582  0615                     	;# 
  1583  0616                     	;# 
  1584  0616                     	;# 
  1585  0711                     	;# 
  1586  0711                     	;# 
  1587  0711                     	;# 
  1588  0712                     	;# 
  1589  0712                     	;# 
  1590  0713                     	;# 
  1591  0713                     	;# 
  1592  0713                     	;# 
  1593  0714                     	;# 
  1594  0714                     	;# 
  1595  0714                     	;# 
  1596  0715                     	;# 
  1597  0715                     	;# 
  1598  0716                     	;# 
  1599  0716                     	;# 
  1600  0716                     	;# 
  1601  0716                     	;# 
  1602  0717                     	;# 
  1603  0717                     	;# 
  1604  0717                     	;# 
  1605  0717                     	;# 
  1606  0718                     	;# 
  1607  0718                     	;# 
  1608  0718                     	;# 
  1609  0719                     	;# 
  1610  0719                     	;# 
  1611  0719                     	;# 
  1612  0719                     	;# 
  1613  071A                     	;# 
  1614  071A                     	;# 
  1615  071A                     	;# 
  1616  071A                     	;# 
  1617  071A                     	;# 
  1618  071B                     	;# 
  1619  071B                     	;# 
  1620  071C                     	;# 
  1621  071C                     	;# 
  1622  071C                     	;# 
  1623  071C                     	;# 
  1624  071C                     	;# 
  1625  071D                     	;# 
  1626  071D                     	;# 
  1627  071E                     	;# 
  1628  071E                     	;# 
  1629  0791                     	;# 
  1630  0791                     	;# 
  1631  0793                     	;# 
  1632  0793                     	;# 
  1633  0794                     	;# 
  1634  0794                     	;# 
  1635  0796                     	;# 
  1636  0796                     	;# 
  1637  0796                     	;# 
  1638  0797                     	;# 
  1639  0797                     	;# 
  1640  0797                     	;# 
  1641  0798                     	;# 
  1642  0798                     	;# 
  1643  0799                     	;# 
  1644  0799                     	;# 
  1645  0799                     	;# 
  1646  079A                     	;# 
  1647  079A                     	;# 
  1648  079A                     	;# 
  1649  079B                     	;# 
  1650  079C                     	;# 
  1651  079C                     	;# 
  1652  079C                     	;# 
  1653  079D                     	;# 
  1654  079E                     	;# 
  1655  079E                     	;# 
  1656  0F8C                     	;# 
  1657  0F8D                     	;# 
  1658  0F91                     	;# 
  1659  0F96                     	;# 
  1660  0F97                     	;# 
  1661  0F9C                     	;# 
  1662  0F9D                     	;# 
  1663  0F9E                     	;# 
  1664  0FE3                     	;# 
  1665  0FE4                     	;# 
  1666  0FE5                     	;# 
  1667  0FE6                     	;# 
  1668  0FE7                     	;# 
  1669  0FE8                     	;# 
  1670  0FE9                     	;# 
  1671  0FEA                     	;# 
  1672  0FEB                     	;# 
  1673  0FED                     	;# 
  1674  0FEE                     	;# 
  1675  0FEF                     	;# 
  1676  0000                     	;# 
  1677  0001                     	;# 
  1678  0002                     	;# 
  1679  0003                     	;# 
  1680  0004                     	;# 
  1681  0005                     	;# 
  1682  0006                     	;# 
  1683  0007                     	;# 
  1684  0008                     	;# 
  1685  0009                     	;# 
  1686  000A                     	;# 
  1687  000B                     	;# 
  1688  000C                     	;# 
  1689  000D                     	;# 
  1690  000E                     	;# 
  1691  0011                     	;# 
  1692  0012                     	;# 
  1693  0015                     	;# 
  1694  0016                     	;# 
  1695  0016                     	;# 
  1696  0017                     	;# 
  1697  0018                     	;# 
  1698  0019                     	;# 
  1699  001A                     	;# 
  1700  001B                     	;# 
  1701  001C                     	;# 
  1702  008C                     	;# 
  1703  008D                     	;# 
  1704  008E                     	;# 
  1705  0091                     	;# 
  1706  0092                     	;# 
  1707  0095                     	;# 
  1708  0096                     	;# 
  1709  0097                     	;# 
  1710  0099                     	;# 
  1711  009A                     	;# 
  1712  009B                     	;# 
  1713  009B                     	;# 
  1714  009C                     	;# 
  1715  009D                     	;# 
  1716  009E                     	;# 
  1717  009F                     	;# 
  1718  010C                     	;# 
  1719  010D                     	;# 
  1720  010E                     	;# 
  1721  0116                     	;# 
  1722  0117                     	;# 
  1723  011D                     	;# 
  1724  018C                     	;# 
  1725  018D                     	;# 
  1726  018E                     	;# 
  1727  0191                     	;# 
  1728  0191                     	;# 
  1729  0192                     	;# 
  1730  0193                     	;# 
  1731  0193                     	;# 
  1732  0194                     	;# 
  1733  0195                     	;# 
  1734  0196                     	;# 
  1735  0199                     	;# 
  1736  019A                     	;# 
  1737  019B                     	;# 
  1738  019B                     	;# 
  1739  019C                     	;# 
  1740  019D                     	;# 
  1741  019E                     	;# 
  1742  019F                     	;# 
  1743  020C                     	;# 
  1744  020D                     	;# 
  1745  0211                     	;# 
  1746  0211                     	;# 
  1747  0212                     	;# 
  1748  0212                     	;# 
  1749  0213                     	;# 
  1750  0213                     	;# 
  1751  0214                     	;# 
  1752  0214                     	;# 
  1753  0215                     	;# 
  1754  0215                     	;# 
  1755  0215                     	;# 
  1756  0216                     	;# 
  1757  0216                     	;# 
  1758  0217                     	;# 
  1759  0217                     	;# 
  1760  0391                     	;# 
  1761  0392                     	;# 
  1762  0393                     	;# 
  1763  0394                     	;# 
  1764  0395                     	;# 
  1765  0396                     	;# 
  1766  0611                     	;# 
  1767  0612                     	;# 
  1768  0613                     	;# 
  1769  0613                     	;# 
  1770  0614                     	;# 
  1771  0615                     	;# 
  1772  0616                     	;# 
  1773  0616                     	;# 
  1774  0711                     	;# 
  1775  0711                     	;# 
  1776  0711                     	;# 
  1777  0712                     	;# 
  1778  0712                     	;# 
  1779  0713                     	;# 
  1780  0713                     	;# 
  1781  0713                     	;# 
  1782  0714                     	;# 
  1783  0714                     	;# 
  1784  0714                     	;# 
  1785  0715                     	;# 
  1786  0715                     	;# 
  1787  0716                     	;# 
  1788  0716                     	;# 
  1789  0716                     	;# 
  1790  0716                     	;# 
  1791  0717                     	;# 
  1792  0717                     	;# 
  1793  0717                     	;# 
  1794  0717                     	;# 
  1795  0718                     	;# 
  1796  0718                     	;# 
  1797  0718                     	;# 
  1798  0719                     	;# 
  1799  0719                     	;# 
  1800  0719                     	;# 
  1801  0719                     	;# 
  1802  071A                     	;# 
  1803  071A                     	;# 
  1804  071A                     	;# 
  1805  071A                     	;# 
  1806  071A                     	;# 
  1807  071B                     	;# 
  1808  071B                     	;# 
  1809  071C                     	;# 
  1810  071C                     	;# 
  1811  071C                     	;# 
  1812  071C                     	;# 
  1813  071C                     	;# 
  1814  071D                     	;# 
  1815  071D                     	;# 
  1816  071E                     	;# 
  1817  071E                     	;# 
  1818  0791                     	;# 
  1819  0791                     	;# 
  1820  0793                     	;# 
  1821  0793                     	;# 
  1822  0794                     	;# 
  1823  0794                     	;# 
  1824  0796                     	;# 
  1825  0796                     	;# 
  1826  0796                     	;# 
  1827  0797                     	;# 
  1828  0797                     	;# 
  1829  0797                     	;# 
  1830  0798                     	;# 
  1831  0798                     	;# 
  1832  0799                     	;# 
  1833  0799                     	;# 
  1834  0799                     	;# 
  1835  079A                     	;# 
  1836  079A                     	;# 
  1837  079A                     	;# 
  1838  079B                     	;# 
  1839  079C                     	;# 
  1840  079C                     	;# 
  1841  079C                     	;# 
  1842  079D                     	;# 
  1843  079E                     	;# 
  1844  079E                     	;# 
  1845  0F8C                     	;# 
  1846  0F8D                     	;# 
  1847  0F91                     	;# 
  1848  0F96                     	;# 
  1849  0F97                     	;# 
  1850  0F9C                     	;# 
  1851  0F9D                     	;# 
  1852  0F9E                     	;# 
  1853  0FE3                     	;# 
  1854  0FE4                     	;# 
  1855  0FE5                     	;# 
  1856  0FE6                     	;# 
  1857  0FE7                     	;# 
  1858  0FE8                     	;# 
  1859  0FE9                     	;# 
  1860  0FEA                     	;# 
  1861  0FEB                     	;# 
  1862  0FED                     	;# 
  1863  0FEE                     	;# 
  1864  0FEF                     	;# 
  1865  0000                     	;# 
  1866  0001                     	;# 
  1867  0002                     	;# 
  1868  0003                     	;# 
  1869  0004                     	;# 
  1870  0005                     	;# 
  1871  0006                     	;# 
  1872  0007                     	;# 
  1873  0008                     	;# 
  1874  0009                     	;# 
  1875  000A                     	;# 
  1876  000B                     	;# 
  1877  000C                     	;# 
  1878  000D                     	;# 
  1879  000E                     	;# 
  1880  0011                     	;# 
  1881  0012                     	;# 
  1882  0015                     	;# 
  1883  0016                     	;# 
  1884  0016                     	;# 
  1885  0017                     	;# 
  1886  0018                     	;# 
  1887  0019                     	;# 
  1888  001A                     	;# 
  1889  001B                     	;# 
  1890  001C                     	;# 
  1891  008C                     	;# 
  1892  008D                     	;# 
  1893  008E                     	;# 
  1894  0091                     	;# 
  1895  0092                     	;# 
  1896  0095                     	;# 
  1897  0096                     	;# 
  1898  0097                     	;# 
  1899  0099                     	;# 
  1900  009A                     	;# 
  1901  009B                     	;# 
  1902  009B                     	;# 
  1903  009C                     	;# 
  1904  009D                     	;# 
  1905  009E                     	;# 
  1906  009F                     	;# 
  1907  010C                     	;# 
  1908  010D                     	;# 
  1909  010E                     	;# 
  1910  0116                     	;# 
  1911  0117                     	;# 
  1912  011D                     	;# 
  1913  018C                     	;# 
  1914  018D                     	;# 
  1915  018E                     	;# 
  1916  0191                     	;# 
  1917  0191                     	;# 
  1918  0192                     	;# 
  1919  0193                     	;# 
  1920  0193                     	;# 
  1921  0194                     	;# 
  1922  0195                     	;# 
  1923  0196                     	;# 
  1924  0199                     	;# 
  1925  019A                     	;# 
  1926  019B                     	;# 
  1927  019B                     	;# 
  1928  019C                     	;# 
  1929  019D                     	;# 
  1930  019E                     	;# 
  1931  019F                     	;# 
  1932  020C                     	;# 
  1933  020D                     	;# 
  1934  0211                     	;# 
  1935  0211                     	;# 
  1936  0212                     	;# 
  1937  0212                     	;# 
  1938  0213                     	;# 
  1939  0213                     	;# 
  1940  0214                     	;# 
  1941  0214                     	;# 
  1942  0215                     	;# 
  1943  0215                     	;# 
  1944  0215                     	;# 
  1945  0216                     	;# 
  1946  0216                     	;# 
  1947  0217                     	;# 
  1948  0217                     	;# 
  1949  0391                     	;# 
  1950  0392                     	;# 
  1951  0393                     	;# 
  1952  0394                     	;# 
  1953  0395                     	;# 
  1954  0396                     	;# 
  1955  0611                     	;# 
  1956  0612                     	;# 
  1957  0613                     	;# 
  1958  0613                     	;# 
  1959  0614                     	;# 
  1960  0615                     	;# 
  1961  0616                     	;# 
  1962  0616                     	;# 
  1963  0711                     	;# 
  1964  0711                     	;# 
  1965  0711                     	;# 
  1966  0712                     	;# 
  1967  0712                     	;# 
  1968  0713                     	;# 
  1969  0713                     	;# 
  1970  0713                     	;# 
  1971  0714                     	;# 
  1972  0714                     	;# 
  1973  0714                     	;# 
  1974  0715                     	;# 
  1975  0715                     	;# 
  1976  0716                     	;# 
  1977  0716                     	;# 
  1978  0716                     	;# 
  1979  0716                     	;# 
  1980  0717                     	;# 
  1981  0717                     	;# 
  1982  0717                     	;# 
  1983  0717                     	;# 
  1984  0718                     	;# 
  1985  0718                     	;# 
  1986  0718                     	;# 
  1987  0719                     	;# 
  1988  0719                     	;# 
  1989  0719                     	;# 
  1990  0719                     	;# 
  1991  071A                     	;# 
  1992  071A                     	;# 
  1993  071A                     	;# 
  1994  071A                     	;# 
  1995  071A                     	;# 
  1996  071B                     	;# 
  1997  071B                     	;# 
  1998  071C                     	;# 
  1999  071C                     	;# 
  2000  071C                     	;# 
  2001  071C                     	;# 
  2002  071C                     	;# 
  2003  071D                     	;# 
  2004  071D                     	;# 
  2005  071E                     	;# 
  2006  071E                     	;# 
  2007  0791                     	;# 
  2008  0791                     	;# 
  2009  0793                     	;# 
  2010  0793                     	;# 
  2011  0794                     	;# 
  2012  0794                     	;# 
  2013  0796                     	;# 
  2014  0796                     	;# 
  2015  0796                     	;# 
  2016  0797                     	;# 
  2017  0797                     	;# 
  2018  0797                     	;# 
  2019  0798                     	;# 
  2020  0798                     	;# 
  2021  0799                     	;# 
  2022  0799                     	;# 
  2023  0799                     	;# 
  2024  079A                     	;# 
  2025  079A                     	;# 
  2026  079A                     	;# 
  2027  079B                     	;# 
  2028  079C                     	;# 
  2029  079C                     	;# 
  2030  079C                     	;# 
  2031  079D                     	;# 
  2032  079E                     	;# 
  2033  079E                     	;# 
  2034  0F8C                     	;# 
  2035  0F8D                     	;# 
  2036  0F91                     	;# 
  2037  0F96                     	;# 
  2038  0F97                     	;# 
  2039  0F9C                     	;# 
  2040  0F9D                     	;# 
  2041  0F9E                     	;# 
  2042  0FE3                     	;# 
  2043  0FE4                     	;# 
  2044  0FE5                     	;# 
  2045  0FE6                     	;# 
  2046  0FE7                     	;# 
  2047  0FE8                     	;# 
  2048  0FE9                     	;# 
  2049  0FEA                     	;# 
  2050  0FEB                     	;# 
  2051  0FED                     	;# 
  2052  0FEE                     	;# 
  2053  0FEF                     	;# 
  2054  0000                     	;# 
  2055  0001                     	;# 
  2056  0002                     	;# 
  2057  0003                     	;# 
  2058  0004                     	;# 
  2059  0005                     	;# 
  2060  0006                     	;# 
  2061  0007                     	;# 
  2062  0008                     	;# 
  2063  0009                     	;# 
  2064  000A                     	;# 
  2065  000B                     	;# 
  2066  000C                     	;# 
  2067  000D                     	;# 
  2068  000E                     	;# 
  2069  0011                     	;# 
  2070  0012                     	;# 
  2071  0015                     	;# 
  2072  0016                     	;# 
  2073  0016                     	;# 
  2074  0017                     	;# 
  2075  0018                     	;# 
  2076  0019                     	;# 
  2077  001A                     	;# 
  2078  001B                     	;# 
  2079  001C                     	;# 
  2080  008C                     	;# 
  2081  008D                     	;# 
  2082  008E                     	;# 
  2083  0091                     	;# 
  2084  0092                     	;# 
  2085  0095                     	;# 
  2086  0096                     	;# 
  2087  0097                     	;# 
  2088  0099                     	;# 
  2089  009A                     	;# 
  2090  009B                     	;# 
  2091  009B                     	;# 
  2092  009C                     	;# 
  2093  009D                     	;# 
  2094  009E                     	;# 
  2095  009F                     	;# 
  2096  010C                     	;# 
  2097  010D                     	;# 
  2098  010E                     	;# 
  2099  0116                     	;# 
  2100  0117                     	;# 
  2101  011D                     	;# 
  2102  018C                     	;# 
  2103  018D                     	;# 
  2104  018E                     	;# 
  2105  0191                     	;# 
  2106  0191                     	;# 
  2107  0192                     	;# 
  2108  0193                     	;# 
  2109  0193                     	;# 
  2110  0194                     	;# 
  2111  0195                     	;# 
  2112  0196                     	;# 
  2113  0199                     	;# 
  2114  019A                     	;# 
  2115  019B                     	;# 
  2116  019B                     	;# 
  2117  019C                     	;# 
  2118  019D                     	;# 
  2119  019E                     	;# 
  2120  019F                     	;# 
  2121  020C                     	;# 
  2122  020D                     	;# 
  2123  0211                     	;# 
  2124  0211                     	;# 
  2125  0212                     	;# 
  2126  0212                     	;# 
  2127  0213                     	;# 
  2128  0213                     	;# 
  2129  0214                     	;# 
  2130  0214                     	;# 
  2131  0215                     	;# 
  2132  0215                     	;# 
  2133  0215                     	;# 
  2134  0216                     	;# 
  2135  0216                     	;# 
  2136  0217                     	;# 
  2137  0217                     	;# 
  2138  0391                     	;# 
  2139  0392                     	;# 
  2140  0393                     	;# 
  2141  0394                     	;# 
  2142  0395                     	;# 
  2143  0396                     	;# 
  2144  0611                     	;# 
  2145  0612                     	;# 
  2146  0613                     	;# 
  2147  0613                     	;# 
  2148  0614                     	;# 
  2149  0615                     	;# 
  2150  0616                     	;# 
  2151  0616                     	;# 
  2152  0711                     	;# 
  2153  0711                     	;# 
  2154  0711                     	;# 
  2155  0712                     	;# 
  2156  0712                     	;# 
  2157  0713                     	;# 
  2158  0713                     	;# 
  2159  0713                     	;# 
  2160  0714                     	;# 
  2161  0714                     	;# 
  2162  0714                     	;# 
  2163  0715                     	;# 
  2164  0715                     	;# 
  2165  0716                     	;# 
  2166  0716                     	;# 
  2167  0716                     	;# 
  2168  0716                     	;# 
  2169  0717                     	;# 
  2170  0717                     	;# 
  2171  0717                     	;# 
  2172  0717                     	;# 
  2173  0718                     	;# 
  2174  0718                     	;# 
  2175  0718                     	;# 
  2176  0719                     	;# 
  2177  0719                     	;# 
  2178  0719                     	;# 
  2179  0719                     	;# 
  2180  071A                     	;# 
  2181  071A                     	;# 
  2182  071A                     	;# 
  2183  071A                     	;# 
  2184  071A                     	;# 
  2185  071B                     	;# 
  2186  071B                     	;# 
  2187  071C                     	;# 
  2188  071C                     	;# 
  2189  071C                     	;# 
  2190  071C                     	;# 
  2191  071C                     	;# 
  2192  071D                     	;# 
  2193  071D                     	;# 
  2194  071E                     	;# 
  2195  071E                     	;# 
  2196  0791                     	;# 
  2197  0791                     	;# 
  2198  0793                     	;# 
  2199  0793                     	;# 
  2200  0794                     	;# 
  2201  0794                     	;# 
  2202  0796                     	;# 
  2203  0796                     	;# 
  2204  0796                     	;# 
  2205  0797                     	;# 
  2206  0797                     	;# 
  2207  0797                     	;# 
  2208  0798                     	;# 
  2209  0798                     	;# 
  2210  0799                     	;# 
  2211  0799                     	;# 
  2212  0799                     	;# 
  2213  079A                     	;# 
  2214  079A                     	;# 
  2215  079A                     	;# 
  2216  079B                     	;# 
  2217  079C                     	;# 
  2218  079C                     	;# 
  2219  079C                     	;# 
  2220  079D                     	;# 
  2221  079E                     	;# 
  2222  079E                     	;# 
  2223  0F8C                     	;# 
  2224  0F8D                     	;# 
  2225  0F91                     	;# 
  2226  0F96                     	;# 
  2227  0F97                     	;# 
  2228  0F9C                     	;# 
  2229  0F9D                     	;# 
  2230  0F9E                     	;# 
  2231  0FE3                     	;# 
  2232  0FE4                     	;# 
  2233  0FE5                     	;# 
  2234  0FE6                     	;# 
  2235  0FE7                     	;# 
  2236  0FE8                     	;# 
  2237  0FE9                     	;# 
  2238  0FEA                     	;# 
  2239  0FEB                     	;# 
  2240  0FED                     	;# 
  2241  0FEE                     	;# 
  2242  0FEF                     	;# 
  2243                           
  2244                           	psect	idataBANK0
  2245  0800                     __pidataBANK0:	
  2246                           
  2247                           ;initializer for _callback_notPressed
  2248  0800  34AC               	retlw	low _Button_DefaultCallback
  2249  0801  3416               	retlw	high _Button_DefaultCallback
  2250                           
  2251                           ;initializer for _sample_period
  2252  0802  34AE               	retlw	174
  2253                           
  2254                           	psect	idataBANK1
  2255  084A                     __pidataBANK1:	
  2256                           
  2257                           ;initializer for _Button_StateMachine
  2258  084A  34F4               	retlw	low _Button_State_Initializing
  2259  084B  340D               	retlw	high _Button_State_Initializing
  2260  084C  34C7               	retlw	low _Button_State_NotPressed
  2261  084D  3405               	retlw	high _Button_State_NotPressed
  2262  084E  344F               	retlw	low _Button_State_Pressed
  2263  084F  340E               	retlw	high _Button_State_Pressed
  2264                           
  2265                           ;initializer for _callback_pressed
  2266  0850  34AC               	retlw	low _Button_DefaultCallback
  2267  0851  3416               	retlw	high _Button_DefaultCallback
  2268                           
  2269                           ;initializer for _callback_sampled
  2270  0852  34AD               	retlw	low _Sensor_DefaultCallback
  2271  0853  3416               	retlw	high _Sensor_DefaultCallback
  2272                           
  2273                           ;initializer for _mtouch_sensor
  2274  0854  3400               	retlw	0
  2275  0855  345D               	retlw	93
  2276  0856  3430               	retlw	48
  2277  0857  3410               	retlw	16
  2278  0858  3420               	retlw	32
  2279  0859  3400               	retlw	0
  2280  085A  3400               	retlw	0
  2281  085B  3400               	retlw	0
  2282  085C  3400               	retlw	0
  2283                           
  2284                           	psect	stringtext1
  2285  180F                     __pstringtext1:	
  2286  180F                     Sensor_Scanfrequency_Evaluation@frequency_hop:	
  2287  180F  3400               	retlw	0
  2288  1810  340D               	retlw	13
  2289  1811  341C               	retlw	28
  2290  1812  341E               	retlw	30
  2291  1813  3417               	retlw	23
  2292  1814                     __end_ofSensor_Scanfrequency_Evaluation@frequency_hop:	
  2293                           
  2294                           	psect	stringtext2
  2295  1821                     __pstringtext2:	
  2296  1821                     _sensor_scan_group:	
  2297  1821  3400               	retlw	0
  2298  1822  34DE               	retlw	low (_mtouch_sensor| 0)
  2299  1823                     __end_of_sensor_scan_group:	
  2300                           
  2301                           	psect	stringtext3
  2302  1000                     __pstringtext3:	
  2303  1000                     _mtouch_button_init:	
  2304  1000  3400               	retlw	0
  2305  1001  3400               	retlw	0
  2306  1002  3400               	retlw	0
  2307  1003  3400               	retlw	0
  2308  1004  3400               	retlw	0
  2309  1005  3400               	retlw	0
  2310  1006  3400               	retlw	0
  2311  1007  3400               	retlw	0
  2312  1008  3400               	retlw	0
  2313  1009  3400               	retlw	0
  2314  100A  3400               	retlw	0
  2315  100B  3400               	retlw	0
  2316  100C  3400               	retlw	0
  2317  100D  3400               	retlw	0
  2318  100E  3464               	retlw	100
  2319  100F  3401               	retlw	1
  2320  1010                     __end_of_mtouch_button_init:	
  2321                           
  2322                           	psect	nvBANK1
  2323  00E7                     __pnvBANK1:	
  2324  00E7                     _EUSART_OverrunErrorHandler:	
  2325  00E7                     	ds	2
  2326  00E9                     _EUSART_FramingErrorHandler:	
  2327  00E9                     	ds	2
  2328  00EB                     _EUSART_RxDefaultInterruptHandler:	
  2329  00EB                     	ds	2
  2330  00ED                     _EUSART_TxDefaultInterruptHandler:	
  2331  00ED                     	ds	2
  2332  00EF                     _eusartTxBufferRemaining:	
  2333  00EF                     	ds	1
  2334                           
  2335                           	psect	nvBANK2
  2336  0140                     __pnvBANK2:	
  2337  0140                     _EUSART_ErrorHandler:	
  2338  0140                     	ds	2
  2339  001C                     _T2CON	set	28
  2340  001A                     _TMR2	set	26
  2341  001B                     _PR2	set	27
  2342  000B                     _INTCONbits	set	11
  2343  0012                     _PIR2bits	set	18
  2344  0011                     _PIR1bits	set	17
  2345  001C                     _T2CONbits	set	28
  2346  005F                     _GIE	set	95
  2347  0095                     _OPTION_REGbits	set	149
  2348  008E                     _TRISC	set	142
  2349  008D                     _TRISB	set	141
  2350  008C                     _TRISA	set	140
  2351  0097                     _WDTCON	set	151
  2352  0099                     _OSCCON	set	153
  2353  0091                     _PIE1bits	set	145
  2354  010E                     _LATCbits	set	270
  2355  010C                     _LATAbits	set	268
  2356  011D                     _APFCON	set	285
  2357  010E                     _LATC	set	270
  2358  010D                     _LATB	set	269
  2359  010C                     _LATA	set	268
  2360  0116                     _BORCON	set	278
  2361  011D                     _APFCONbits	set	285
  2362  018C                     _ANSELA	set	396
  2363  018D                     _ANSELB	set	397
  2364  018E                     _ANSELC	set	398
  2365  0199                     _RCREG	set	409
  2366  019D                     _RCSTAbits	set	413
  2367  019A                     _TXREG	set	410
  2368  019E                     _TXSTAbits	set	414
  2369  019C                     _SPBRGH	set	412
  2370  019B                     _SPBRGL	set	411
  2371  019E                     _TXSTA	set	414
  2372  019D                     _RCSTA	set	413
  2373  019F                     _BAUDCON	set	415
  2374  020C                     _WPUA	set	524
  2375  020D                     _WPUB	set	525
  2376  071A                     _AAD1RES0	set	1818
  2377  0711                     _AD1CON0bits	set	1809
  2378  0714                     _AAD1CON3	set	1812
  2379  0713                     _AD1CON2	set	1811
  2380  0717                     _AD1ACQCON	set	1815
  2381  0716                     _AD1PRECON	set	1814
  2382  0718                     _AAD1GRD	set	1816
  2383  0713                     _AAD1CON2	set	1811
  2384  0719                     _AAD1CAP	set	1817
  2385  0714                     _AD1CON3	set	1812
  2386  0712                     _ADCOMCON	set	1810
  2387  0711                     _AD1CON0	set	1809
  2388  079A                     _AAD2RES0	set	1946
  2389  0791                     _AD2CON0bits	set	1937
  2390  0797                     _AD2ACQCON	set	1943
  2391  0796                     _AD2PRECON	set	1942
  2392  0794                     _AAD2CON3	set	1940
  2393  0798                     _AAD2GRD	set	1944
  2394  0793                     _AD2CON2	set	1939
  2395  0794                     _AD2CON3	set	1940
  2396  0791                     _AD2CON0	set	1937
  2397                           
  2398                           	psect	stringtext4
  2399  1800                     __pstringtext4:	
  2400  1800                     STR_1:	
  2401  1800  3450               	retlw	80	;'P'
  2402  1801  3449               	retlw	73	;'I'
  2403  1802  3443               	retlw	67	;'C'
  2404  1803  3453               	retlw	83	;'S'
  2405  1804  344D               	retlw	77	;'M'
  2406  1805  3441               	retlw	65	;'A'
  2407  1806  3452               	retlw	82	;'R'
  2408  1807  3454               	retlw	84	;'T'
  2409  1808  3400               	retlw	0
  2410                           
  2411                           	psect	stringtext5
  2412  1809                     __pstringtext5:	
  2413  1809                     STR_2:	
  2414  1809  3452               	retlw	82	;'R'
  2415  180A  3455               	retlw	85	;'U'
  2416  180B  344E               	retlw	78	;'N'
  2417  180C  340D               	retlw	13
  2418  180D  340A               	retlw	10
  2419  180E  3400               	retlw	0
  2420                           
  2421                           	psect	stringtext6
  2422  1814                     __pstringtext6:	
  2423  1814                     STR_3:	
  2424  1814  3450               	retlw	80	;'P'
  2425  1815  3449               	retlw	73	;'I'
  2426  1816  3443               	retlw	67	;'C'
  2427  1817  3430               	retlw	48	;'0'
  2428  1818  3400               	retlw	0
  2429                           
  2430                           	psect	stringtext7
  2431  1819                     __pstringtext7:	
  2432  1819                     STR_4:	
  2433  1819  3450               	retlw	80	;'P'
  2434  181A  3449               	retlw	73	;'I'
  2435  181B  3443               	retlw	67	;'C'
  2436  181C  3431               	retlw	49	;'1'
  2437  181D  3400               	retlw	0
  2438                           
  2439                           	psect	stringtext8
  2440  181E                     __pstringtext8:	
  2441  181E                     STR_5:	
  2442  181E  3425               	retlw	37	;'%'
  2443  181F  3463               	retlw	99	;'c'
  2444  1820  3400               	retlw	0
  2445                           
  2446                           	psect	stringtext9
  2447  0000                     __pstringtext9:	
  2448                           
  2449                           ; #config settings
  2450  0000                     
  2451                           	psect	cinit
  2452  0025                     start_initialization:	
  2453  0025                     __initialization:	
  2454                           
  2455                           ; Initialize objects allocated to BANK0
  2456  0025  3000               	movlw	low __pidataBANK0
  2457  0026  0084               	movwf	4
  2458  0027  3088               	movlw	(high __pidataBANK0)| (0+128)
  2459  0028  0085               	movwf	5
  2460  0029  306C               	movlw	low __pdataBANK0
  2461  002A  0086               	movwf	6
  2462  002B  3000               	movlw	high __pdataBANK0
  2463  002C  0087               	movwf	7
  2464  002D  3003               	movlw	3
  2465  002E  3197  2711  3180   	fcall	init_ram
  2466                           
  2467                           ; Initialize objects allocated to BANK1
  2468  0031  304A               	movlw	low __pidataBANK1
  2469  0032  0084               	movwf	4
  2470  0033  3088               	movlw	(high __pidataBANK1)| (0+128)
  2471  0034  0085               	movwf	5
  2472  0035  30D4               	movlw	low __pdataBANK1
  2473  0036  0086               	movwf	6
  2474  0037  3000               	movlw	high __pdataBANK1
  2475  0038  0087               	movwf	7
  2476  0039  3013               	movlw	19
  2477  003A  3197  2711  3180   	fcall	init_ram
  2478                           
  2479                           ; Clear objects allocated to COMMON
  2480  003D  01FC               	clrf	__pbssCOMMON& (0+127)
  2481                           
  2482                           ; Clear objects allocated to BANK0
  2483  003E  3053               	movlw	low __pbssBANK0
  2484  003F  0084               	movwf	4
  2485  0040  3000               	movlw	high __pbssBANK0
  2486  0041  0085               	movwf	5
  2487  0042  3019               	movlw	25
  2488  0043  3197  270B  3180   	fcall	clear_ram0
  2489                           
  2490                           ; Clear objects allocated to BANK1
  2491  0046  30A0               	movlw	low __pbssBANK1
  2492  0047  0084               	movwf	4
  2493  0048  3000               	movlw	high __pbssBANK1
  2494  0049  0085               	movwf	5
  2495  004A  3034               	movlw	52
  2496  004B  3197  270B  3180   	fcall	clear_ram0
  2497                           
  2498                           ; Clear objects allocated to BANK2
  2499  004E  3020               	movlw	low __pbssBANK2
  2500  004F  0084               	movwf	4
  2501  0050  3001               	movlw	high __pbssBANK2
  2502  0051  0085               	movwf	5
  2503  0052  3020               	movlw	32
  2504  0053  3197  270B         	fcall	clear_ram0
  2505  0055                     end_of_initialization:	
  2506                           ;End of C runtime variable initialization code
  2507                           
  2508  0055                     __end_of__initialization:	
  2509  0055  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2510  0056  0020               	movlb	0
  2511  0057  3180  2859         	ljmp	_main	;jump to C main() function
  2512                           
  2513                           	psect	bssCOMMON
  2514  007C                     __pbssCOMMON:	
  2515  007C                     _eusartRxHead:	
  2516  007C                     	ds	1
  2517                           
  2518                           	psect	bssBANK0
  2519  0053                     __pbssBANK0:	
  2520  0053                     _packet_sample:	
  2521  0053                     	ds	4
  2522  0057                     _width:	
  2523  0057                     	ds	2
  2524  0059                     _last_touch_status:	
  2525  0059                     	ds	2
  2526  005B                     _packet_noise:	
  2527  005B                     	ds	2
  2528  005D                     _update_state_flag:	
  2529  005D                     	ds	1
  2530  005E                     _blink_count:	
  2531  005E                     	ds	1
  2532  005F                     _blink:	
  2533  005F                     	ds	1
  2534  0060                     _check_request:	
  2535  0060                     	ds	1
  2536  0061                     _config_status:	
  2537  0061                     	ds	1
  2538  0062                     _prcData:	
  2539  0062                     	ds	1
  2540  0063                     _rxData:	
  2541  0063                     	ds	1
  2542  0064                     _eusartRxLastError:	
  2543  0064                     	ds	1
  2544  0065                     _eusartRxCount:	
  2545  0065                     	ds	1
  2546  0066                     _eusartRxTail:	
  2547  0066                     	ds	1
  2548  0067                     _eusartTxTail:	
  2549  0067                     	ds	1
  2550  0068                     _eusartTxHead:	
  2551  0068                     	ds	1
  2552  0069                     _sensor_globalFlags:	
  2553  0069                     	ds	1
  2554  006A                     _lowpowerActivated:	
  2555  006A                     	ds	1
  2556  006B                     _mtouch_time_toScan:	
  2557  006B                     	ds	1
  2558                           
  2559                           	psect	dataBANK0
  2560  006C                     __pdataBANK0:	
  2561  006C                     _callback_notPressed:	
  2562  006C                     	ds	2
  2563  006E                     _sample_period:	
  2564  006E                     	ds	1
  2565                           
  2566                           	psect	bssBANK1
  2567  00A0                     __pbssBANK1:	
  2568  00A0                     _eusartRxStatusBuffer:	
  2569  00A0                     	ds	8
  2570  00A8                     _eusartRxBuffer:	
  2571  00A8                     	ds	8
  2572  00B0                     _eusartTxBuffer:	
  2573  00B0                     	ds	8
  2574  00B8                     _timeout_count:	
  2575  00B8                     	ds	4
  2576  00BC                     _nout:	
  2577  00BC                     	ds	2
  2578  00BE                     _prec:	
  2579  00BE                     	ds	2
  2580  00C0                     _flags:	
  2581  00C0                     	ds	2
  2582  00C2                     _count_conf:	
  2583  00C2                     	ds	2
  2584  00C4                     _mtouch_button:	
  2585  00C4                     	ds	16
  2586                           
  2587                           	psect	dataBANK1
  2588  00D4                     __pdataBANK1:	
  2589  00D4                     _Button_StateMachine:	
  2590  00D4                     	ds	6
  2591  00DA                     _callback_pressed:	
  2592  00DA                     	ds	2
  2593  00DC                     _callback_sampled:	
  2594  00DC                     	ds	2
  2595  00DE                     _mtouch_sensor:	
  2596  00DE                     	ds	9
  2597                           
  2598                           	psect	bssBANK2
  2599  0120                     __pbssBANK2:	
  2600  0120                     _dbuf:	
  2601  0120                     	ds	32
  2602                           
  2603                           	psect	inittext
  2604  1711                     init_ram:	
  2605  1711  00FE               	movwf	126
  2606  1712                     initloop:	
  2607  1712  0012               	moviw fsr0++
  2608  1713  001E               	movwi fsr1++
  2609  1714  0BFE               	decfsz	126,f
  2610  1715  2F12               	goto	initloop
  2611  1716  3400               	retlw	0
  2612                           
  2613                           	psect	clrtext
  2614  170B                     clear_ram0:	
  2615                           ;	Called with FSR0 containing the base address, and
  2616                           ;	WREG with the size to clear
  2617                           
  2618  170B  0064               	clrwdt	;clear the watchdog before getting into this loop
  2619  170C                     clrloop0:	
  2620  170C  0180               	clrf	0	;clear RAM location pointed to by FSR
  2621  170D  3101               	addfsr 0,1
  2622  170E  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2623  170F  2F0C               	goto	clrloop0	;have we reached the end yet?
  2624  1710  3400               	retlw	0	;all done for this memory range, return
  2625                           
  2626                           	psect	cstackBANK2
  2627  0142                     __pcstackBANK2:	
  2628  0142                     ??_main:	
  2629                           
  2630                           ; 1 bytes @ 0x0
  2631  0142                     	ds	2
  2632                           
  2633                           	psect	cstackCOMMON
  2634  0070                     __pcstackCOMMON:	
  2635  0070                     ?_MTOUCH_Service_Mainloop:	
  2636  0070                     ?_MTOUCH_Button_isPressed:	
  2637                           ; 1 bytes @ 0x0
  2638                           
  2639  0070                     ?_MTOUCH_Sensor_InitializeAll:	
  2640                           ; 1 bytes @ 0x0
  2641                           
  2642  0070                     ?_MTOUCH_Button_InitializeAll:	
  2643                           ; 1 bytes @ 0x0
  2644                           
  2645  0070                     ?_MTOUCH_Sensor_Sampled_ResetAll:	
  2646                           ; 1 bytes @ 0x0
  2647                           
  2648  0070                     ?_MTOUCH_Sensor_Scan_Initialize:	
  2649                           ; 1 bytes @ 0x0
  2650                           
  2651  0070                     ?_MTOUCH_Sensor_SampleAll:	
  2652                           ; 1 bytes @ 0x0
  2653                           
  2654  0070                     ?_MTOUCH_Button_ServiceAll:	
  2655                           ; 1 bytes @ 0x0
  2656                           
  2657  0070                     ?_MTOUCH_needReburst:	
  2658                           ; 1 bytes @ 0x0
  2659                           
  2660  0070                     ?_MTOUCH_Tick:	
  2661                           ; 1 bytes @ 0x0
  2662                           
  2663  0070                     ?_MTOUCH_Button_Tick:	
  2664                           ; 1 bytes @ 0x0
  2665                           
  2666  0070                     ?_MTOUCH_Sensor_Enable:	
  2667                           ; 1 bytes @ 0x0
  2668                           
  2669  0070                     ?_MTOUCH_Sensor_Calibrate:	
  2670                           ; 1 bytes @ 0x0
  2671                           
  2672  0070                     ?_Sensor_Sampled_Reset:	
  2673                           ; 1 bytes @ 0x0
  2674                           
  2675  0070                     ?_Sensor_Service:	
  2676                           ; 1 bytes @ 0x0
  2677                           
  2678  0070                     ?_Sensor_isEnabled:	
  2679                           ; 1 bytes @ 0x0
  2680                           
  2681  0070                     ?_Sensor_RawSample_Update:	
  2682                           ; 1 bytes @ 0x0
  2683                           
  2684  0070                     ?_Sensor_setSampled:	
  2685                           ; 1 bytes @ 0x0
  2686                           
  2687  0070                     ?_Sensor_postAcquisitionProcess:	
  2688                           ; 1 bytes @ 0x0
  2689                           
  2690  0070                     ?_Sensor_isActive:	
  2691                           ; 1 bytes @ 0x0
  2692                           
  2693  0070                     ?_Sensor_isCalibrated:	
  2694                           ; 1 bytes @ 0x0
  2695                           
  2696  0070                     ?_Sensor_setActive:	
  2697                           ; 1 bytes @ 0x0
  2698                           
  2699  0070                     ?_Sensor_setInactive:	
  2700                           ; 1 bytes @ 0x0
  2701                           
  2702  0070                     ?_Sensor_isCalibratingAcqTime:	
  2703                           ; 1 bytes @ 0x0
  2704                           
  2705  0070                     ?_TMR2_LoadPeriodRegister:	
  2706                           ; 1 bytes @ 0x0
  2707                           
  2708  0070                     ?_TMR2_StartTimer:	
  2709                           ; 1 bytes @ 0x0
  2710                           
  2711  0070                     ?_TMR2_StopTimer:	
  2712                           ; 1 bytes @ 0x0
  2713                           
  2714  0070                     ?_Sensor_autoCalibration:	
  2715                           ; 1 bytes @ 0x0
  2716                           
  2717  0070                     ?_Sensor_setCalibratAcqTime:	
  2718                           ; 1 bytes @ 0x0
  2719                           
  2720  0070                     ?_Sensor_setCalibrated:	
  2721                           ; 1 bytes @ 0x0
  2722                           
  2723  0070                     ?_Button_Service:	
  2724                           ; 1 bytes @ 0x0
  2725                           
  2726  0070                     ?_Button_Reading_Update:	
  2727                           ; 1 bytes @ 0x0
  2728                           
  2729  0070                     ?_Button_Deviation_Update:	
  2730                           ; 1 bytes @ 0x0
  2731                           
  2732  0070                     ?_Button_Baseline_Initialize:	
  2733                           ; 1 bytes @ 0x0
  2734                           
  2735  0070                     ?_Button_Baseline_Update:	
  2736                           ; 1 bytes @ 0x0
  2737                           
  2738  0070                     ?_Button_Tick_helper:	
  2739                           ; 1 bytes @ 0x0
  2740                           
  2741  0070                     ?_Button_Reading_Update_Helper:	
  2742                           ; 1 bytes @ 0x0
  2743                           
  2744  0070                     ?_EUSART_Receive_ISR:	
  2745                           ; 1 bytes @ 0x0
  2746                           
  2747  0070                     ?_EUSART_Transmit_ISR:	
  2748                           ; 1 bytes @ 0x0
  2749                           
  2750  0070                     ??_EUSART_Transmit_ISR:	
  2751                           ; 1 bytes @ 0x0
  2752                           
  2753  0070                     ?_EUSART_DefaultFramingErrorHandler:	
  2754                           ; 1 bytes @ 0x0
  2755                           
  2756  0070                     ??_EUSART_DefaultFramingErrorHandler:	
  2757                           ; 1 bytes @ 0x0
  2758                           
  2759  0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  2760                           ; 1 bytes @ 0x0
  2761                           
  2762  0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  2763                           ; 1 bytes @ 0x0
  2764                           
  2765  0070                     ?_EUSART_DefaultErrorHandler:	
  2766                           ; 1 bytes @ 0x0
  2767                           
  2768  0070                     ?_EUSART_RxDataHandler:	
  2769                           ; 1 bytes @ 0x0
  2770                           
  2771  0070                     ??_EUSART_RxDataHandler:	
  2772                           ; 1 bytes @ 0x0
  2773                           
  2774  0070                     ?_PIN_MANAGER_Initialize:	
  2775                           ; 1 bytes @ 0x0
  2776                           
  2777  0070                     ?_OSCILLATOR_Initialize:	
  2778                           ; 1 bytes @ 0x0
  2779                           
  2780  0070                     ?_WDT_Initialize:	
  2781                           ; 1 bytes @ 0x0
  2782                           
  2783  0070                     ?_LED_PROCESS:	
  2784                           ; 1 bytes @ 0x0
  2785                           
  2786  0070                     ?_RELAY_PROCESS:	
  2787                           ; 1 bytes @ 0x0
  2788                           
  2789  0070                     ?_update_state:	
  2790                           ; 1 bytes @ 0x0
  2791                           
  2792  0070                     ?_check_data:	
  2793                           ; 1 bytes @ 0x0
  2794                           
  2795  0070                     ?_check_message:	
  2796                           ; 1 bytes @ 0x0
  2797                           
  2798  0070                     ?_DATA_PROCESS:	
  2799                           ; 1 bytes @ 0x0
  2800                           
  2801  0070                     ?_MTOUCH_Initialize:	
  2802                           ; 1 bytes @ 0x0
  2803                           
  2804  0070                     ?_MTOUCH_Sensor_Initialize:	
  2805                           ; 1 bytes @ 0x0
  2806                           
  2807  0070                     ?_Sensor_getScanGroupIndex:	
  2808                           ; 1 bytes @ 0x0
  2809                           
  2810  0070                     ?_MTOUCH_Sensor_isCalibrated:	
  2811                           ; 1 bytes @ 0x0
  2812                           
  2813  0070                     ?_MTOUCH_Sensor_wasSampled:	
  2814                           ; 1 bytes @ 0x0
  2815                           
  2816  0070                     ?_MTOUCH_Button_Initialize:	
  2817                           ; 1 bytes @ 0x0
  2818                           
  2819  0070                     ?_EUSART_Initialize:	
  2820                           ; 1 bytes @ 0x0
  2821                           
  2822  0070                     ?_EUSART_is_rx_ready:	
  2823                           ; 1 bytes @ 0x0
  2824                           
  2825  0070                     ?_EUSART_Read:	
  2826                           ; 1 bytes @ 0x0
  2827                           
  2828  0070                     ?_EUSART_Write:	
  2829                           ; 1 bytes @ 0x0
  2830                           
  2831  0070                     ?_putch:	
  2832                           ; 1 bytes @ 0x0
  2833                           
  2834  0070                     ?_TMR2_Initialize:	
  2835                           ; 1 bytes @ 0x0
  2836                           
  2837  0070                     ?_INTERRUPT_InterruptManager:	
  2838                           ; 1 bytes @ 0x0
  2839                           
  2840  0070                     ?_SYSTEM_Initialize:	
  2841                           ; 1 bytes @ 0x0
  2842                           
  2843  0070                     ?_main:	
  2844                           ; 1 bytes @ 0x0
  2845                           
  2846  0070                     ?_LED_1_SetHigh:	
  2847                           ; 1 bytes @ 0x0
  2848                           
  2849  0070                     ?_LED_1_SetLow:	
  2850                           ; 1 bytes @ 0x0
  2851                           
  2852                           
  2853                           ; 1 bytes @ 0x0
  2854  0070                     	ds	1
  2855  0071                     ??_MTOUCH_Button_isPressed:	
  2856  0071                     ??_MTOUCH_Sensor_Scan_Initialize:	
  2857                           ; 1 bytes @ 0x1
  2858                           
  2859  0071                     ??_MTOUCH_needReburst:	
  2860                           ; 1 bytes @ 0x1
  2861                           
  2862  0071                     ?_Sensor_DefaultCallback:	
  2863                           ; 1 bytes @ 0x1
  2864                           
  2865  0071                     ??_Sensor_Sampled_Reset:	
  2866                           ; 1 bytes @ 0x1
  2867                           
  2868  0071                     ??_Sensor_isEnabled:	
  2869                           ; 1 bytes @ 0x1
  2870                           
  2871  0071                     ??_Sensor_setSampled:	
  2872                           ; 1 bytes @ 0x1
  2873                           
  2874  0071                     ??_Sensor_isActive:	
  2875                           ; 1 bytes @ 0x1
  2876                           
  2877  0071                     ??_Sensor_isCalibrated:	
  2878                           ; 1 bytes @ 0x1
  2879                           
  2880  0071                     ??_Sensor_setActive:	
  2881                           ; 1 bytes @ 0x1
  2882                           
  2883  0071                     ??_Sensor_setInactive:	
  2884                           ; 1 bytes @ 0x1
  2885                           
  2886  0071                     ??_Sensor_isCalibratingAcqTime:	
  2887                           ; 1 bytes @ 0x1
  2888                           
  2889  0071                     ??_TMR2_LoadPeriodRegister:	
  2890                           ; 1 bytes @ 0x1
  2891                           
  2892  0071                     ??_TMR2_StartTimer:	
  2893                           ; 1 bytes @ 0x1
  2894                           
  2895  0071                     ??_TMR2_StopTimer:	
  2896                           ; 1 bytes @ 0x1
  2897                           
  2898  0071                     ??_Sensor_setCalibratAcqTime:	
  2899                           ; 1 bytes @ 0x1
  2900                           
  2901  0071                     ??_Sensor_setCalibrated:	
  2902                           ; 1 bytes @ 0x1
  2903                           
  2904  0071                     ?_memcpy:	
  2905                           ; 1 bytes @ 0x1
  2906                           
  2907  0071                     ??_Button_Deviation_Update:	
  2908                           ; 1 bytes @ 0x1
  2909                           
  2910  0071                     ??_Button_Baseline_Update:	
  2911                           ; 1 bytes @ 0x1
  2912                           
  2913  0071                     ??_Button_Tick_helper:	
  2914                           ; 1 bytes @ 0x1
  2915                           
  2916  0071                     ?_EUSART_SetRxInterruptHandler:	
  2917                           ; 1 bytes @ 0x1
  2918                           
  2919  0071                     ??_EUSART_Receive_ISR:	
  2920                           ; 1 bytes @ 0x1
  2921                           
  2922  0071                     ?_EUSART_SetTxInterruptHandler:	
  2923                           ; 1 bytes @ 0x1
  2924                           
  2925  0071                     ?_EUSART_SetFramingErrorHandler:	
  2926                           ; 1 bytes @ 0x1
  2927                           
  2928  0071                     ?_EUSART_SetOverrunErrorHandler:	
  2929                           ; 1 bytes @ 0x1
  2930                           
  2931  0071                     ?_EUSART_SetErrorHandler:	
  2932                           ; 1 bytes @ 0x1
  2933                           
  2934  0071                     ??_EUSART_DefaultErrorHandler:	
  2935                           ; 1 bytes @ 0x1
  2936                           
  2937  0071                     ??_PIN_MANAGER_Initialize:	
  2938                           ; 1 bytes @ 0x1
  2939                           
  2940  0071                     ??_OSCILLATOR_Initialize:	
  2941                           ; 1 bytes @ 0x1
  2942                           
  2943  0071                     ??_WDT_Initialize:	
  2944                           ; 1 bytes @ 0x1
  2945                           
  2946  0071                     ??_LED_PROCESS:	
  2947                           ; 1 bytes @ 0x1
  2948                           
  2949  0071                     ??_RELAY_PROCESS:	
  2950                           ; 1 bytes @ 0x1
  2951                           
  2952  0071                     ??_check_data:	
  2953                           ; 1 bytes @ 0x1
  2954                           
  2955  0071                     ??_Sensor_getScanGroupIndex:	
  2956                           ; 1 bytes @ 0x1
  2957                           
  2958  0071                     ?_MTOUCH_Button_SetPressedCallback:	
  2959                           ; 1 bytes @ 0x1
  2960                           
  2961  0071                     ?_MTOUCH_Button_SetNotPressedCallback:	
  2962                           ; 1 bytes @ 0x1
  2963                           
  2964  0071                     ??_EUSART_is_rx_ready:	
  2965                           ; 1 bytes @ 0x1
  2966                           
  2967  0071                     ??_EUSART_Read:	
  2968                           ; 1 bytes @ 0x1
  2969                           
  2970  0071                     ??_EUSART_Write:	
  2971                           ; 1 bytes @ 0x1
  2972                           
  2973  0071                     ??_TMR2_Initialize:	
  2974                           ; 1 bytes @ 0x1
  2975                           
  2976  0071                     ??_INTERRUPT_InterruptManager:	
  2977                           ; 1 bytes @ 0x1
  2978                           
  2979  0071                     ??_LED_1_SetHigh:	
  2980                           ; 1 bytes @ 0x1
  2981                           
  2982  0071                     ??_LED_1_SetLow:	
  2983                           ; 1 bytes @ 0x1
  2984                           
  2985  0071                     ?___bmul:	
  2986                           ; 1 bytes @ 0x1
  2987                           
  2988  0071                     ?_abs:	
  2989                           ; 1 bytes @ 0x1
  2990                           
  2991  0071                     ?_strlen:	
  2992                           ; 2 bytes @ 0x1
  2993                           
  2994  0071                     Sensor_DefaultCallback@sensor:	
  2995                           ; 2 bytes @ 0x1
  2996                           
  2997  0071                     Sensor_setActive@sensor:	
  2998                           ; 1 bytes @ 0x1
  2999                           
  3000  0071                     Sensor_setInactive@sensor:	
  3001                           ; 1 bytes @ 0x1
  3002                           
  3003  0071                     Sensor_isActive@sensor:	
  3004                           ; 1 bytes @ 0x1
  3005                           
  3006  0071                     Sensor_isCalibrated@sensor:	
  3007                           ; 1 bytes @ 0x1
  3008                           
  3009  0071                     Sensor_setCalibrated@sensor:	
  3010                           ; 1 bytes @ 0x1
  3011                           
  3012  0071                     Sensor_setCalibratAcqTime@sensor:	
  3013                           ; 1 bytes @ 0x1
  3014                           
  3015  0071                     Sensor_isCalibratingAcqTime@sensor:	
  3016                           ; 1 bytes @ 0x1
  3017                           
  3018  0071                     Sensor_Sampled_Reset@sensor:	
  3019                           ; 1 bytes @ 0x1
  3020                           
  3021  0071                     Sensor_setSampled@sensor:	
  3022                           ; 1 bytes @ 0x1
  3023                           
  3024  0071                     TMR2_LoadPeriodRegister@periodVal:	
  3025                           ; 1 bytes @ 0x1
  3026                           
  3027  0071                     ___bmul@multiplicand:	
  3028                           ; 1 bytes @ 0x1
  3029                           
  3030  0071                     MTOUCH_Button_SetPressedCallback@callback:	
  3031                           ; 1 bytes @ 0x1
  3032                           
  3033  0071                     MTOUCH_Button_SetNotPressedCallback@callback:	
  3034                           ; 2 bytes @ 0x1
  3035                           
  3036  0071                     EUSART_SetFramingErrorHandler@interruptHandler:	
  3037                           ; 2 bytes @ 0x1
  3038                           
  3039  0071                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  3040                           ; 2 bytes @ 0x1
  3041                           
  3042  0071                     EUSART_SetErrorHandler@interruptHandler:	
  3043                           ; 2 bytes @ 0x1
  3044                           
  3045  0071                     EUSART_SetTxInterruptHandler@interruptHandler:	
  3046                           ; 2 bytes @ 0x1
  3047                           
  3048  0071                     EUSART_SetRxInterruptHandler@interruptHandler:	
  3049                           ; 2 bytes @ 0x1
  3050                           
  3051  0071                     abs@a:	
  3052                           ; 2 bytes @ 0x1
  3053                           
  3054  0071                     memcpy@s1:	
  3055                           ; 2 bytes @ 0x1
  3056                           
  3057                           
  3058                           ; 2 bytes @ 0x1
  3059  0071                     	ds	1
  3060  0072                     ??_MTOUCH_Sensor_Sampled_ResetAll:	
  3061  0072                     ??_Sensor_DefaultCallback:	
  3062                           ; 1 bytes @ 0x2
  3063                           
  3064  0072                     ?_Sensor_loadADCSettings:	
  3065                           ; 1 bytes @ 0x2
  3066                           
  3067  0072                     ??___bmul:	
  3068                           ; 1 bytes @ 0x2
  3069                           
  3070  0072                     Sensor_loadADCSettings@adc_index:	
  3071                           ; 1 bytes @ 0x2
  3072                           
  3073  0072                     Sensor_isEnabled@sensor:	
  3074                           ; 1 bytes @ 0x2
  3075                           
  3076  0072                     MTOUCH_Button_isPressed@name:	
  3077                           ; 1 bytes @ 0x2
  3078                           
  3079  0072                     EUSART_Read@readValue:	
  3080                           ; 1 bytes @ 0x2
  3081                           
  3082  0072                     EUSART_Write@txData:	
  3083                           ; 1 bytes @ 0x2
  3084                           
  3085                           
  3086                           ; 1 bytes @ 0x2
  3087  0072                     	ds	1
  3088  0073                     ??_abs:	
  3089  0073                     ??_EUSART_SetRxInterruptHandler:	
  3090                           ; 1 bytes @ 0x3
  3091                           
  3092  0073                     ??_EUSART_SetTxInterruptHandler:	
  3093                           ; 1 bytes @ 0x3
  3094                           
  3095  0073                     ??_EUSART_SetFramingErrorHandler:	
  3096                           ; 1 bytes @ 0x3
  3097                           
  3098  0073                     ??_EUSART_SetOverrunErrorHandler:	
  3099                           ; 1 bytes @ 0x3
  3100                           
  3101  0073                     ??_EUSART_SetErrorHandler:	
  3102                           ; 1 bytes @ 0x3
  3103                           
  3104  0073                     ??_strlen:	
  3105                           ; 1 bytes @ 0x3
  3106                           
  3107  0073                     ??_Sensor_loadADCSettings:	
  3108                           ; 1 bytes @ 0x3
  3109                           
  3110  0073                     ??_MTOUCH_Button_SetPressedCallback:	
  3111                           ; 1 bytes @ 0x3
  3112                           
  3113  0073                     ??_MTOUCH_Button_SetNotPressedCallback:	
  3114                           ; 1 bytes @ 0x3
  3115                           
  3116  0073                     ??_EUSART_Initialize:	
  3117                           ; 1 bytes @ 0x3
  3118                           
  3119  0073                     ??_putch:	
  3120                           ; 1 bytes @ 0x3
  3121                           
  3122  0073                     Sensor_getScanGroupIndex@sensor:	
  3123                           ; 1 bytes @ 0x3
  3124                           
  3125  0073                     MTOUCH_Sensor_Sampled_ResetAll@sensor:	
  3126                           ; 1 bytes @ 0x3
  3127                           
  3128  0073                     Button_Tick_helper@button:	
  3129                           ; 1 bytes @ 0x3
  3130                           
  3131  0073                     putch@txData:	
  3132                           ; 1 bytes @ 0x3
  3133                           
  3134  0073                     check_data@x:	
  3135                           ; 1 bytes @ 0x3
  3136                           
  3137  0073                     LED_PROCESS@x:	
  3138                           ; 1 bytes @ 0x3
  3139                           
  3140  0073                     RELAY_PROCESS@x:	
  3141                           ; 1 bytes @ 0x3
  3142                           
  3143  0073                     ___bmul@product:	
  3144                           ; 1 bytes @ 0x3
  3145                           
  3146  0073                     memcpy@n:	
  3147                           ; 1 bytes @ 0x3
  3148                           
  3149                           
  3150                           ; 2 bytes @ 0x3
  3151  0073                     	ds	1
  3152  0074                     ??_MTOUCH_Tick:	
  3153  0074                     ??_MTOUCH_Button_Tick:	
  3154                           ; 1 bytes @ 0x4
  3155                           
  3156  0074                     ?_Button_DefaultCallback:	
  3157                           ; 1 bytes @ 0x4
  3158                           
  3159  0074                     ?_myButtonPressedCallback:	
  3160                           ; 1 bytes @ 0x4
  3161                           
  3162  0074                     ?_myButtonReleasedCallback:	
  3163                           ; 1 bytes @ 0x4
  3164                           
  3165  0074                     ??_DATA_PROCESS:	
  3166                           ; 1 bytes @ 0x4
  3167                           
  3168  0074                     ?_fputc:	
  3169                           ; 1 bytes @ 0x4
  3170                           
  3171  0074                     Sensor_getScanGroupIndex@sensorGroup:	
  3172                           ; 2 bytes @ 0x4
  3173                           
  3174  0074                     Button_DefaultCallback@button:	
  3175                           ; 1 bytes @ 0x4
  3176                           
  3177  0074                     myButtonPressedCallback@button:	
  3178                           ; 1 bytes @ 0x4
  3179                           
  3180  0074                     myButtonReleasedCallback@button:	
  3181                           ; 1 bytes @ 0x4
  3182                           
  3183  0074                     ___bmul@multiplier:	
  3184                           ; 1 bytes @ 0x4
  3185                           
  3186  0074                     strlen@a:	
  3187                           ; 1 bytes @ 0x4
  3188                           
  3189  0074                     fputc@c:	
  3190                           ; 1 bytes @ 0x4
  3191                           
  3192                           
  3193                           ; 2 bytes @ 0x4
  3194  0074                     	ds	1
  3195  0075                     ??_MTOUCH_Sensor_Enable:	
  3196  0075                     ??_MTOUCH_Sensor_Calibrate:	
  3197                           ; 1 bytes @ 0x5
  3198                           
  3199  0075                     ??_Sensor_RawSample_Update:	
  3200                           ; 1 bytes @ 0x5
  3201                           
  3202  0075                     ??_Sensor_postAcquisitionProcess:	
  3203                           ; 1 bytes @ 0x5
  3204                           
  3205  0075                     ??_Sensor_autoCalibration:	
  3206                           ; 1 bytes @ 0x5
  3207                           
  3208  0075                     ??_Button_DefaultCallback:	
  3209                           ; 1 bytes @ 0x5
  3210                           
  3211  0075                     ??_memcpy:	
  3212                           ; 1 bytes @ 0x5
  3213                           
  3214  0075                     ??_myButtonPressedCallback:	
  3215                           ; 1 bytes @ 0x5
  3216                           
  3217  0075                     ??_myButtonReleasedCallback:	
  3218                           ; 1 bytes @ 0x5
  3219                           
  3220  0075                     ??_MTOUCH_Sensor_isCalibrated:	
  3221                           ; 1 bytes @ 0x5
  3222                           
  3223  0075                     ??_MTOUCH_Sensor_wasSampled:	
  3224                           ; 1 bytes @ 0x5
  3225                           
  3226  0075                     ?_MTOUCH_Sensor_RawSample_Get:	
  3227                           ; 1 bytes @ 0x5
  3228                           
  3229  0075                     strlen@s:	
  3230                           ; 2 bytes @ 0x5
  3231                           
  3232                           
  3233                           ; 1 bytes @ 0x5
  3234  0075                     	ds	1
  3235  0076                     Sensor_RawSample_Update@adcIndex:	
  3236  0076                     MTOUCH_Sensor_Enable@sensor:	
  3237                           ; 1 bytes @ 0x6
  3238                           
  3239  0076                     MTOUCH_Sensor_Calibrate@sensor:	
  3240                           ; 1 bytes @ 0x6
  3241                           
  3242  0076                     MTOUCH_Sensor_isCalibrated@sensor:	
  3243                           ; 1 bytes @ 0x6
  3244                           
  3245  0076                     MTOUCH_Sensor_wasSampled@sensor:	
  3246                           ; 1 bytes @ 0x6
  3247                           
  3248  0076                     DATA_PROCESS@x:	
  3249                           ; 1 bytes @ 0x6
  3250                           
  3251  0076                     memcpy@tmp:	
  3252                           ; 1 bytes @ 0x6
  3253                           
  3254  0076                     fputc@fp:	
  3255                           ; 1 bytes @ 0x6
  3256                           
  3257  0076                     Sensor_postAcquisitionProcess@deviation:	
  3258                           ; 1 bytes @ 0x6
  3259                           
  3260  0076                     _Sensor_loadADCSettings$558:	
  3261                           ; 2 bytes @ 0x6
  3262                           
  3263                           
  3264                           ; 2 bytes @ 0x6
  3265  0076                     	ds	1
  3266  0077                     ??_fputc:	
  3267  0077                     ??_MTOUCH_Sensor_Initialize:	
  3268                           ; 1 bytes @ 0x7
  3269                           
  3270  0077                     ??_MTOUCH_Sensor_RawSample_Get:	
  3271                           ; 1 bytes @ 0x7
  3272                           
  3273  0077                     ??_MTOUCH_Button_Initialize:	
  3274                           ; 1 bytes @ 0x7
  3275                           
  3276  0077                     Sensor_RawSample_Update@sensor:	
  3277                           ; 1 bytes @ 0x7
  3278                           
  3279  0077                     Button_Baseline_Update@button:	
  3280                           ; 1 bytes @ 0x7
  3281                           
  3282  0077                     memcpy@s:	
  3283                           ; 1 bytes @ 0x7
  3284                           
  3285                           
  3286                           ; 2 bytes @ 0x7
  3287  0077                     	ds	1
  3288  0078                     MTOUCH_Sensor_Initialize@sensor:	
  3289  0078                     Sensor_postAcquisitionProcess@adcIndex:	
  3290                           ; 1 bytes @ 0x8
  3291                           
  3292  0078                     Sensor_loadADCSettings@addressOffset:	
  3293                           ; 1 bytes @ 0x8
  3294                           
  3295  0078                     MTOUCH_Sensor_RawSample_Get@name:	
  3296                           ; 1 bytes @ 0x8
  3297                           
  3298                           
  3299                           ; 1 bytes @ 0x8
  3300  0078                     	ds	1
  3301  0079                     ??_MTOUCH_Sensor_InitializeAll:	
  3302  0079                     ??_Button_Reading_Update_Helper:	
  3303                           ; 1 bytes @ 0x9
  3304                           
  3305  0079                     Sensor_postAcquisitionProcess@sensor:	
  3306                           ; 1 bytes @ 0x9
  3307                           
  3308  0079                     Sensor_loadADCSettings@sensor:	
  3309                           ; 1 bytes @ 0x9
  3310                           
  3311  0079                     Sensor_autoCalibration@adcIndex:	
  3312                           ; 1 bytes @ 0x9
  3313                           
  3314  0079                     MTOUCH_Button_Initialize@name:	
  3315                           ; 1 bytes @ 0x9
  3316                           
  3317  0079                     Button_Baseline_Initialize@button:	
  3318                           ; 1 bytes @ 0x9
  3319                           
  3320  0079                     memcpy@d1:	
  3321                           ; 1 bytes @ 0x9
  3322                           
  3323                           
  3324                           ; 1 bytes @ 0x9
  3325  0079                     	ds	1
  3326  007A                     MTOUCH_Sensor_InitializeAll@sensor:	
  3327  007A                     Sensor_autoCalibration@sensor:	
  3328                           ; 1 bytes @ 0xA
  3329                           
  3330  007A                     MTOUCH_Button_Initialize@button:	
  3331                           ; 1 bytes @ 0xA
  3332                           
  3333  007A                     memcpy@d:	
  3334                           ; 1 bytes @ 0xA
  3335                           
  3336                           
  3337                           ; 1 bytes @ 0xA
  3338  007A                     	ds	1
  3339  007B                     ??_MTOUCH_Button_InitializeAll:	
  3340  007B                     ?_Sensor_Acq_ExecutePacket:	
  3341                           ; 1 bytes @ 0xB
  3342                           
  3343  007B                     Sensor_Acq_ExecutePacket@sensor_adc2:	
  3344                           ; 1 bytes @ 0xB
  3345                           
  3346  007B                     Button_Reading_Update_Helper@button:	
  3347                           ; 1 bytes @ 0xB
  3348                           
  3349                           
  3350                           ; 1 bytes @ 0xB
  3351  007B                     	ds	1
  3352  007C                     ??_Button_Reading_Update:	
  3353  007C                     ??_update_state:	
  3354                           ; 1 bytes @ 0xC
  3355                           
  3356  007C                     ??_MTOUCH_Initialize:	
  3357                           ; 1 bytes @ 0xC
  3358                           
  3359  007C                     ??_SYSTEM_Initialize:	
  3360                           ; 1 bytes @ 0xC
  3361                           
  3362                           
  3363                           	psect	cstackBANK0
  3364  0020                     __pcstackBANK0:	
  3365                           ; 1 bytes @ 0xC
  3366                           
  3367  0020                     ??_Sensor_Acq_ExecutePacket:	
  3368  0020                     ??_Button_Baseline_Initialize:	
  3369                           ; 1 bytes @ 0x0
  3370                           
  3371  0020                     ?_fputs:	
  3372                           ; 1 bytes @ 0x0
  3373                           
  3374  0020                     MTOUCH_Button_InitializeAll@button:	
  3375                           ; 2 bytes @ 0x0
  3376                           
  3377  0020                     Button_Deviation_Update@button:	
  3378                           ; 1 bytes @ 0x0
  3379                           
  3380  0020                     Button_Reading_Update@button:	
  3381                           ; 1 bytes @ 0x0
  3382                           
  3383  0020                     fputs@fp:	
  3384                           ; 1 bytes @ 0x0
  3385                           
  3386                           
  3387                           ; 1 bytes @ 0x0
  3388  0020                     	ds	1
  3389  0021                     ??_fputs:	
  3390  0021                     Sensor_Acq_ExecutePacket@ADCOMCON_temp:	
  3391                           ; 1 bytes @ 0x1
  3392                           
  3393  0021                     Button_Deviation_Update@deviation:	
  3394                           ; 1 bytes @ 0x1
  3395                           
  3396                           
  3397                           ; 4 bytes @ 0x1
  3398  0021                     	ds	1
  3399  0022                     Sensor_Acq_ExecutePacket@AD1CON2_temp:	
  3400                           
  3401                           ; 1 bytes @ 0x2
  3402  0022                     	ds	1
  3403  0023                     Sensor_Acq_ExecutePacket@AD2CON2_temp:	
  3404                           
  3405                           ; 1 bytes @ 0x3
  3406  0023                     	ds	1
  3407  0024                     ?_Button_State_Initializing:	
  3408  0024                     ?_Button_State_NotPressed:	
  3409                           ; 1 bytes @ 0x4
  3410                           
  3411  0024                     ?_Button_State_Pressed:	
  3412                           ; 1 bytes @ 0x4
  3413                           
  3414  0024                     Sensor_Acq_ExecutePacket@sensor1ForceEnabled:	
  3415                           ; 1 bytes @ 0x4
  3416                           
  3417  0024                     Button_State_Initializing@button:	
  3418                           ; 1 bytes @ 0x4
  3419                           
  3420  0024                     Button_State_NotPressed@button:	
  3421                           ; 1 bytes @ 0x4
  3422                           
  3423  0024                     Button_State_Pressed@button:	
  3424                           ; 1 bytes @ 0x4
  3425                           
  3426  0024                     fputs@c:	
  3427                           ; 1 bytes @ 0x4
  3428                           
  3429                           
  3430                           ; 1 bytes @ 0x4
  3431  0024                     	ds	1
  3432  0025                     ??_Button_State_Initializing:	
  3433  0025                     ??_Button_State_NotPressed:	
  3434                           ; 1 bytes @ 0x5
  3435                           
  3436  0025                     ??_Button_State_Pressed:	
  3437                           ; 1 bytes @ 0x5
  3438                           
  3439  0025                     Sensor_Acq_ExecutePacket@sensor2ForceEnabled:	
  3440                           ; 1 bytes @ 0x5
  3441                           
  3442  0025                     fputs@i:	
  3443                           ; 1 bytes @ 0x5
  3444                           
  3445                           
  3446                           ; 2 bytes @ 0x5
  3447  0025                     	ds	1
  3448  0026                     Sensor_Acq_ExecutePacket@ADxIF_flag:	
  3449                           
  3450                           ; 1 bytes @ 0x6
  3451  0026                     	ds	1
  3452  0027                     Sensor_Acq_ExecutePacket@activeSensor:	
  3453  0027                     fputs@s:	
  3454                           ; 1 bytes @ 0x7
  3455                           
  3456                           
  3457                           ; 1 bytes @ 0x7
  3458  0027                     	ds	1
  3459  0028                     ?_pad:	
  3460  0028                     pad@buf:	
  3461                           ; 2 bytes @ 0x8
  3462                           
  3463  0028                     Sensor_Acq_ExecutePacket@last_a:	
  3464                           ; 1 bytes @ 0x8
  3465                           
  3466                           
  3467                           ; 2 bytes @ 0x8
  3468  0028                     	ds	1
  3469  0029                     ??_Button_Service:	
  3470  0029                     pad@p:	
  3471                           ; 1 bytes @ 0x9
  3472                           
  3473                           
  3474                           ; 2 bytes @ 0x9
  3475  0029                     	ds	1
  3476  002A                     Sensor_Acq_ExecutePacket@last_b:	
  3477                           
  3478                           ; 2 bytes @ 0xA
  3479  002A                     	ds	1
  3480  002B                     ??_pad:	
  3481  002B                     Button_Service@name:	
  3482                           ; 1 bytes @ 0xB
  3483                           
  3484                           
  3485                           ; 1 bytes @ 0xB
  3486  002B                     	ds	1
  3487  002C                     Sensor_Acq_ExecutePacket@packet_counter:	
  3488  002C                     Button_Service@button:	
  3489                           ; 1 bytes @ 0xC
  3490                           
  3491  002C                     pad@i:	
  3492                           ; 1 bytes @ 0xC
  3493                           
  3494                           
  3495                           ; 2 bytes @ 0xC
  3496  002C                     	ds	1
  3497  002D                     ??_MTOUCH_Button_ServiceAll:	
  3498  002D                     Sensor_Acq_ExecutePacket@sensor_adc1:	
  3499                           ; 1 bytes @ 0xD
  3500                           
  3501                           
  3502                           ; 1 bytes @ 0xD
  3503  002D                     	ds	1
  3504  002E                     ?_Sensor_Scanfrequency_Evaluation:	
  3505  002E                     Sensor_Scanfrequency_Evaluation@sensor_adc2:	
  3506                           ; 1 bytes @ 0xE
  3507                           
  3508  002E                     MTOUCH_Button_ServiceAll@button:	
  3509                           ; 1 bytes @ 0xE
  3510                           
  3511  002E                     pad@w:	
  3512                           ; 1 bytes @ 0xE
  3513                           
  3514                           
  3515                           ; 2 bytes @ 0xE
  3516  002E                     	ds	1
  3517  002F                     ??_Sensor_Scanfrequency_Evaluation:	
  3518                           
  3519                           ; 1 bytes @ 0xF
  3520  002F                     	ds	1
  3521  0030                     pad@fp:	
  3522                           
  3523                           ; 1 bytes @ 0x10
  3524  0030                     	ds	1
  3525  0031                     ?_ctoa:	
  3526  0031                     ctoa@c:	
  3527                           ; 2 bytes @ 0x11
  3528                           
  3529  0031                     Sensor_Scanfrequency_Evaluation@packet_noise_Max:	
  3530                           ; 1 bytes @ 0x11
  3531                           
  3532                           
  3533                           ; 2 bytes @ 0x11
  3534  0031                     	ds	2
  3535  0033                     ??_ctoa:	
  3536  0033                     Sensor_Scanfrequency_Evaluation@sensor_adc1:	
  3537                           ; 1 bytes @ 0x13
  3538                           
  3539                           
  3540                           ; 1 bytes @ 0x13
  3541  0033                     	ds	1
  3542  0034                     Sensor_Scanfrequency_Evaluation@best_sample_period:	
  3543  0034                     ctoa@w:	
  3544                           ; 1 bytes @ 0x14
  3545                           
  3546                           
  3547                           ; 2 bytes @ 0x14
  3548  0034                     	ds	1
  3549  0035                     Sensor_Scanfrequency_Evaluation@retry:	
  3550                           
  3551                           ; 1 bytes @ 0x15
  3552  0035                     	ds	1
  3553  0036                     ctoa@fp:	
  3554  0036                     Sensor_Scanfrequency_Evaluation@best_packet_sample:	
  3555                           ; 1 bytes @ 0x16
  3556                           
  3557                           
  3558                           ; 4 bytes @ 0x16
  3559  0036                     	ds	1
  3560  0037                     ?_vfpfcnvrt:	
  3561  0037                     vfpfcnvrt@fmt:	
  3562                           ; 2 bytes @ 0x17
  3563                           
  3564                           
  3565                           ; 1 bytes @ 0x17
  3566  0037                     	ds	1
  3567  0038                     vfpfcnvrt@ap:	
  3568                           
  3569                           ; 1 bytes @ 0x18
  3570  0038                     	ds	1
  3571  0039                     ??_vfpfcnvrt:	
  3572                           
  3573                           ; 1 bytes @ 0x19
  3574  0039                     	ds	1
  3575  003A                     Sensor_Scanfrequency_Evaluation@i:	
  3576                           
  3577                           ; 1 bytes @ 0x1A
  3578  003A                     	ds	1
  3579  003B                     ?_Sensor_Acquisition:	
  3580  003B                     Sensor_Acquisition@sensor_adc2:	
  3581                           ; 1 bytes @ 0x1B
  3582                           
  3583                           
  3584                           ; 1 bytes @ 0x1B
  3585  003B                     	ds	1
  3586  003C                     ??_Sensor_Acquisition:	
  3587                           
  3588                           ; 1 bytes @ 0x1C
  3589  003C                     	ds	1
  3590  003D                     Sensor_Acquisition@retry:	
  3591                           
  3592                           ; 1 bytes @ 0x1D
  3593  003D                     	ds	1
  3594  003E                     Sensor_Acquisition@sensor_adc1:	
  3595  003E                     vfpfcnvrt@c:	
  3596                           ; 1 bytes @ 0x1E
  3597                           
  3598                           
  3599                           ; 1 bytes @ 0x1E
  3600  003E                     	ds	1
  3601  003F                     ??_Sensor_Service:	
  3602  003F                     vfpfcnvrt@fp:	
  3603                           ; 1 bytes @ 0x1F
  3604                           
  3605                           
  3606                           ; 1 bytes @ 0x1F
  3607  003F                     	ds	1
  3608  0040                     ?_vfprintf:	
  3609  0040                     vfprintf@fmt:	
  3610                           ; 2 bytes @ 0x20
  3611                           
  3612                           
  3613                           ; 2 bytes @ 0x20
  3614  0040                     	ds	2
  3615  0042                     Sensor_Service@scanGroup:	
  3616  0042                     vfprintf@ap:	
  3617                           ; 1 bytes @ 0x22
  3618                           
  3619                           
  3620                           ; 1 bytes @ 0x22
  3621  0042                     	ds	1
  3622  0043                     ??_vfprintf:	
  3623  0043                     Sensor_Service@error:	
  3624                           ; 1 bytes @ 0x23
  3625                           
  3626                           
  3627                           ; 1 bytes @ 0x23
  3628  0043                     	ds	1
  3629  0044                     Sensor_Service@sensor_adc1:	
  3630                           
  3631                           ; 1 bytes @ 0x24
  3632  0044                     	ds	1
  3633  0045                     Sensor_Service@sensor_adc2:	
  3634  0045                     vfprintf@fp:	
  3635                           ; 1 bytes @ 0x25
  3636                           
  3637                           
  3638                           ; 1 bytes @ 0x25
  3639  0045                     	ds	1
  3640  0046                     ??_MTOUCH_Sensor_SampleAll:	
  3641  0046                     vfprintf@cfmt:	
  3642                           ; 1 bytes @ 0x26
  3643                           
  3644                           
  3645                           ; 2 bytes @ 0x26
  3646  0046                     	ds	1
  3647  0047                     MTOUCH_Sensor_SampleAll@group:	
  3648                           
  3649                           ; 1 bytes @ 0x27
  3650  0047                     	ds	1
  3651  0048                     ??_MTOUCH_Service_Mainloop:	
  3652  0048                     ?_printf:	
  3653                           ; 1 bytes @ 0x28
  3654                           
  3655  0048                     printf@fmt:	
  3656                           ; 2 bytes @ 0x28
  3657                           
  3658                           
  3659                           ; 2 bytes @ 0x28
  3660  0048                     	ds	4
  3661  004C                     ??_printf:	
  3662                           
  3663                           ; 1 bytes @ 0x2C
  3664  004C                     	ds	3
  3665  004F                     printf@ap:	
  3666                           
  3667                           ; 1 bytes @ 0x2F
  3668  004F                     	ds	1
  3669  0050                     ??_check_message:	
  3670                           
  3671                           ; 1 bytes @ 0x30
  3672  0050                     	ds	2
  3673  0052                     check_message@x:	
  3674                           
  3675                           ; 1 bytes @ 0x32
  3676  0052                     	ds	1
  3677                           
  3678                           	psect	maintext
  3679  0059                     __pmaintext:	
  3680 ;;
  3681 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  3682 ;;
  3683 ;; *************** function _main *****************
  3684 ;; Defined at:
  3685 ;;		line 17 in file "main.c"
  3686 ;; Parameters:    Size  Location     Type
  3687 ;;		None
  3688 ;; Auto vars:     Size  Location     Type
  3689 ;;		None
  3690 ;; Return value:  Size  Location     Type
  3691 ;;                  1    wreg      void 
  3692 ;; Registers used:
  3693 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3694 ;; Tracked objects:
  3695 ;;		On entry : B1F/0
  3696 ;;		On exit  : 0/0
  3697 ;;		Unchanged: 0/0
  3698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3699 ;;      Params:         0       0       0       0       0       0       0       0
  3700 ;;      Locals:         0       0       0       0       0       0       0       0
  3701 ;;      Temps:          0       0       0       2       0       0       0       0
  3702 ;;      Totals:         0       0       0       2       0       0       0       0
  3703 ;;Total ram usage:        2 bytes
  3704 ;; Hardware stack levels required when called:   14
  3705 ;; This function calls:
  3706 ;;		_DATA_PROCESS
  3707 ;;		_EUSART_Read
  3708 ;;		_EUSART_is_rx_ready
  3709 ;;		_LED_PROCESS
  3710 ;;		_MTOUCH_Button_SetNotPressedCallback
  3711 ;;		_MTOUCH_Button_SetPressedCallback
  3712 ;;		_MTOUCH_Button_isPressed
  3713 ;;		_MTOUCH_Service_Mainloop
  3714 ;;		_RELAY_PROCESS
  3715 ;;		_SYSTEM_Initialize
  3716 ;;		_check_data
  3717 ;;		_check_message
  3718 ;;		_printf
  3719 ;;		_update_state
  3720 ;; This function is called by:
  3721 ;;		Startup code after reset
  3722 ;; This function uses a non-reentrant model
  3723 ;;
  3724                           
  3725                           
  3726                           ;psect for function _main
  3727  0059                     _main:	
  3728                           
  3729                           ;main.c: 20:     SYSTEM_Initialize();
  3730                           
  3731                           ;incstack = 0
  3732                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3733  0059  3188  2025  3180   	fcall	_SYSTEM_Initialize
  3734                           
  3735                           ;main.c: 21:     (INTCONbits.GIE = 1);
  3736  005C  178B               	bsf	11,7	;volatile
  3737                           
  3738                           ;main.c: 22:     (INTCONbits.PEIE = 1);
  3739  005D  170B               	bsf	11,6	;volatile
  3740                           
  3741                           ;main.c: 23:     MTOUCH_Button_SetPressedCallback(myButtonPressedCallback);
  3742  005E  305D               	movlw	low _myButtonPressedCallback
  3743  005F  00F1               	movwf	MTOUCH_Button_SetPressedCallback@callback
  3744  0060  3008               	movlw	high _myButtonPressedCallback
  3745  0061  00F2               	movwf	MTOUCH_Button_SetPressedCallback@callback+1
  3746  0062  3196  26E1  3180   	fcall	_MTOUCH_Button_SetPressedCallback
  3747                           
  3748                           ;main.c: 24:     MTOUCH_Button_SetNotPressedCallback(myButtonReleasedCallback);
  3749  0065  304C               	movlw	low _myButtonReleasedCallback
  3750  0066  00F1               	movwf	MTOUCH_Button_SetNotPressedCallback@callback
  3751  0067  3017               	movlw	high _myButtonReleasedCallback
  3752  0068  00F2               	movwf	MTOUCH_Button_SetNotPressedCallback@callback+1
  3753  0069  3196  26DB  3180   	fcall	_MTOUCH_Button_SetNotPressedCallback
  3754  006C  0022               	movlb	2	; select bank2
  3755  006D  110C               	bcf	12,2	;volatile
  3756                           
  3757                           ;main.c: 26:     config_status = 0;
  3758  006E  0020               	movlb	0	; select bank0
  3759  006F  01E1               	clrf	_config_status
  3760                           
  3761                           ;main.c: 27:     last_touch_status.full_status = 0x00;
  3762  0070  01D9               	clrf	_last_touch_status
  3763  0071  01DA               	clrf	_last_touch_status+1
  3764                           
  3765                           ;main.c: 28:     LED_PROCESS(last_touch_status.full_status);
  3766  0072  0859               	movf	_last_touch_status,w
  3767  0073  3189  210B  3180   	fcall	_LED_PROCESS
  3768                           
  3769                           ;main.c: 29:     RELAY_PROCESS(last_touch_status.full_status);
  3770  0076  0020               	movlb	0	; select bank0
  3771  0077  0859               	movf	_last_touch_status,w
  3772  0078  3189  2124  3180   	fcall	_RELAY_PROCESS
  3773                           
  3774                           ;main.c: 30:     timeout_count = 0;
  3775  007B  3000               	movlw	0
  3776  007C  0021               	movlb	1	; select bank1
  3777  007D  00BB               	movwf	(_timeout_count+3)^(0+128)
  3778  007E  3000               	movlw	0
  3779  007F  00BA               	movwf	(_timeout_count+2)^(0+128)
  3780  0080  3000               	movlw	0
  3781  0081  00B9               	movwf	(_timeout_count+1)^(0+128)
  3782  0082  3000               	movlw	0
  3783  0083  00B8               	movwf	_timeout_count^(0+128)
  3784  0084                     l6082:	
  3785                           
  3786                           ;main.c: 32:     {;main.c: 33:         if(update_state_flag == 1)
  3787  0084  0020               	movlb	0	; select bank0
  3788  0085  035D               	decf	_update_state_flag,w
  3789  0086  1D03               	btfss	3,2
  3790  0087  288C               	goto	l6088
  3791                           
  3792                           ;main.c: 34:         {;main.c: 35:             update_state_flag = 0;
  3793  0088  01DD               	clrf	_update_state_flag
  3794                           
  3795                           ;main.c: 36:             update_state();
  3796  0089  3189  21C8  3180   	fcall	_update_state
  3797  008C                     l6088:	
  3798                           
  3799                           ;main.c: 38:         if(EUSART_is_rx_ready())
  3800  008C  3196  26B1  3180   	fcall	_EUSART_is_rx_ready
  3801  008F  3A00               	xorlw	0
  3802  0090  1903               	skipnz
  3803  0091  2990               	goto	l6158
  3804                           
  3805                           ;main.c: 39:         {;main.c: 40:             rxData = EUSART_Read();
  3806  0092  318A  224C  3180   	fcall	_EUSART_Read
  3807  0095  0022               	movlb	2	; select bank2
  3808  0096  00C2               	movwf	??_main^(0+256)
  3809  0097  0842               	movf	??_main^(0+256),w
  3810  0098  0020               	movlb	0	; select bank0
  3811  0099  00E3               	movwf	_rxData
  3812                           
  3813                           ;main.c: 41:             if(check_data(rxData))
  3814  009A  0863               	movf	_rxData,w
  3815  009B  3189  21E6  3180   	fcall	_check_data
  3816  009E  3A00               	xorlw	0
  3817  009F  1903               	skipnz
  3818  00A0  2990               	goto	l6158
  3819                           
  3820                           ;main.c: 42:             {;main.c: 43:                 if(check_request == 0)
  3821  00A1  0020               	movlb	0	; select bank0
  3822  00A2  0860               	movf	_check_request,w
  3823  00A3  1D03               	btfss	3,2
  3824  00A4  28B0               	goto	l6100
  3825                           
  3826                           ;main.c: 44:                 {;main.c: 45:                     prcData = rxData;
  3827  00A5  0863               	movf	_rxData,w
  3828  00A6  0022               	movlb	2	; select bank2
  3829  00A7  00C2               	movwf	??_main^(0+256)
  3830  00A8  0842               	movf	??_main^(0+256),w
  3831  00A9  0020               	movlb	0	; select bank0
  3832  00AA  00E2               	movwf	_prcData
  3833                           
  3834                           ;main.c: 46:                     check_message(rxData);
  3835  00AB  0863               	movf	_rxData,w
  3836  00AC  318A  22BD  3180   	fcall	_check_message
  3837                           
  3838                           ;main.c: 47:                 }
  3839  00AF  2990               	goto	l6158
  3840  00B0                     l6100:	
  3841                           
  3842                           ;main.c: 49:                 {;main.c: 50:                     if(config_status == 1)
  3843  00B0  0361               	decf	_config_status,w
  3844  00B1  1D03               	btfss	3,2
  3845  00B2  2983               	goto	l6150
  3846                           
  3847                           ;main.c: 51:                     {;main.c: 52:                         if(rxData == 'T')
  3848  00B3  3054               	movlw	84
  3849  00B4  0663               	xorwf	_rxData,w
  3850  00B5  1D03               	btfss	3,2
  3851  00B6  291A               	goto	l6126
  3852                           
  3853                           ;main.c: 53:                         {;main.c: 54:                             LED_PROCE
      +                          SS(7);
  3854  00B7  3007               	movlw	7
  3855  00B8  3189  210B  3180   	fcall	_LED_PROCESS
  3856                           
  3857                           ;main.c: 55:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  3858  00BB  3015               	movlw	21
  3859  00BC  0022               	movlb	2	; select bank2
  3860  00BD  00C3               	movwf	(??_main^(0+256)+1)
  3861  00BE  304B               	movlw	75
  3862  00BF  00C2               	movwf	??_main^(0+256)
  3863  00C0  30BE               	movlw	190
  3864  00C1                     u5347:	
  3865  00C1  0B89               	decfsz	9,f
  3866  00C2  28C1               	goto	u5347
  3867  00C3  0BC2               	decfsz	??_main^(0+256),f
  3868  00C4  28C1               	goto	u5347
  3869  00C5  0BC3               	decfsz	(??_main^(0+256)+1),f
  3870  00C6  28C1               	goto	u5347
  3871  00C7  0000               	nop
  3872                           
  3873                           ;main.c: 56:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  3874  00C8  3015               	movlw	21
  3875  00C9  0022               	movlb	2	; select bank2
  3876  00CA  00C3               	movwf	(??_main^(0+256)+1)
  3877  00CB  304B               	movlw	75
  3878  00CC  00C2               	movwf	??_main^(0+256)
  3879  00CD  30BE               	movlw	190
  3880  00CE                     u5357:	
  3881  00CE  0B89               	decfsz	9,f
  3882  00CF  28CE               	goto	u5357
  3883  00D0  0BC2               	decfsz	??_main^(0+256),f
  3884  00D1  28CE               	goto	u5357
  3885  00D2  0BC3               	decfsz	(??_main^(0+256)+1),f
  3886  00D3  28CE               	goto	u5357
  3887  00D4  0000               	nop
  3888                           
  3889                           ;main.c: 57:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  3890  00D5  3015               	movlw	21
  3891  00D6  0022               	movlb	2	; select bank2
  3892  00D7  00C3               	movwf	(??_main^(0+256)+1)
  3893  00D8  304B               	movlw	75
  3894  00D9  00C2               	movwf	??_main^(0+256)
  3895  00DA  30BE               	movlw	190
  3896  00DB                     u5367:	
  3897  00DB  0B89               	decfsz	9,f
  3898  00DC  28DB               	goto	u5367
  3899  00DD  0BC2               	decfsz	??_main^(0+256),f
  3900  00DE  28DB               	goto	u5367
  3901  00DF  0BC3               	decfsz	(??_main^(0+256)+1),f
  3902  00E0  28DB               	goto	u5367
  3903  00E1  0000               	nop
  3904                           
  3905                           ;main.c: 58:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  3906  00E2  3015               	movlw	21
  3907  00E3  0022               	movlb	2	; select bank2
  3908  00E4  00C3               	movwf	(??_main^(0+256)+1)
  3909  00E5  304B               	movlw	75
  3910  00E6  00C2               	movwf	??_main^(0+256)
  3911  00E7  30BE               	movlw	190
  3912  00E8                     u5377:	
  3913  00E8  0B89               	decfsz	9,f
  3914  00E9  28E8               	goto	u5377
  3915  00EA  0BC2               	decfsz	??_main^(0+256),f
  3916  00EB  28E8               	goto	u5377
  3917  00EC  0BC3               	decfsz	(??_main^(0+256)+1),f
  3918  00ED  28E8               	goto	u5377
  3919  00EE  0000               	nop
  3920                           
  3921                           ;main.c: 59:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  3922  00EF  3015               	movlw	21
  3923  00F0  0022               	movlb	2	; select bank2
  3924  00F1  00C3               	movwf	(??_main^(0+256)+1)
  3925  00F2  304B               	movlw	75
  3926  00F3  00C2               	movwf	??_main^(0+256)
  3927  00F4  30BE               	movlw	190
  3928  00F5                     u5387:	
  3929  00F5  0B89               	decfsz	9,f
  3930  00F6  28F5               	goto	u5387
  3931  00F7  0BC2               	decfsz	??_main^(0+256),f
  3932  00F8  28F5               	goto	u5387
  3933  00F9  0BC3               	decfsz	(??_main^(0+256)+1),f
  3934  00FA  28F5               	goto	u5387
  3935  00FB  0000               	nop
  3936                           
  3937                           ;main.c: 60:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  3938  00FC  3015               	movlw	21
  3939  00FD  0022               	movlb	2	; select bank2
  3940  00FE  00C3               	movwf	(??_main^(0+256)+1)
  3941  00FF  304B               	movlw	75
  3942  0100  00C2               	movwf	??_main^(0+256)
  3943  0101  30BE               	movlw	190
  3944  0102                     u5397:	
  3945  0102  0B89               	decfsz	9,f
  3946  0103  2902               	goto	u5397
  3947  0104  0BC2               	decfsz	??_main^(0+256),f
  3948  0105  2902               	goto	u5397
  3949  0106  0BC3               	decfsz	(??_main^(0+256)+1),f
  3950  0107  2902               	goto	u5397
  3951  0108  0000               	nop
  3952                           
  3953                           ;main.c: 61:                             config_status = 0;
  3954  0109  0020               	movlb	0	; select bank0
  3955  010A  01E1               	clrf	_config_status
  3956                           
  3957                           ;main.c: 62:                             check_request = 0;
  3958  010B  01E0               	clrf	_check_request
  3959                           
  3960                           ;main.c: 63:                             timeout_count = 0;
  3961  010C  3000               	movlw	0
  3962  010D  0021               	movlb	1	; select bank1
  3963  010E  00BB               	movwf	(_timeout_count+3)^(0+128)
  3964  010F  3000               	movlw	0
  3965  0110  00BA               	movwf	(_timeout_count+2)^(0+128)
  3966  0111  3000               	movlw	0
  3967  0112  00B9               	movwf	(_timeout_count+1)^(0+128)
  3968  0113  3000               	movlw	0
  3969  0114  00B8               	movwf	_timeout_count^(0+128)
  3970                           
  3971                           ;main.c: 64:                             LED_PROCESS(last_touch_status.full_status);
  3972  0115  0020               	movlb	0	; select bank0
  3973  0116  0859               	movf	_last_touch_status,w
  3974  0117  3189  210B  3180   	fcall	_LED_PROCESS
  3975  011A                     l6126:	
  3976                           
  3977                           ;main.c: 66:                         if(rxData == 'F')
  3978  011A  3046               	movlw	70
  3979  011B  0020               	movlb	0	; select bank0
  3980  011C  0663               	xorwf	_rxData,w
  3981  011D  1D03               	btfss	3,2
  3982  011E  2990               	goto	l6158
  3983                           
  3984                           ;main.c: 67:                         {;main.c: 68:                             LED_PROCE
      +                          SS(0);
  3985  011F  3000               	movlw	0
  3986  0120  3189  210B  3180   	fcall	_LED_PROCESS
  3987                           
  3988                           ;main.c: 69:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  3989  0123  3015               	movlw	21
  3990  0124  0022               	movlb	2	; select bank2
  3991  0125  00C3               	movwf	(??_main^(0+256)+1)
  3992  0126  304B               	movlw	75
  3993  0127  00C2               	movwf	??_main^(0+256)
  3994  0128  30BE               	movlw	190
  3995  0129                     u5407:	
  3996  0129  0B89               	decfsz	9,f
  3997  012A  2929               	goto	u5407
  3998  012B  0BC2               	decfsz	??_main^(0+256),f
  3999  012C  2929               	goto	u5407
  4000  012D  0BC3               	decfsz	(??_main^(0+256)+1),f
  4001  012E  2929               	goto	u5407
  4002  012F  0000               	nop
  4003                           
  4004                           ;main.c: 70:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4005  0130  3015               	movlw	21
  4006  0131  0022               	movlb	2	; select bank2
  4007  0132  00C3               	movwf	(??_main^(0+256)+1)
  4008  0133  304B               	movlw	75
  4009  0134  00C2               	movwf	??_main^(0+256)
  4010  0135  30BE               	movlw	190
  4011  0136                     u5417:	
  4012  0136  0B89               	decfsz	9,f
  4013  0137  2936               	goto	u5417
  4014  0138  0BC2               	decfsz	??_main^(0+256),f
  4015  0139  2936               	goto	u5417
  4016  013A  0BC3               	decfsz	(??_main^(0+256)+1),f
  4017  013B  2936               	goto	u5417
  4018  013C  0000               	nop
  4019                           
  4020                           ;main.c: 71:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4021  013D  3015               	movlw	21
  4022  013E  0022               	movlb	2	; select bank2
  4023  013F  00C3               	movwf	(??_main^(0+256)+1)
  4024  0140  304B               	movlw	75
  4025  0141  00C2               	movwf	??_main^(0+256)
  4026  0142  30BE               	movlw	190
  4027  0143                     u5427:	
  4028  0143  0B89               	decfsz	9,f
  4029  0144  2943               	goto	u5427
  4030  0145  0BC2               	decfsz	??_main^(0+256),f
  4031  0146  2943               	goto	u5427
  4032  0147  0BC3               	decfsz	(??_main^(0+256)+1),f
  4033  0148  2943               	goto	u5427
  4034  0149  0000               	nop
  4035                           
  4036                           ;main.c: 72:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4037  014A  3015               	movlw	21
  4038  014B  0022               	movlb	2	; select bank2
  4039  014C  00C3               	movwf	(??_main^(0+256)+1)
  4040  014D  304B               	movlw	75
  4041  014E  00C2               	movwf	??_main^(0+256)
  4042  014F  30BE               	movlw	190
  4043  0150                     u5437:	
  4044  0150  0B89               	decfsz	9,f
  4045  0151  2950               	goto	u5437
  4046  0152  0BC2               	decfsz	??_main^(0+256),f
  4047  0153  2950               	goto	u5437
  4048  0154  0BC3               	decfsz	(??_main^(0+256)+1),f
  4049  0155  2950               	goto	u5437
  4050  0156  0000               	nop
  4051                           
  4052                           ;main.c: 73:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4053  0157  3015               	movlw	21
  4054  0158  0022               	movlb	2	; select bank2
  4055  0159  00C3               	movwf	(??_main^(0+256)+1)
  4056  015A  304B               	movlw	75
  4057  015B  00C2               	movwf	??_main^(0+256)
  4058  015C  30BE               	movlw	190
  4059  015D                     u5447:	
  4060  015D  0B89               	decfsz	9,f
  4061  015E  295D               	goto	u5447
  4062  015F  0BC2               	decfsz	??_main^(0+256),f
  4063  0160  295D               	goto	u5447
  4064  0161  0BC3               	decfsz	(??_main^(0+256)+1),f
  4065  0162  295D               	goto	u5447
  4066  0163  0000               	nop
  4067                           
  4068                           ;main.c: 74:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4069  0164  3015               	movlw	21
  4070  0165  0022               	movlb	2	; select bank2
  4071  0166  00C3               	movwf	(??_main^(0+256)+1)
  4072  0167  304B               	movlw	75
  4073  0168  00C2               	movwf	??_main^(0+256)
  4074  0169  30BE               	movlw	190
  4075  016A                     u5457:	
  4076  016A  0B89               	decfsz	9,f
  4077  016B  296A               	goto	u5457
  4078  016C  0BC2               	decfsz	??_main^(0+256),f
  4079  016D  296A               	goto	u5457
  4080  016E  0BC3               	decfsz	(??_main^(0+256)+1),f
  4081  016F  296A               	goto	u5457
  4082  0170  0000               	nop
  4083                           
  4084                           ;main.c: 75:                             config_status = 0;
  4085  0171  0020               	movlb	0	; select bank0
  4086  0172  01E1               	clrf	_config_status
  4087                           
  4088                           ;main.c: 76:                             check_request = 0;
  4089  0173  01E0               	clrf	_check_request
  4090                           
  4091                           ;main.c: 77:                             timeout_count = 0;
  4092  0174  3000               	movlw	0
  4093  0175  0021               	movlb	1	; select bank1
  4094  0176  00BB               	movwf	(_timeout_count+3)^(0+128)
  4095  0177  3000               	movlw	0
  4096  0178  00BA               	movwf	(_timeout_count+2)^(0+128)
  4097  0179  3000               	movlw	0
  4098  017A  00B9               	movwf	(_timeout_count+1)^(0+128)
  4099  017B  3000               	movlw	0
  4100  017C  00B8               	movwf	_timeout_count^(0+128)
  4101                           
  4102                           ;main.c: 78:                             LED_PROCESS(last_touch_status.full_status);
  4103  017D  0020               	movlb	0	; select bank0
  4104  017E  0859               	movf	_last_touch_status,w
  4105  017F  3189  210B  3180   	fcall	_LED_PROCESS
  4106  0182  2990               	goto	l6158
  4107  0183                     l6150:	
  4108                           
  4109                           ;main.c: 82:                     {;main.c: 83:                         if(rxData == 'T')
  4110  0183  3054               	movlw	84
  4111  0184  0663               	xorwf	_rxData,w
  4112  0185  1D03               	btfss	3,2
  4113  0186  298B               	goto	l6154
  4114                           
  4115                           ;main.c: 84:                         {;main.c: 85:                             DATA_PROC
      +                          ESS(prcData);
  4116  0187  0862               	movf	_prcData,w
  4117  0188  318C  248C  3180   	fcall	_DATA_PROCESS
  4118  018B                     l6154:	
  4119                           
  4120                           ;main.c: 87:                         if(rxData == 'F')
  4121  018B  3046               	movlw	70
  4122  018C  0020               	movlb	0	; select bank0
  4123  018D  0663               	xorwf	_rxData,w
  4124  018E  1903               	btfsc	3,2
  4125                           
  4126                           ;main.c: 88:                         {;main.c: 89:                             check_req
      +                          uest = 0;
  4127  018F  01E0               	clrf	_check_request
  4128  0190                     l6158:	
  4129                           ;main.c: 93:             }
  4130                           
  4131                           
  4132                           ;main.c: 95:         if(MTOUCH_Service_Mainloop())
  4133  0190  3189  2171  3180   	fcall	_MTOUCH_Service_Mainloop
  4134  0193  3A00               	xorlw	0
  4135  0194  1903               	skipnz
  4136  0195  2884               	goto	l6082
  4137                           
  4138                           ;main.c: 96:         {;main.c: 97:             if(config_status == 0)
  4139  0196  0020               	movlb	0	; select bank0
  4140  0197  0861               	movf	_config_status,w
  4141  0198  1D03               	btfss	3,2
  4142  0199  2A5C               	goto	l6212
  4143                           
  4144                           ;main.c: 98:             {;main.c: 99:                 if(check_request == 1)
  4145  019A  0360               	decf	_check_request,w
  4146  019B  1D03               	btfss	3,2
  4147  019C  29B7               	goto	l6172
  4148                           
  4149                           ;main.c: 100:                 {;main.c: 101:                     timeout_count++;
  4150  019D  3001               	movlw	1
  4151  019E  0021               	movlb	1	; select bank1
  4152  019F  07B8               	addwf	_timeout_count^(0+128),f
  4153  01A0  3000               	movlw	0
  4154  01A1  3DB9               	addwfc	(_timeout_count+1)^(0+128),f
  4155  01A2  3000               	movlw	0
  4156  01A3  3DBA               	addwfc	(_timeout_count+2)^(0+128),f
  4157  01A4  3000               	movlw	0
  4158  01A5  3DBB               	addwfc	(_timeout_count+3)^(0+128),f
  4159                           
  4160                           ;main.c: 102:                     if(timeout_count == 30)
  4161  01A6  301E               	movlw	30
  4162  01A7  0638               	xorwf	_timeout_count^(0+128),w
  4163  01A8  0439               	iorwf	(_timeout_count+1)^(0+128),w
  4164  01A9  043A               	iorwf	(_timeout_count+2)^(0+128),w
  4165  01AA  043B               	iorwf	(_timeout_count+3)^(0+128),w
  4166  01AB  1D03               	btfss	3,2
  4167  01AC  29B7               	goto	l6172
  4168                           
  4169                           ;main.c: 103:                     {;main.c: 104:                         timeout_count =
      +                           0;
  4170  01AD  3000               	movlw	0
  4171  01AE  00BB               	movwf	(_timeout_count+3)^(0+128)
  4172  01AF  3000               	movlw	0
  4173  01B0  00BA               	movwf	(_timeout_count+2)^(0+128)
  4174  01B1  3000               	movlw	0
  4175  01B2  00B9               	movwf	(_timeout_count+1)^(0+128)
  4176  01B3  3000               	movlw	0
  4177  01B4  00B8               	movwf	_timeout_count^(0+128)
  4178                           
  4179                           ;main.c: 105:                         check_request = 0;
  4180  01B5  0020               	movlb	0	; select bank0
  4181  01B6  01E0               	clrf	_check_request
  4182  01B7                     l6172:	
  4183                           
  4184                           ;main.c: 108:                 if(MTOUCH_Button_isPressed(Button1))
  4185  01B7  3000               	movlw	0
  4186  01B8  3189  213D  3180   	fcall	_MTOUCH_Button_isPressed
  4187  01BB  3A00               	xorlw	0
  4188  01BC  1903               	skipnz
  4189  01BD  2A58               	goto	l6210
  4190                           
  4191                           ;main.c: 109:                 {;main.c: 111:                     count_conf++;
  4192  01BE  3001               	movlw	1
  4193  01BF  0021               	movlb	1	; select bank1
  4194  01C0  07C2               	addwf	_count_conf^(0+128),f
  4195  01C1  3000               	movlw	0
  4196  01C2  3DC3               	addwfc	(_count_conf+1)^(0+128),f
  4197                           
  4198                           ;main.c: 112:                     if(count_conf == 800)
  4199  01C3  3020               	movlw	32
  4200  01C4  0642               	xorwf	_count_conf^(0+128),w
  4201  01C5  3003               	movlw	3
  4202  01C6  1903               	skipnz
  4203  01C7  0643               	xorwf	(_count_conf+1)^(0+128),w
  4204  01C8  1D03               	btfss	3,2
  4205  01C9  2884               	goto	l6082
  4206                           
  4207                           ;main.c: 113:                     {;main.c: 114:                         count_conf = 0;
  4208  01CA  01C2               	clrf	_count_conf^(0+128)
  4209  01CB  01C3               	clrf	(_count_conf+1)^(0+128)
  4210                           
  4211                           ;main.c: 115:                         printf("PICSMART");
  4212  01CC  3000               	movlw	low (STR_1| (0+32768))
  4213  01CD  0020               	movlb	0	; select bank0
  4214  01CE  00C8               	movwf	printf@fmt
  4215  01CF  3098               	movlw	high (STR_1| (0+32768))
  4216  01D0  00C9               	movwf	printf@fmt+1
  4217  01D1  3188  2014  3180   	fcall	_printf
  4218                           
  4219                           ;main.c: 116:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4220  01D4  3015               	movlw	21
  4221  01D5  0022               	movlb	2	; select bank2
  4222  01D6  00C3               	movwf	(??_main^(0+256)+1)
  4223  01D7  304B               	movlw	75
  4224  01D8  00C2               	movwf	??_main^(0+256)
  4225  01D9  30BE               	movlw	190
  4226  01DA                     u5467:	
  4227  01DA  0B89               	decfsz	9,f
  4228  01DB  29DA               	goto	u5467
  4229  01DC  0BC2               	decfsz	??_main^(0+256),f
  4230  01DD  29DA               	goto	u5467
  4231  01DE  0BC3               	decfsz	(??_main^(0+256)+1),f
  4232  01DF  29DA               	goto	u5467
  4233  01E0  0000               	nop
  4234                           
  4235                           ;main.c: 117:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4236  01E1  3015               	movlw	21
  4237  01E2  0022               	movlb	2	; select bank2
  4238  01E3  00C3               	movwf	(??_main^(0+256)+1)
  4239  01E4  304B               	movlw	75
  4240  01E5  00C2               	movwf	??_main^(0+256)
  4241  01E6  30BE               	movlw	190
  4242  01E7                     u5477:	
  4243  01E7  0B89               	decfsz	9,f
  4244  01E8  29E7               	goto	u5477
  4245  01E9  0BC2               	decfsz	??_main^(0+256),f
  4246  01EA  29E7               	goto	u5477
  4247  01EB  0BC3               	decfsz	(??_main^(0+256)+1),f
  4248  01EC  29E7               	goto	u5477
  4249  01ED  0000               	nop
  4250                           
  4251                           ;main.c: 118:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4252  01EE  3015               	movlw	21
  4253  01EF  0022               	movlb	2	; select bank2
  4254  01F0  00C3               	movwf	(??_main^(0+256)+1)
  4255  01F1  304B               	movlw	75
  4256  01F2  00C2               	movwf	??_main^(0+256)
  4257  01F3  30BE               	movlw	190
  4258  01F4                     u5487:	
  4259  01F4  0B89               	decfsz	9,f
  4260  01F5  29F4               	goto	u5487
  4261  01F6  0BC2               	decfsz	??_main^(0+256),f
  4262  01F7  29F4               	goto	u5487
  4263  01F8  0BC3               	decfsz	(??_main^(0+256)+1),f
  4264  01F9  29F4               	goto	u5487
  4265  01FA  0000               	nop
  4266                           
  4267                           ;main.c: 119:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4268  01FB  3015               	movlw	21
  4269  01FC  0022               	movlb	2	; select bank2
  4270  01FD  00C3               	movwf	(??_main^(0+256)+1)
  4271  01FE  304B               	movlw	75
  4272  01FF  00C2               	movwf	??_main^(0+256)
  4273  0200  30BE               	movlw	190
  4274  0201                     u5497:	
  4275  0201  0B89               	decfsz	9,f
  4276  0202  2A01               	goto	u5497
  4277  0203  0BC2               	decfsz	??_main^(0+256),f
  4278  0204  2A01               	goto	u5497
  4279  0205  0BC3               	decfsz	(??_main^(0+256)+1),f
  4280  0206  2A01               	goto	u5497
  4281  0207  0000               	nop
  4282                           
  4283                           ;main.c: 120:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4284  0208  3015               	movlw	21
  4285  0209  0022               	movlb	2	; select bank2
  4286  020A  00C3               	movwf	(??_main^(0+256)+1)
  4287  020B  304B               	movlw	75
  4288  020C  00C2               	movwf	??_main^(0+256)
  4289  020D  30BE               	movlw	190
  4290  020E                     u5507:	
  4291  020E  0B89               	decfsz	9,f
  4292  020F  2A0E               	goto	u5507
  4293  0210  0BC2               	decfsz	??_main^(0+256),f
  4294  0211  2A0E               	goto	u5507
  4295  0212  0BC3               	decfsz	(??_main^(0+256)+1),f
  4296  0213  2A0E               	goto	u5507
  4297  0214  0000               	nop
  4298                           
  4299                           ;main.c: 121:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4300  0215  3015               	movlw	21
  4301  0216  0022               	movlb	2	; select bank2
  4302  0217  00C3               	movwf	(??_main^(0+256)+1)
  4303  0218  304B               	movlw	75
  4304  0219  00C2               	movwf	??_main^(0+256)
  4305  021A  30BE               	movlw	190
  4306  021B                     u5517:	
  4307  021B  0B89               	decfsz	9,f
  4308  021C  2A1B               	goto	u5517
  4309  021D  0BC2               	decfsz	??_main^(0+256),f
  4310  021E  2A1B               	goto	u5517
  4311  021F  0BC3               	decfsz	(??_main^(0+256)+1),f
  4312  0220  2A1B               	goto	u5517
  4313  0221  0000               	nop
  4314                           
  4315                           ;main.c: 122:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4316  0222  3015               	movlw	21
  4317  0223  0022               	movlb	2	; select bank2
  4318  0224  00C3               	movwf	(??_main^(0+256)+1)
  4319  0225  304B               	movlw	75
  4320  0226  00C2               	movwf	??_main^(0+256)
  4321  0227  30BE               	movlw	190
  4322  0228                     u5527:	
  4323  0228  0B89               	decfsz	9,f
  4324  0229  2A28               	goto	u5527
  4325  022A  0BC2               	decfsz	??_main^(0+256),f
  4326  022B  2A28               	goto	u5527
  4327  022C  0BC3               	decfsz	(??_main^(0+256)+1),f
  4328  022D  2A28               	goto	u5527
  4329  022E  0000               	nop
  4330                           
  4331                           ;main.c: 123:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4332  022F  3015               	movlw	21
  4333  0230  0022               	movlb	2	; select bank2
  4334  0231  00C3               	movwf	(??_main^(0+256)+1)
  4335  0232  304B               	movlw	75
  4336  0233  00C2               	movwf	??_main^(0+256)
  4337  0234  30BE               	movlw	190
  4338  0235                     u5537:	
  4339  0235  0B89               	decfsz	9,f
  4340  0236  2A35               	goto	u5537
  4341  0237  0BC2               	decfsz	??_main^(0+256),f
  4342  0238  2A35               	goto	u5537
  4343  0239  0BC3               	decfsz	(??_main^(0+256)+1),f
  4344  023A  2A35               	goto	u5537
  4345  023B  0000               	nop
  4346                           
  4347                           ;main.c: 124:                         printf("RUN\r\n");
  4348  023C  3009               	movlw	low (STR_2| (0+32768))
  4349  023D  0020               	movlb	0	; select bank0
  4350  023E  00C8               	movwf	printf@fmt
  4351  023F  3098               	movlw	high (STR_2| (0+32768))
  4352  0240  00C9               	movwf	printf@fmt+1
  4353  0241  3188  2014  3180   	fcall	_printf
  4354                           
  4355                           ;main.c: 125:                         config_status = 1;
  4356  0244  0020               	movlb	0	; select bank0
  4357  0245  01E1               	clrf	_config_status
  4358  0246  0AE1               	incf	_config_status,f
  4359                           
  4360                           ;main.c: 126:                         check_request = 1;
  4361  0247  01E0               	clrf	_check_request
  4362  0248  0AE0               	incf	_check_request,f
  4363                           
  4364                           ;main.c: 127:                         timeout_count = 0;
  4365  0249  3000               	movlw	0
  4366  024A  0021               	movlb	1	; select bank1
  4367  024B  00BB               	movwf	(_timeout_count+3)^(0+128)
  4368  024C  3000               	movlw	0
  4369  024D  00BA               	movwf	(_timeout_count+2)^(0+128)
  4370  024E  3000               	movlw	0
  4371  024F  00B9               	movwf	(_timeout_count+1)^(0+128)
  4372  0250  3000               	movlw	0
  4373  0251  00B8               	movwf	_timeout_count^(0+128)
  4374                           
  4375                           ;main.c: 128:                         LED_PROCESS(0);
  4376  0252  3000               	movlw	0
  4377  0253  3189  210B  3180   	fcall	_LED_PROCESS
  4378                           
  4379                           ;main.c: 129:                         blink = 0;
  4380  0256  0020               	movlb	0	; select bank0
  4381  0257  2AB4               	goto	L1
  4382  0258                     l6210:	
  4383                           
  4384                           ;main.c: 133:                 {;main.c: 134:                     count_conf = 0;
  4385  0258  0021               	movlb	1	; select bank1
  4386  0259  01C2               	clrf	_count_conf^(0+128)
  4387  025A  01C3               	clrf	(_count_conf+1)^(0+128)
  4388                           
  4389                           ;main.c: 136:             }
  4390                           
  4391                           ;main.c: 135:                 }
  4392  025B  2884               	goto	l6082
  4393  025C                     l6212:	
  4394                           
  4395                           ;main.c: 138:             {;main.c: 139:                 if(check_request == 1)
  4396  025C  0360               	decf	_check_request,w
  4397  025D  1D03               	btfss	3,2
  4398  025E  2884               	goto	l6082
  4399                           
  4400                           ;main.c: 140:                 {;main.c: 141:                     timeout_count++;
  4401  025F  3001               	movlw	1
  4402  0260  0021               	movlb	1	; select bank1
  4403  0261  07B8               	addwf	_timeout_count^(0+128),f
  4404  0262  3000               	movlw	0
  4405  0263  3DB9               	addwfc	(_timeout_count+1)^(0+128),f
  4406  0264  3000               	movlw	0
  4407  0265  3DBA               	addwfc	(_timeout_count+2)^(0+128),f
  4408  0266  3000               	movlw	0
  4409  0267  3DBB               	addwfc	(_timeout_count+3)^(0+128),f
  4410                           
  4411                           ;main.c: 142:                     if(timeout_count >= 30000)
  4412  0268  083B               	movf	(_timeout_count+3)^(0+128),w
  4413  0269  1D03               	btfss	3,2
  4414  026A  2A74               	goto	l6218
  4415  026B  083A               	movf	(_timeout_count+2)^(0+128),w
  4416  026C  1D03               	btfss	3,2
  4417  026D  2A74               	goto	l6218
  4418  026E  3030               	movlw	48
  4419  026F  0238               	subwf	_timeout_count^(0+128),w
  4420  0270  3075               	movlw	117
  4421  0271  3B39               	subwfb	(_timeout_count+1)^(0+128),w
  4422  0272  1C03               	btfss	3,0
  4423  0273  2A94               	goto	l6230
  4424  0274                     l6218:	
  4425                           
  4426                           ;main.c: 143:                     {;main.c: 145:                         LED_PROCESS(0);
  4427  0274  3000               	movlw	0
  4428  0275  3189  210B  3180   	fcall	_LED_PROCESS
  4429                           
  4430                           ;main.c: 147:                         if(timeout_count >= 32000)
  4431  0278  0021               	movlb	1	; select bank1
  4432  0279  083B               	movf	(_timeout_count+3)^(0+128),w
  4433  027A  1D03               	btfss	3,2
  4434  027B  2A83               	goto	l6222
  4435  027C  083A               	movf	(_timeout_count+2)^(0+128),w
  4436  027D  1D03               	btfss	3,2
  4437  027E  2A83               	goto	l6222
  4438  027F  307D               	movlw	125
  4439  0280  0239               	subwf	(_timeout_count+1)^(0+128),w
  4440  0281  1C03               	btfss	3,0
  4441  0282  2884               	goto	l6082
  4442  0283                     l6222:	
  4443                           
  4444                           ;main.c: 148:                         {;main.c: 149:                             timeout
      +                          _count = 0;
  4445  0283  3000               	movlw	0
  4446  0284  00BB               	movwf	(_timeout_count+3)^(0+128)
  4447  0285  3000               	movlw	0
  4448  0286  00BA               	movwf	(_timeout_count+2)^(0+128)
  4449  0287  3000               	movlw	0
  4450  0288  00B9               	movwf	(_timeout_count+1)^(0+128)
  4451  0289  3000               	movlw	0
  4452  028A  00B8               	movwf	_timeout_count^(0+128)
  4453                           
  4454                           ;main.c: 150:                             LED_PROCESS(last_touch_status.full_status);
  4455  028B  0020               	movlb	0	; select bank0
  4456  028C  0859               	movf	_last_touch_status,w
  4457  028D  3189  210B  3180   	fcall	_LED_PROCESS
  4458                           
  4459                           ;main.c: 151:                             check_request = 0;
  4460  0290  0020               	movlb	0	; select bank0
  4461  0291  01E0               	clrf	_check_request
  4462                           
  4463                           ;main.c: 152:                             config_status = 0;
  4464  0292  01E1               	clrf	_config_status
  4465  0293  2884               	goto	l6082
  4466  0294                     l6230:	
  4467                           
  4468                           ;main.c: 156:                     {;main.c: 157:                         blink_count++;
  4469  0294  3001               	movlw	1
  4470  0295  0022               	movlb	2	; select bank2
  4471  0296  00C2               	movwf	??_main^(0+256)
  4472  0297  0842               	movf	??_main^(0+256),w
  4473  0298  0020               	movlb	0	; select bank0
  4474  0299  07DE               	addwf	_blink_count,f
  4475                           
  4476                           ;main.c: 158:                         if(blink == 0)
  4477  029A  085F               	movf	_blink,w
  4478  029B  1D03               	btfss	3,2
  4479  029C  2AAA               	goto	l6240
  4480                           
  4481                           ;main.c: 159:                         {;main.c: 160:                             LED_PRO
      +                          CESS(0);
  4482  029D  3000               	movlw	0
  4483  029E  3189  210B  3180   	fcall	_LED_PROCESS
  4484                           
  4485                           ;main.c: 161:                             if(blink_count == 200)
  4486  02A1  30C8               	movlw	200
  4487  02A2  0020               	movlb	0	; select bank0
  4488  02A3  065E               	xorwf	_blink_count,w
  4489  02A4  1D03               	btfss	3,2
  4490  02A5  2884               	goto	l6082
  4491                           
  4492                           ;main.c: 162:                             {;main.c: 163:                                
      +                           blink_count = 0;
  4493  02A6  01DE               	clrf	_blink_count
  4494                           
  4495                           ;main.c: 164:                                 blink = 1;
  4496  02A7  01DF               	clrf	_blink
  4497  02A8  0ADF               	incf	_blink,f
  4498  02A9  2884               	goto	l6082
  4499  02AA                     l6240:	
  4500                           
  4501                           ;main.c: 168:                         {;main.c: 169:                             LED_PRO
      +                          CESS(1);
  4502  02AA  3001               	movlw	1
  4503  02AB  3189  210B  3180   	fcall	_LED_PROCESS
  4504                           
  4505                           ;main.c: 170:                             if(blink_count == 200)
  4506  02AE  30C8               	movlw	200
  4507  02AF  0020               	movlb	0	; select bank0
  4508  02B0  065E               	xorwf	_blink_count,w
  4509  02B1  1D03               	btfss	3,2
  4510  02B2  2884               	goto	l6082
  4511                           
  4512                           ;main.c: 171:                             {;main.c: 172:                                
      +                           blink_count = 0;
  4513  02B3  01DE               	clrf	_blink_count
  4514  02B4                     L1:	
  4515                           
  4516                           ;main.c: 173:                                 blink = 0;
  4517  02B4  01DF               	clrf	_blink
  4518  02B5  2884               	goto	l6082
  4519  02B6                     __end_of_main:	
  4520                           
  4521                           	psect	text1
  4522  09C8                     __ptext1:	
  4523 ;; *************** function _update_state *****************
  4524 ;; Defined at:
  4525 ;;		line 203 in file "main.c"
  4526 ;; Parameters:    Size  Location     Type
  4527 ;;		None
  4528 ;; Auto vars:     Size  Location     Type
  4529 ;;		None
  4530 ;; Return value:  Size  Location     Type
  4531 ;;                  1    wreg      void 
  4532 ;; Registers used:
  4533 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4534 ;; Tracked objects:
  4535 ;;		On entry : 0/0
  4536 ;;		On exit  : 0/0
  4537 ;;		Unchanged: 0/0
  4538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4539 ;;      Params:         0       0       0       0       0       0       0       0
  4540 ;;      Locals:         0       0       0       0       0       0       0       0
  4541 ;;      Temps:          0       0       0       0       0       0       0       0
  4542 ;;      Totals:         0       0       0       0       0       0       0       0
  4543 ;;Total ram usage:        0 bytes
  4544 ;; Hardware stack levels used:    1
  4545 ;; Hardware stack levels required when called:   13
  4546 ;; This function calls:
  4547 ;;		_printf
  4548 ;; This function is called by:
  4549 ;;		_main
  4550 ;; This function uses a non-reentrant model
  4551 ;;
  4552                           
  4553                           
  4554                           ;psect for function _update_state
  4555  09C8                     _update_state:	
  4556                           
  4557                           ;main.c: 205:     switch(last_touch_status.full_status)
  4558                           
  4559                           ;incstack = 0
  4560                           ; Regs used in _update_state: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4561  09C8  29D7               	goto	l5962
  4562  09C9                     l5956:	
  4563  09C9  3014               	movlw	low (STR_3| (0+32768))
  4564  09CA  00C8               	movwf	printf@fmt
  4565  09CB  3098               	movlw	high (STR_3| (0+32768))
  4566  09CC  00C9               	movwf	printf@fmt+1
  4567  09CD  3188  2014         	fcall	_printf
  4568  09CF  0008               	return
  4569  09D0                     l5958:	
  4570  09D0  3019               	movlw	low (STR_4| (0+32768))
  4571  09D1  00C8               	movwf	printf@fmt
  4572  09D2  3098               	movlw	high (STR_4| (0+32768))
  4573  09D3  00C9               	movwf	printf@fmt+1
  4574  09D4  3188  2014         	fcall	_printf
  4575  09D6  0008               	return
  4576  09D7                     l5962:	
  4577                           
  4578                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4579                           ; Switch size 1, requested type "simple"
  4580                           ; Number of cases is 1, Range of values is 0 to 0
  4581                           ; switch strategies available:
  4582                           ; Name         Instructions Cycles
  4583                           ; simple_byte            4     3 (average)
  4584                           ; direct_byte            8     6 (fixed)
  4585                           ; jumptable            260     6 (fixed)
  4586                           ;	Chosen strategy is simple_byte
  4587  09D7  0020               	movlb	0	; select bank0
  4588  09D8  085A               	movf	_last_touch_status+1,w
  4589  09D9  3A00               	xorlw	0	; case 0
  4590  09DA  1903               	skipnz
  4591  09DB  29DD               	goto	l6426
  4592  09DC  29E5               	goto	l1020
  4593  09DD                     l6426:	
  4594                           
  4595                           ; Switch size 1, requested type "simple"
  4596                           ; Number of cases is 2, Range of values is 0 to 1
  4597                           ; switch strategies available:
  4598                           ; Name         Instructions Cycles
  4599                           ; simple_byte            7     4 (average)
  4600                           ; direct_byte           10     6 (fixed)
  4601                           ; jumptable            260     6 (fixed)
  4602                           ;	Chosen strategy is simple_byte
  4603  09DD  0859               	movf	_last_touch_status,w
  4604  09DE  3A00               	xorlw	0	; case 0
  4605  09DF  1903               	skipnz
  4606  09E0  29C9               	goto	l5956
  4607  09E1  3A01               	xorlw	1	; case 1
  4608  09E2  1903               	skipnz
  4609  09E3  29D0               	goto	l5958
  4610  09E4  29E5               	goto	l1020
  4611  09E5                     l1020:	
  4612  09E5  0008               	return
  4613  09E6                     __end_of_update_state:	
  4614                           
  4615                           	psect	text2
  4616  0ABD                     __ptext2:	
  4617 ;; *************** function _check_message *****************
  4618 ;; Defined at:
  4619 ;;		line 245 in file "main.c"
  4620 ;; Parameters:    Size  Location     Type
  4621 ;;  x               1    wreg     unsigned char 
  4622 ;; Auto vars:     Size  Location     Type
  4623 ;;  x               1   50[BANK0 ] unsigned char 
  4624 ;; Return value:  Size  Location     Type
  4625 ;;                  1    wreg      void 
  4626 ;; Registers used:
  4627 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4628 ;; Tracked objects:
  4629 ;;		On entry : 0/0
  4630 ;;		On exit  : 0/0
  4631 ;;		Unchanged: 0/0
  4632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4633 ;;      Params:         0       0       0       0       0       0       0       0
  4634 ;;      Locals:         0       1       0       0       0       0       0       0
  4635 ;;      Temps:          0       2       0       0       0       0       0       0
  4636 ;;      Totals:         0       3       0       0       0       0       0       0
  4637 ;;Total ram usage:        3 bytes
  4638 ;; Hardware stack levels used:    1
  4639 ;; Hardware stack levels required when called:   13
  4640 ;; This function calls:
  4641 ;;		_printf
  4642 ;; This function is called by:
  4643 ;;		_main
  4644 ;; This function uses a non-reentrant model
  4645 ;;
  4646                           
  4647                           
  4648                           ;psect for function _check_message
  4649  0ABD                     _check_message:	
  4650                           
  4651                           ;incstack = 0
  4652                           ; Regs used in _check_message: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4653                           ;check_message@x stored from wreg
  4654  0ABD  0020               	movlb	0	; select bank0
  4655  0ABE  00D2               	movwf	check_message@x
  4656                           
  4657                           ;main.c: 245: void check_message(uint8_t x);main.c: 246: {;main.c: 247:     switch (x)
  4658  0ABF  2AD3               	goto	l5980
  4659  0AC0                     l5970:	
  4660                           
  4661                           ;main.c: 250:         {;main.c: 251:             check_request = 0;
  4662  0AC0  01E0               	clrf	_check_request
  4663                           
  4664                           ;main.c: 252:             break;
  4665  0AC1  0008               	return
  4666  0AC2                     l5974:	
  4667                           
  4668                           ;main.c: 260:         {;main.c: 261:             printf("%c",x);
  4669  0AC2  301E               	movlw	low (STR_5| (0+32768))
  4670  0AC3  00C8               	movwf	printf@fmt
  4671  0AC4  3098               	movlw	high (STR_5| (0+32768))
  4672  0AC5  00C9               	movwf	printf@fmt+1
  4673  0AC6  0852               	movf	check_message@x,w
  4674  0AC7  00D0               	movwf	??_check_message
  4675  0AC8  01D1               	clrf	??_check_message+1
  4676  0AC9  0850               	movf	??_check_message,w
  4677  0ACA  00CA               	movwf	?_printf+2
  4678  0ACB  0851               	movf	??_check_message+1,w
  4679  0ACC  00CB               	movwf	?_printf+3
  4680  0ACD  3188  2014         	fcall	_printf
  4681                           
  4682                           ;main.c: 262:             check_request = 1;
  4683  0ACF  0020               	movlb	0	; select bank0
  4684  0AD0  01E0               	clrf	_check_request
  4685  0AD1  0AE0               	incf	_check_request,f
  4686                           
  4687                           ;main.c: 263:             break;
  4688  0AD2  0008               	return
  4689  0AD3                     l5980:	
  4690  0AD3  0852               	movf	check_message@x,w
  4691  0AD4  00D0               	movwf	??_check_message
  4692  0AD5  01D1               	clrf	??_check_message+1
  4693                           
  4694                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4695                           ; Switch size 1, requested type "simple"
  4696                           ; Number of cases is 1, Range of values is 0 to 0
  4697                           ; switch strategies available:
  4698                           ; Name         Instructions Cycles
  4699                           ; simple_byte            4     3 (average)
  4700                           ; direct_byte            8     6 (fixed)
  4701                           ; jumptable            260     6 (fixed)
  4702                           ;	Chosen strategy is simple_byte
  4703  0AD6  0851               	movf	??_check_message+1,w
  4704  0AD7  3A00               	xorlw	0	; case 0
  4705  0AD8  1903               	skipnz
  4706  0AD9  2ADB               	goto	l6428
  4707  0ADA  2AC2               	goto	l5974
  4708  0ADB                     l6428:	
  4709                           
  4710                           ; Switch size 1, requested type "simple"
  4711                           ; Number of cases is 2, Range of values is 70 to 84
  4712                           ; switch strategies available:
  4713                           ; Name         Instructions Cycles
  4714                           ; simple_byte            7     4 (average)
  4715                           ; direct_byte           39     9 (fixed)
  4716                           ; jumptable            263     9 (fixed)
  4717                           ;	Chosen strategy is simple_byte
  4718  0ADB  0850               	movf	??_check_message,w
  4719  0ADC  3A46               	xorlw	70	; case 70
  4720  0ADD  1903               	skipnz
  4721  0ADE  2AC0               	goto	l5970
  4722  0ADF  3A12               	xorlw	18	; case 84
  4723  0AE0  1903               	skipnz
  4724  0AE1  2AC0               	goto	l5970
  4725  0AE2  2AC2               	goto	l5974
  4726  0AE3  0008               	return
  4727  0AE4                     __end_of_check_message:	
  4728                           
  4729                           	psect	text3
  4730  0814                     __ptext3:	
  4731 ;; *************** function _printf *****************
  4732 ;; Defined at:
  4733 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\printf.c"
  4734 ;; Parameters:    Size  Location     Type
  4735 ;;  fmt             2   40[BANK0 ] PTR const unsigned char 
  4736 ;;		 -> STR_5(3), STR_4(5), STR_3(5), STR_2(6), 
  4737 ;;		 -> STR_1(9), 
  4738 ;; Auto vars:     Size  Location     Type
  4739 ;;  ret             2    0        int 
  4740 ;;  ap              1   47[BANK0 ] PTR void [1]
  4741 ;;		 -> ?_printf(2), 
  4742 ;; Return value:  Size  Location     Type
  4743 ;;                  2   40[BANK0 ] int 
  4744 ;; Registers used:
  4745 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4746 ;; Tracked objects:
  4747 ;;		On entry : 0/0
  4748 ;;		On exit  : 0/0
  4749 ;;		Unchanged: 0/0
  4750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4751 ;;      Params:         0       4       0       0       0       0       0       0
  4752 ;;      Locals:         0       3       0       0       0       0       0       0
  4753 ;;      Temps:          0       1       0       0       0       0       0       0
  4754 ;;      Totals:         0       8       0       0       0       0       0       0
  4755 ;;Total ram usage:        8 bytes
  4756 ;; Hardware stack levels used:    1
  4757 ;; Hardware stack levels required when called:   12
  4758 ;; This function calls:
  4759 ;;		_vfprintf
  4760 ;; This function is called by:
  4761 ;;		_main
  4762 ;;		_update_state
  4763 ;;		_check_message
  4764 ;; This function uses a non-reentrant model
  4765 ;;
  4766                           
  4767                           
  4768                           ;psect for function _printf
  4769  0814                     _printf:	
  4770                           
  4771                           ;incstack = 0
  4772                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4773  0814  304A               	movlw	(low ((?_printf| 0+2)))& (0+255)
  4774  0815  0020               	movlb	0	; select bank0
  4775  0816  00CC               	movwf	??_printf
  4776  0817  084C               	movf	??_printf,w
  4777  0818  00CF               	movwf	printf@ap
  4778  0819  0849               	movf	printf@fmt+1,w
  4779  081A  00C1               	movwf	vfprintf@fmt+1
  4780  081B  0848               	movf	printf@fmt,w
  4781  081C  00C0               	movwf	vfprintf@fmt
  4782  081D  304F               	movlw	(low (printf@ap| 0))& (0+255)
  4783  081E  00CC               	movwf	??_printf
  4784  081F  084C               	movf	??_printf,w
  4785  0820  00C2               	movwf	vfprintf@ap
  4786  0821  3000               	movlw	0
  4787  0822  318B  238E         	fcall	_vfprintf
  4788  0824  0008               	return
  4789  0825                     __end_of_printf:	
  4790                           
  4791                           	psect	text4
  4792  0B8E                     __ptext4:	
  4793 ;; *************** function _vfprintf *****************
  4794 ;; Defined at:
  4795 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  4796 ;; Parameters:    Size  Location     Type
  4797 ;;  fp              1    wreg     PTR struct _IO_FILE
  4798 ;;		 -> NULL(0), 
  4799 ;;  fmt             2   32[BANK0 ] PTR const unsigned char 
  4800 ;;		 -> STR_5(3), STR_4(5), STR_3(5), STR_2(6), 
  4801 ;;		 -> STR_1(9), 
  4802 ;;  ap              1   34[BANK0 ] PTR PTR void 
  4803 ;;		 -> printf@ap(1), 
  4804 ;; Auto vars:     Size  Location     Type
  4805 ;;  fp              1   37[BANK0 ] PTR struct _IO_FILE
  4806 ;;		 -> NULL(0), 
  4807 ;;  cfmt            2   38[BANK0 ] PTR unsigned char 
  4808 ;;		 -> STR_5(3), STR_4(5), STR_3(5), STR_2(6), 
  4809 ;;		 -> STR_1(9), 
  4810 ;; Return value:  Size  Location     Type
  4811 ;;                  2   32[BANK0 ] int 
  4812 ;; Registers used:
  4813 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4814 ;; Tracked objects:
  4815 ;;		On entry : 0/0
  4816 ;;		On exit  : 0/0
  4817 ;;		Unchanged: 0/0
  4818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4819 ;;      Params:         0       3       0       0       0       0       0       0
  4820 ;;      Locals:         0       3       0       0       0       0       0       0
  4821 ;;      Temps:          0       2       0       0       0       0       0       0
  4822 ;;      Totals:         0       8       0       0       0       0       0       0
  4823 ;;Total ram usage:        8 bytes
  4824 ;; Hardware stack levels used:    1
  4825 ;; Hardware stack levels required when called:   11
  4826 ;; This function calls:
  4827 ;;		_vfpfcnvrt
  4828 ;; This function is called by:
  4829 ;;		_printf
  4830 ;; This function uses a non-reentrant model
  4831 ;;
  4832                           
  4833                           
  4834                           ;psect for function _vfprintf
  4835  0B8E                     _vfprintf:	
  4836                           
  4837                           ;incstack = 0
  4838                           ; Regs used in _vfprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4839                           ;vfprintf@fp stored from wreg
  4840  0B8E  0020               	movlb	0	; select bank0
  4841  0B8F  00C5               	movwf	vfprintf@fp
  4842                           
  4843                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
  4844  0B90  0841               	movf	vfprintf@fmt+1,w
  4845  0B91  00C7               	movwf	vfprintf@cfmt+1
  4846  0B92  0840               	movf	vfprintf@fmt,w
  4847  0B93  00C6               	movwf	vfprintf@cfmt
  4848                           
  4849                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
  4850  0B94  0021               	movlb	1	; select bank1
  4851  0B95  01BC               	clrf	_nout^(0+128)
  4852  0B96  01BD               	clrf	(_nout+1)^(0+128)
  4853  0B97                     l5856:	
  4854                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  4855                           
  4856                           
  4857                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  4858  0B97  0020               	movlb	0	; select bank0
  4859  0B98  0846               	movf	vfprintf@cfmt,w
  4860  0B99  0084               	movwf	4
  4861  0B9A  0847               	movf	vfprintf@cfmt+1,w
  4862  0B9B  0085               	movwf	5
  4863  0B9C  0012               	moviw fsr0++
  4864  0B9D  1903               	btfsc	3,2
  4865  0B9E  2BB4               	goto	l5858
  4866                           
  4867                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
  4868  0B9F  3046               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  4869  0BA0  00C3               	movwf	??_vfprintf
  4870  0BA1  0843               	movf	??_vfprintf,w
  4871  0BA2  00B7               	movwf	vfpfcnvrt@fmt
  4872  0BA3  0842               	movf	vfprintf@ap,w
  4873  0BA4  00C4               	movwf	??_vfprintf+1
  4874  0BA5  0844               	movf	??_vfprintf+1,w
  4875  0BA6  00B8               	movwf	vfpfcnvrt@ap
  4876  0BA7  0845               	movf	vfprintf@fp,w
  4877  0BA8  3185  251F  318B   	fcall	_vfpfcnvrt
  4878  0BAB  0020               	movlb	0	; select bank0
  4879  0BAC  0837               	movf	?_vfpfcnvrt,w
  4880  0BAD  0021               	movlb	1	; select bank1
  4881  0BAE  07BC               	addwf	_nout^(0+128),f
  4882  0BAF  0020               	movlb	0	; select bank0
  4883  0BB0  0838               	movf	?_vfpfcnvrt+1,w
  4884  0BB1  0021               	movlb	1	; select bank1
  4885  0BB2  3DBD               	addwfc	(_nout+1)^(0+128),f
  4886  0BB3  2B97               	goto	l5856
  4887  0BB4                     l5858:	
  4888                           
  4889                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
  4890  0BB4  0021               	movlb	1	; select bank1
  4891  0BB5  083D               	movf	(_nout+1)^(0+128),w
  4892  0BB6  0020               	movlb	0	; select bank0
  4893  0BB7  00C1               	movwf	?_vfprintf+1
  4894  0BB8  0021               	movlb	1	; select bank1
  4895  0BB9  083C               	movf	_nout^(0+128),w
  4896  0BBA  0020               	movlb	0	; select bank0
  4897  0BBB  00C0               	movwf	?_vfprintf
  4898  0BBC  0008               	return
  4899  0BBD                     __end_of_vfprintf:	
  4900                           
  4901                           	psect	text5
  4902  051F                     __ptext5:	
  4903 ;; *************** function _vfpfcnvrt *****************
  4904 ;; Defined at:
  4905 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  4906 ;; Parameters:    Size  Location     Type
  4907 ;;  fp              1    wreg     PTR struct _IO_FILE
  4908 ;;		 -> NULL(0), 
  4909 ;;  fmt             1   23[BANK0 ] PTR PTR unsigned char 
  4910 ;;		 -> vfprintf@cfmt(2), 
  4911 ;;  ap              1   24[BANK0 ] PTR PTR void 
  4912 ;;		 -> printf@ap(1), 
  4913 ;; Auto vars:     Size  Location     Type
  4914 ;;  fp              1   31[BANK0 ] PTR struct _IO_FILE
  4915 ;;		 -> NULL(0), 
  4916 ;;  llu             8    0        unsigned long long 
  4917 ;;  ll              8    0        long long 
  4918 ;;  f               4    0        long long 
  4919 ;;  ct              3    0        unsigned char [3]
  4920 ;;  vp              2    0        PTR void 
  4921 ;;  i               2    0        int 
  4922 ;;  done            2    0        int 
  4923 ;;  cp              2    0        PTR unsigned char 
  4924 ;;  c               1   30[BANK0 ] unsigned char 
  4925 ;; Return value:  Size  Location     Type
  4926 ;;                  2   23[BANK0 ] int 
  4927 ;; Registers used:
  4928 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4929 ;; Tracked objects:
  4930 ;;		On entry : 0/0
  4931 ;;		On exit  : 0/0
  4932 ;;		Unchanged: 0/0
  4933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4934 ;;      Params:         0       2       0       0       0       0       0       0
  4935 ;;      Locals:         0       2       0       0       0       0       0       0
  4936 ;;      Temps:          0       5       0       0       0       0       0       0
  4937 ;;      Totals:         0       9       0       0       0       0       0       0
  4938 ;;Total ram usage:        9 bytes
  4939 ;; Hardware stack levels used:    1
  4940 ;; Hardware stack levels required when called:   10
  4941 ;; This function calls:
  4942 ;;		_ctoa
  4943 ;;		_fputc
  4944 ;; This function is called by:
  4945 ;;		_vfprintf
  4946 ;; This function uses a non-reentrant model
  4947 ;;
  4948                           
  4949                           
  4950                           ;psect for function _vfpfcnvrt
  4951  051F                     _vfpfcnvrt:	
  4952                           
  4953                           ;incstack = 0
  4954                           ; Regs used in _vfpfcnvrt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4955                           ;vfpfcnvrt@fp stored from wreg
  4956  051F  0020               	movlb	0	; select bank0
  4957  0520  00BF               	movwf	vfpfcnvrt@fp
  4958                           
  4959                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
  4960  0521  0837               	movf	vfpfcnvrt@fmt,w
  4961  0522  0086               	movwf	6
  4962  0523  0187               	clrf	7
  4963  0524  3F40               	moviw [0]fsr1
  4964  0525  00B9               	movwf	??_vfpfcnvrt
  4965  0526  3F41               	moviw [1]fsr1
  4966  0527  00BA               	movwf	??_vfpfcnvrt+1
  4967  0528  0839               	movf	??_vfpfcnvrt,w
  4968  0529  0084               	movwf	4
  4969  052A  083A               	movf	??_vfpfcnvrt+1,w
  4970  052B  0085               	movwf	5
  4971  052C  0012               	moviw fsr0++
  4972  052D  3A25               	xorlw	37
  4973  052E  1D03               	btfss	3,2
  4974  052F  2DA4               	goto	l5762
  4975                           
  4976                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
  4977  0530  0837               	movf	vfpfcnvrt@fmt,w
  4978  0531  0086               	movwf	6
  4979  0532  0187               	clrf	7
  4980  0533  3001               	movlw	1
  4981  0534  0781               	addwf	1,f
  4982  0535  3141               	addfsr 1,1
  4983  0536  1803               	skipnc
  4984  0537  0A81               	incf	1,f
  4985                           
  4986                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
  4987  0538  01D7               	clrf	_width
  4988  0539  01D8               	clrf	_width+1
  4989  053A  0021               	movlb	1	; select bank1
  4990  053B  01C0               	clrf	_flags^(0+128)
  4991  053C  01C1               	clrf	(_flags+1)^(0+128)
  4992                           
  4993                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
  4994  053D  30FF               	movlw	255
  4995  053E  00BE               	movwf	_prec^(0+128)
  4996  053F  30FF               	movlw	255
  4997  0540  00BF               	movwf	(_prec^(0+128)+1)
  4998                           
  4999                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 792:       
      +                            if (*fmt[0] == 'c') {
  5000  0541  0020               	movlb	0	; select bank0
  5001  0542  0837               	movf	vfpfcnvrt@fmt,w
  5002  0543  0086               	movwf	6
  5003  0544  0187               	clrf	7
  5004  0545  3F40               	moviw [0]fsr1
  5005  0546  00B9               	movwf	??_vfpfcnvrt
  5006  0547  3F41               	moviw [1]fsr1
  5007  0548  00BA               	movwf	??_vfpfcnvrt+1
  5008  0549  0839               	movf	??_vfpfcnvrt,w
  5009  054A  0084               	movwf	4
  5010  054B  083A               	movf	??_vfpfcnvrt+1,w
  5011  054C  0085               	movwf	5
  5012  054D  0012               	moviw fsr0++
  5013  054E  3A63               	xorlw	99
  5014  054F  1D03               	btfss	3,2
  5015  0550  2D72               	goto	l5746
  5016                           
  5017                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 793:       
      +                                ++*fmt;
  5018  0551  0837               	movf	vfpfcnvrt@fmt,w
  5019  0552  0086               	movwf	6
  5020  0553  0187               	clrf	7
  5021  0554  3001               	movlw	1
  5022  0555  0781               	addwf	1,f
  5023  0556  3141               	addfsr 1,1
  5024  0557  1803               	skipnc
  5025  0558  0A81               	incf	1,f
  5026                           
  5027                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 794:       
      +                                c = (unsigned char)(*(int *)__va_arg(*(int **)ap, (int)0));
  5028  0559  0838               	movf	vfpfcnvrt@ap,w
  5029  055A  0086               	movwf	6
  5030  055B  0187               	clrf	7
  5031  055C  0801               	movf	1,w
  5032  055D  0084               	movwf	4
  5033  055E  0185               	clrf	5
  5034  055F  3002               	movlw	2
  5035  0560  0781               	addwf	1,f
  5036  0561  0800               	movf	0,w
  5037  0562  00B9               	movwf	??_vfpfcnvrt
  5038  0563  0839               	movf	??_vfpfcnvrt,w
  5039  0564  00BE               	movwf	vfpfcnvrt@c
  5040                           
  5041                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 795:       
      +                                return ctoa(fp, c);
  5042  0565  083E               	movf	vfpfcnvrt@c,w
  5043  0566  00B9               	movwf	??_vfpfcnvrt
  5044  0567  0839               	movf	??_vfpfcnvrt,w
  5045  0568  00B1               	movwf	ctoa@c
  5046  0569  083F               	movf	vfpfcnvrt@fp,w
  5047  056A  318A  22E4         	fcall	_ctoa
  5048  056C  0020               	movlb	0	; select bank0
  5049  056D  0832               	movf	?_ctoa+1,w
  5050  056E  00B8               	movwf	?_vfpfcnvrt+1
  5051  056F  0831               	movf	?_ctoa,w
  5052  0570  00B7               	movwf	?_vfpfcnvrt
  5053  0571  0008               	return
  5054  0572                     l5746:	
  5055                           
  5056                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  5057  0572  0837               	movf	vfpfcnvrt@fmt,w
  5058  0573  0086               	movwf	6
  5059  0574  0187               	clrf	7
  5060  0575  3F40               	moviw [0]fsr1
  5061  0576  00B9               	movwf	??_vfpfcnvrt
  5062  0577  3F41               	moviw [1]fsr1
  5063  0578  00BA               	movwf	??_vfpfcnvrt+1
  5064  0579  0839               	movf	??_vfpfcnvrt,w
  5065  057A  0084               	movwf	4
  5066  057B  083A               	movf	??_vfpfcnvrt+1,w
  5067  057C  0085               	movwf	5
  5068  057D  0012               	moviw fsr0++
  5069  057E  3A25               	xorlw	37
  5070  057F  1D03               	btfss	3,2
  5071  0580  2D99               	goto	l5756
  5072                           
  5073                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  5074  0581  0837               	movf	vfpfcnvrt@fmt,w
  5075  0582  0086               	movwf	6
  5076  0583  0187               	clrf	7
  5077  0584  3001               	movlw	1
  5078  0585  0781               	addwf	1,f
  5079  0586  3141               	addfsr 1,1
  5080  0587  1803               	skipnc
  5081  0588  0A81               	incf	1,f
  5082                           
  5083                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  5084  0589  3025               	movlw	37
  5085  058A  00F4               	movwf	fputc@c
  5086  058B  3000               	movlw	0
  5087  058C  00F5               	movwf	fputc@c+1
  5088  058D  083F               	movf	vfpfcnvrt@fp,w
  5089  058E  00B9               	movwf	??_vfpfcnvrt
  5090  058F  0839               	movf	??_vfpfcnvrt,w
  5091  0590  00F6               	movwf	fputc@fp
  5092  0591  318C  2420         	fcall	_fputc
  5093  0593                     l5752:	
  5094                           
  5095                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  5096  0593  3001               	movlw	1
  5097  0594  0020               	movlb	0	; select bank0
  5098  0595  00B7               	movwf	?_vfpfcnvrt
  5099  0596  3000               	movlw	0
  5100  0597  00B8               	movwf	?_vfpfcnvrt+1
  5101  0598  0008               	return
  5102  0599                     l5756:	
  5103                           
  5104                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  5105  0599  0837               	movf	vfpfcnvrt@fmt,w
  5106  059A  0086               	movwf	6
  5107  059B  0187               	clrf	7
  5108  059C  3001               	movlw	1
  5109  059D  0781               	addwf	1,f
  5110  059E  3141               	addfsr 1,1
  5111  059F  1803               	skipnc
  5112  05A0  0A81               	incf	1,f
  5113                           
  5114                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  5115  05A1  01B7               	clrf	?_vfpfcnvrt
  5116  05A2  01B8               	clrf	?_vfpfcnvrt+1
  5117  05A3  0008               	return
  5118  05A4                     l5762:	
  5119                           
  5120                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  5121  05A4  0837               	movf	vfpfcnvrt@fmt,w
  5122  05A5  0086               	movwf	6
  5123  05A6  0187               	clrf	7
  5124  05A7  3F40               	moviw [0]fsr1
  5125  05A8  00B9               	movwf	??_vfpfcnvrt
  5126  05A9  3F41               	moviw [1]fsr1
  5127  05AA  00BA               	movwf	??_vfpfcnvrt+1
  5128  05AB  0839               	movf	??_vfpfcnvrt,w
  5129  05AC  0084               	movwf	4
  5130  05AD  083A               	movf	??_vfpfcnvrt+1,w
  5131  05AE  0085               	movwf	5
  5132  05AF  0800               	movf	0,w	;code access
  5133  05B0  00BB               	movwf	??_vfpfcnvrt+2
  5134  05B1  01BC               	clrf	??_vfpfcnvrt+3
  5135  05B2  083B               	movf	??_vfpfcnvrt+2,w
  5136  05B3  00F4               	movwf	fputc@c
  5137  05B4  083C               	movf	??_vfpfcnvrt+3,w
  5138  05B5  00F5               	movwf	fputc@c+1
  5139  05B6  083F               	movf	vfpfcnvrt@fp,w
  5140  05B7  00BD               	movwf	??_vfpfcnvrt+4
  5141  05B8  083D               	movf	??_vfpfcnvrt+4,w
  5142  05B9  00F6               	movwf	fputc@fp
  5143  05BA  318C  2420  3185   	fcall	_fputc
  5144                           
  5145                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  5146  05BD  0020               	movlb	0	; select bank0
  5147  05BE  0837               	movf	vfpfcnvrt@fmt,w
  5148  05BF  0086               	movwf	6
  5149  05C0  0187               	clrf	7
  5150  05C1  3001               	movlw	1
  5151  05C2  0781               	addwf	1,f
  5152  05C3  3141               	addfsr 1,1
  5153  05C4  1803               	skipnc
  5154  05C5  0A81               	incf	1,f
  5155  05C6  2D93               	goto	l5752
  5156  05C7                     __end_of_vfpfcnvrt:	
  5157                           
  5158                           	psect	text6
  5159  0AE4                     __ptext6:	
  5160 ;; *************** function _ctoa *****************
  5161 ;; Defined at:
  5162 ;;		line 259 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  5163 ;; Parameters:    Size  Location     Type
  5164 ;;  fp              1    wreg     PTR struct _IO_FILE
  5165 ;;		 -> NULL(0), 
  5166 ;;  c               1   17[BANK0 ] unsigned char 
  5167 ;; Auto vars:     Size  Location     Type
  5168 ;;  fp              1   22[BANK0 ] PTR struct _IO_FILE
  5169 ;;		 -> NULL(0), 
  5170 ;;  w               2   20[BANK0 ] int 
  5171 ;;  l               2    0        int 
  5172 ;; Return value:  Size  Location     Type
  5173 ;;                  2   17[BANK0 ] int 
  5174 ;; Registers used:
  5175 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5176 ;; Tracked objects:
  5177 ;;		On entry : 0/0
  5178 ;;		On exit  : 0/0
  5179 ;;		Unchanged: 0/0
  5180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5181 ;;      Params:         0       2       0       0       0       0       0       0
  5182 ;;      Locals:         0       3       0       0       0       0       0       0
  5183 ;;      Temps:          0       1       0       0       0       0       0       0
  5184 ;;      Totals:         0       6       0       0       0       0       0       0
  5185 ;;Total ram usage:        6 bytes
  5186 ;; Hardware stack levels used:    1
  5187 ;; Hardware stack levels required when called:    9
  5188 ;; This function calls:
  5189 ;;		_pad
  5190 ;; This function is called by:
  5191 ;;		_vfpfcnvrt
  5192 ;; This function uses a non-reentrant model
  5193 ;;
  5194                           
  5195                           
  5196                           ;psect for function _ctoa
  5197  0AE4                     _ctoa:	
  5198                           
  5199                           ;incstack = 0
  5200                           ; Regs used in _ctoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5201                           ;ctoa@fp stored from wreg
  5202  0AE4  0020               	movlb	0	; select bank0
  5203  0AE5  00B6               	movwf	ctoa@fp
  5204                           
  5205                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 259: static
      +                           int ctoa(FILE *fp, char c);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 260: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common
      +                          \doprnt.c: 261:     int l, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 264:     w = width ? width - 1 : width;
  5206  0AE6  0857               	movf	_width,w
  5207  0AE7  0458               	iorwf	_width+1,w
  5208  0AE8  1D03               	btfss	3,2
  5209  0AE9  2AEF               	goto	l5592
  5210  0AEA  0858               	movf	_width+1,w
  5211  0AEB  00B5               	movwf	ctoa@w+1
  5212  0AEC  0857               	movf	_width,w
  5213  0AED  00B4               	movwf	ctoa@w
  5214  0AEE  2AF5               	goto	l5594
  5215  0AEF                     l5592:	
  5216  0AEF  0857               	movf	_width,w
  5217  0AF0  3EFF               	addlw	255
  5218  0AF1  00B4               	movwf	ctoa@w
  5219  0AF2  30FF               	movlw	255
  5220  0AF3  3D58               	addwfc	_width+1,w
  5221  0AF4  00B5               	movwf	ctoa@w+1
  5222  0AF5                     l5594:	
  5223                           
  5224                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 267:     db
      +                          uf[0] = c;
  5225  0AF5  0831               	movf	ctoa@c,w
  5226  0AF6  00B3               	movwf	??_ctoa
  5227  0AF7  0833               	movf	??_ctoa,w
  5228  0AF8  0022               	movlb	2	; select bank2
  5229  0AF9  00A0               	movwf	_dbuf^(0+256)
  5230                           
  5231                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 268:     db
      +                          uf[1] = '\0';
  5232  0AFA  01A1               	clrf	(_dbuf^(0+256)+1)
  5233                           
  5234                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 269:     re
      +                          turn pad(fp, &dbuf[0], w);
  5235  0AFB  3020               	movlw	(low (_dbuf| (0+256)))& (0+255)
  5236  0AFC  0020               	movlb	0	; select bank0
  5237  0AFD  00B3               	movwf	??_ctoa
  5238  0AFE  0833               	movf	??_ctoa,w
  5239  0AFF  00A8               	movwf	pad@buf
  5240  0B00  0835               	movf	ctoa@w+1,w
  5241  0B01  00AA               	movwf	pad@p+1
  5242  0B02  0834               	movf	ctoa@w,w
  5243  0B03  00A9               	movwf	pad@p
  5244  0B04  0836               	movf	ctoa@fp,w
  5245  0B05  318D  25A4         	fcall	_pad
  5246  0B07  0020               	movlb	0	; select bank0
  5247  0B08  0829               	movf	?_pad+1,w
  5248  0B09  00B2               	movwf	?_ctoa+1
  5249  0B0A  0828               	movf	?_pad,w
  5250  0B0B  00B1               	movwf	?_ctoa
  5251  0B0C  0008               	return
  5252  0B0D                     __end_of_ctoa:	
  5253                           
  5254                           	psect	text7
  5255  0DA4                     __ptext7:	
  5256 ;; *************** function _pad *****************
  5257 ;; Defined at:
  5258 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  5259 ;; Parameters:    Size  Location     Type
  5260 ;;  fp              1    wreg     PTR struct _IO_FILE
  5261 ;;		 -> NULL(0), 
  5262 ;;  buf             1    8[BANK0 ] PTR unsigned char 
  5263 ;;		 -> dbuf(32), 
  5264 ;;  p               2    9[BANK0 ] int 
  5265 ;; Auto vars:     Size  Location     Type
  5266 ;;  fp              1   16[BANK0 ] PTR struct _IO_FILE
  5267 ;;		 -> NULL(0), 
  5268 ;;  w               2   14[BANK0 ] int 
  5269 ;;  i               2   12[BANK0 ] int 
  5270 ;; Return value:  Size  Location     Type
  5271 ;;                  2    8[BANK0 ] int 
  5272 ;; Registers used:
  5273 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5274 ;; Tracked objects:
  5275 ;;		On entry : 0/0
  5276 ;;		On exit  : 0/0
  5277 ;;		Unchanged: 0/0
  5278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5279 ;;      Params:         0       3       0       0       0       0       0       0
  5280 ;;      Locals:         0       5       0       0       0       0       0       0
  5281 ;;      Temps:          0       1       0       0       0       0       0       0
  5282 ;;      Totals:         0       9       0       0       0       0       0       0
  5283 ;;Total ram usage:        9 bytes
  5284 ;; Hardware stack levels used:    1
  5285 ;; Hardware stack levels required when called:    8
  5286 ;; This function calls:
  5287 ;;		_fputc
  5288 ;;		_fputs
  5289 ;;		_strlen
  5290 ;; This function is called by:
  5291 ;;		_ctoa
  5292 ;; This function uses a non-reentrant model
  5293 ;;
  5294                           
  5295                           
  5296                           ;psect for function _pad
  5297  0DA4                     _pad:	
  5298                           
  5299                           ;incstack = 0
  5300                           ; Regs used in _pad: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5301                           ;pad@fp stored from wreg
  5302  0DA4  0020               	movlb	0	; select bank0
  5303  0DA5  00B0               	movwf	pad@fp
  5304                           
  5305                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  5306  0DA6  0021               	movlb	1	; select bank1
  5307  0DA7  1C40               	btfss	_flags^(0+128),0
  5308  0DA8  2DB2               	goto	l5500
  5309                           
  5310                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  5311  0DA9  0020               	movlb	0	; select bank0
  5312  0DAA  0830               	movf	pad@fp,w
  5313  0DAB  00AB               	movwf	??_pad
  5314  0DAC  082B               	movf	??_pad,w
  5315  0DAD  00A0               	movwf	fputs@fp
  5316  0DAE  0828               	movf	pad@buf,w
  5317  0DAF  318A  2297  318D   	fcall	_fputs
  5318  0DB2                     l5500:	
  5319                           
  5320                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  5321  0DB2  0020               	movlb	0	; select bank0
  5322  0DB3  1BAA               	btfsc	pad@p+1,7
  5323  0DB4  2DBA               	goto	l5504
  5324  0DB5  082A               	movf	pad@p+1,w
  5325  0DB6  00AF               	movwf	pad@w+1
  5326  0DB7  0829               	movf	pad@p,w
  5327  0DB8  00AE               	movwf	pad@w
  5328  0DB9  2DBC               	goto	l1194
  5329  0DBA                     l5504:	
  5330  0DBA  01AE               	clrf	pad@w
  5331  0DBB  01AF               	clrf	pad@w+1
  5332  0DBC                     l1194:	
  5333                           
  5334                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  5335  0DBC  01AC               	clrf	pad@i
  5336  0DBD  01AD               	clrf	pad@i+1
  5337  0DBE                     l5510:	
  5338                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  5339                           
  5340                           
  5341                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  5342  0DBE  082D               	movf	pad@i+1,w
  5343  0DBF  3A80               	xorlw	128
  5344  0DC0  00AB               	movwf	??_pad
  5345  0DC1  082F               	movf	pad@w+1,w
  5346  0DC2  3A80               	xorlw	128
  5347  0DC3  022B               	subwf	??_pad,w
  5348  0DC4  1D03               	skipz
  5349  0DC5  2DC8               	goto	u4465
  5350  0DC6  082E               	movf	pad@w,w
  5351  0DC7  022C               	subwf	pad@i,w
  5352  0DC8                     u4465:	
  5353  0DC8  1803               	btfsc	3,0
  5354  0DC9  2DDC               	goto	l1197
  5355                           
  5356                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  5357  0DCA  3020               	movlw	32
  5358  0DCB  00F4               	movwf	fputc@c
  5359  0DCC  3000               	movlw	0
  5360  0DCD  00F5               	movwf	fputc@c+1
  5361  0DCE  0020               	movlb	0	; select bank0
  5362  0DCF  0830               	movf	pad@fp,w
  5363  0DD0  00AB               	movwf	??_pad
  5364  0DD1  082B               	movf	??_pad,w
  5365  0DD2  00F6               	movwf	fputc@fp
  5366  0DD3  318C  2420  318D   	fcall	_fputc
  5367                           
  5368                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  5369  0DD6  3001               	movlw	1
  5370  0DD7  0020               	movlb	0	; select bank0
  5371  0DD8  07AC               	addwf	pad@i,f
  5372  0DD9  3000               	movlw	0
  5373  0DDA  3DAD               	addwfc	pad@i+1,f
  5374  0DDB  2DBE               	goto	l5510
  5375  0DDC                     l1197:	
  5376                           
  5377                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  5378  0DDC  0021               	movlb	1	; select bank1
  5379  0DDD  1840               	btfsc	_flags^(0+128),0
  5380  0DDE  2DE8               	goto	l1198
  5381                           
  5382                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  5383  0DDF  0020               	movlb	0	; select bank0
  5384  0DE0  0830               	movf	pad@fp,w
  5385  0DE1  00AB               	movwf	??_pad
  5386  0DE2  082B               	movf	??_pad,w
  5387  0DE3  00A0               	movwf	fputs@fp
  5388  0DE4  0828               	movf	pad@buf,w
  5389  0DE5  318A  2297  318D   	fcall	_fputs
  5390  0DE8                     l1198:	
  5391                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 92:     }
  5392                           
  5393                           
  5394                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  5395  0DE8  0020               	movlb	0	; select bank0
  5396  0DE9  0828               	movf	pad@buf,w
  5397  0DEA  3188  20F3         	fcall	_strlen
  5398  0DEC  0020               	movlb	0	; select bank0
  5399  0DED  082E               	movf	pad@w,w
  5400  0DEE  0771               	addwf	?_strlen,w
  5401  0DEF  00A8               	movwf	?_pad
  5402  0DF0  082F               	movf	pad@w+1,w
  5403  0DF1  3D72               	addwfc	?_strlen+1,w
  5404  0DF2  00A9               	movwf	?_pad+1
  5405  0DF3  0008               	return
  5406  0DF4                     __end_of_pad:	
  5407                           
  5408                           	psect	text8
  5409  08F3                     __ptext8:	
  5410 ;; *************** function _strlen *****************
  5411 ;; Defined at:
  5412 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  5413 ;; Parameters:    Size  Location     Type
  5414 ;;  s               1    wreg     PTR const unsigned char 
  5415 ;;		 -> dbuf(32), 
  5416 ;; Auto vars:     Size  Location     Type
  5417 ;;  s               1    5[COMMON] PTR const unsigned char 
  5418 ;;		 -> dbuf(32), 
  5419 ;;  a               1    4[COMMON] PTR const unsigned char 
  5420 ;;		 -> dbuf(32), 
  5421 ;; Return value:  Size  Location     Type
  5422 ;;                  2    1[COMMON] unsigned int 
  5423 ;; Registers used:
  5424 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5425 ;; Tracked objects:
  5426 ;;		On entry : 0/0
  5427 ;;		On exit  : 0/0
  5428 ;;		Unchanged: 0/0
  5429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5430 ;;      Params:         2       0       0       0       0       0       0       0
  5431 ;;      Locals:         2       0       0       0       0       0       0       0
  5432 ;;      Temps:          1       0       0       0       0       0       0       0
  5433 ;;      Totals:         5       0       0       0       0       0       0       0
  5434 ;;Total ram usage:        5 bytes
  5435 ;; Hardware stack levels used:    1
  5436 ;; Hardware stack levels required when called:    4
  5437 ;; This function calls:
  5438 ;;		Nothing
  5439 ;; This function is called by:
  5440 ;;		_pad
  5441 ;; This function uses a non-reentrant model
  5442 ;;
  5443                           
  5444                           
  5445                           ;psect for function _strlen
  5446  08F3                     _strlen:	
  5447                           
  5448                           ;incstack = 0
  5449                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  5450                           ;strlen@s stored from wreg
  5451  08F3  00F5               	movwf	strlen@s
  5452  08F4  0875               	movf	strlen@s,w
  5453  08F5  00F3               	movwf	??_strlen
  5454  08F6  0873               	movf	??_strlen,w
  5455  08F7  00F4               	movwf	strlen@a
  5456  08F8                     l3688:	
  5457  08F8  0875               	movf	strlen@s,w
  5458  08F9  0086               	movwf	6
  5459  08FA  3001               	movlw	1	; select bank2/3
  5460  08FB  0087               	movwf	7
  5461  08FC  0801               	movf	1,w
  5462  08FD  1903               	btfsc	3,2
  5463  08FE  2904               	goto	l3690
  5464  08FF  3001               	movlw	1
  5465  0900  00F3               	movwf	??_strlen
  5466  0901  0873               	movf	??_strlen,w
  5467  0902  07F5               	addwf	strlen@s,f
  5468  0903  28F8               	goto	l3688
  5469  0904                     l3690:	
  5470  0904  0874               	movf	strlen@a,w
  5471  0905  0275               	subwf	strlen@s,w
  5472  0906  00F1               	movwf	?_strlen
  5473  0907  01F2               	clrf	?_strlen+1
  5474  0908  1BF1               	btfsc	?_strlen,7
  5475  0909  03F2               	decf	?_strlen+1,f
  5476  090A  0008               	return
  5477  090B                     __end_of_strlen:	
  5478                           
  5479                           	psect	text9
  5480  0A97                     __ptext9:	
  5481 ;; *************** function _fputs *****************
  5482 ;; Defined at:
  5483 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
  5484 ;; Parameters:    Size  Location     Type
  5485 ;;  s               1    wreg     PTR const unsigned char 
  5486 ;;		 -> dbuf(32), 
  5487 ;;  fp              1    0[BANK0 ] PTR struct _IO_FILE
  5488 ;;		 -> NULL(0), 
  5489 ;; Auto vars:     Size  Location     Type
  5490 ;;  s               1    7[BANK0 ] PTR const unsigned char 
  5491 ;;		 -> dbuf(32), 
  5492 ;;  i               2    5[BANK0 ] int 
  5493 ;;  c               1    4[BANK0 ] unsigned char 
  5494 ;; Return value:  Size  Location     Type
  5495 ;;                  2    0[BANK0 ] int 
  5496 ;; Registers used:
  5497 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5498 ;; Tracked objects:
  5499 ;;		On entry : 0/0
  5500 ;;		On exit  : 0/0
  5501 ;;		Unchanged: 0/0
  5502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5503 ;;      Params:         0       1       0       0       0       0       0       0
  5504 ;;      Locals:         0       4       0       0       0       0       0       0
  5505 ;;      Temps:          0       3       0       0       0       0       0       0
  5506 ;;      Totals:         0       8       0       0       0       0       0       0
  5507 ;;Total ram usage:        8 bytes
  5508 ;; Hardware stack levels used:    1
  5509 ;; Hardware stack levels required when called:    7
  5510 ;; This function calls:
  5511 ;;		_fputc
  5512 ;; This function is called by:
  5513 ;;		_pad
  5514 ;; This function uses a non-reentrant model
  5515 ;;
  5516                           
  5517                           
  5518                           ;psect for function _fputs
  5519  0A97                     _fputs:	
  5520                           
  5521                           ;incstack = 0
  5522                           ; Regs used in _fputs: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5523                           ;fputs@s stored from wreg
  5524  0A97  0020               	movlb	0	; select bank0
  5525  0A98  00A7               	movwf	fputs@s
  5526  0A99  01A5               	clrf	fputs@i
  5527  0A9A  01A6               	clrf	fputs@i+1
  5528  0A9B                     l5262:	
  5529  0A9B  0825               	movf	fputs@i,w
  5530  0A9C  0727               	addwf	fputs@s,w
  5531  0A9D  00A1               	movwf	??_fputs
  5532  0A9E  0821               	movf	??_fputs,w
  5533  0A9F  0086               	movwf	6
  5534  0AA0  3001               	movlw	1	; select bank2/3
  5535  0AA1  0087               	movwf	7
  5536  0AA2  0801               	movf	1,w
  5537  0AA3  00A2               	movwf	??_fputs+1
  5538  0AA4  0822               	movf	??_fputs+1,w
  5539  0AA5  00A4               	movwf	fputs@c
  5540  0AA6  0824               	movf	fputs@c,w
  5541  0AA7  1903               	btfsc	3,2
  5542  0AA8  0008               	return
  5543  0AA9  0824               	movf	fputs@c,w
  5544  0AAA  00A1               	movwf	??_fputs
  5545  0AAB  01A2               	clrf	??_fputs+1
  5546  0AAC  0821               	movf	??_fputs,w
  5547  0AAD  00F4               	movwf	fputc@c
  5548  0AAE  0822               	movf	??_fputs+1,w
  5549  0AAF  00F5               	movwf	fputc@c+1
  5550  0AB0  0820               	movf	fputs@fp,w
  5551  0AB1  00A3               	movwf	??_fputs+2
  5552  0AB2  0823               	movf	??_fputs+2,w
  5553  0AB3  00F6               	movwf	fputc@fp
  5554  0AB4  318C  2420  318A   	fcall	_fputc
  5555  0AB7  3001               	movlw	1
  5556  0AB8  0020               	movlb	0	; select bank0
  5557  0AB9  07A5               	addwf	fputs@i,f
  5558  0ABA  3000               	movlw	0
  5559  0ABB  3DA6               	addwfc	fputs@i+1,f
  5560  0ABC  2A9B               	goto	l5262
  5561  0ABD                     __end_of_fputs:	
  5562                           
  5563                           	psect	text10
  5564  0C20                     __ptext10:	
  5565 ;; *************** function _fputc *****************
  5566 ;; Defined at:
  5567 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
  5568 ;; Parameters:    Size  Location     Type
  5569 ;;  c               2    4[COMMON] int 
  5570 ;;  fp              1    6[COMMON] PTR struct _IO_FILE
  5571 ;;		 -> NULL(0), 
  5572 ;; Auto vars:     Size  Location     Type
  5573 ;;		None
  5574 ;; Return value:  Size  Location     Type
  5575 ;;                  2    4[COMMON] int 
  5576 ;; Registers used:
  5577 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5578 ;; Tracked objects:
  5579 ;;		On entry : 0/0
  5580 ;;		On exit  : 0/0
  5581 ;;		Unchanged: 0/0
  5582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5583 ;;      Params:         3       0       0       0       0       0       0       0
  5584 ;;      Locals:         0       0       0       0       0       0       0       0
  5585 ;;      Temps:          5       0       0       0       0       0       0       0
  5586 ;;      Totals:         8       0       0       0       0       0       0       0
  5587 ;;Total ram usage:        8 bytes
  5588 ;; Hardware stack levels used:    1
  5589 ;; Hardware stack levels required when called:    6
  5590 ;; This function calls:
  5591 ;;		_putch
  5592 ;; This function is called by:
  5593 ;;		_pad
  5594 ;;		_vfpfcnvrt
  5595 ;;		_fputs
  5596 ;; This function uses a non-reentrant model
  5597 ;;
  5598                           
  5599                           
  5600                           ;psect for function _fputc
  5601  0C20                     _fputc:	
  5602                           
  5603                           ;incstack = 0
  5604                           ; Regs used in _fputc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5605  0C20  0876               	movf	fputc@fp,w
  5606  0C21  1D03               	btfss	3,2
  5607  0C22  0876               	movf	fputc@fp,w
  5608  0C23  1D03               	btfss	3,2
  5609  0C24  2C29               	goto	l3574
  5610  0C25  0874               	movf	fputc@c,w
  5611  0C26  3196  26D6         	fcall	_putch
  5612  0C28  0008               	return
  5613  0C29                     l3574:	
  5614  0C29  0876               	movf	fputc@fp,w
  5615  0C2A  3E03               	addlw	3
  5616  0C2B  0086               	movwf	6
  5617  0C2C  0187               	clrf	7
  5618  0C2D  0016               	moviw fsr1++
  5619  0C2E  0401               	iorwf	1,w
  5620  0C2F  1903               	btfsc	3,2
  5621  0C30  2C4C               	goto	l3578
  5622  0C31  0876               	movf	fputc@fp,w
  5623  0C32  3E03               	addlw	3
  5624  0C33  0086               	movwf	6
  5625  0C34  0187               	clrf	7
  5626  0C35  3F40               	moviw [0]fsr1
  5627  0C36  00F7               	movwf	??_fputc
  5628  0C37  3F41               	moviw [1]fsr1
  5629  0C38  00F8               	movwf	??_fputc+1
  5630  0C39  0A76               	incf	fputc@fp,w
  5631  0C3A  0086               	movwf	6
  5632  0C3B  0187               	clrf	7
  5633  0C3C  3F40               	moviw [0]fsr1
  5634  0C3D  00F9               	movwf	??_fputc+2
  5635  0C3E  3F41               	moviw [1]fsr1
  5636  0C3F  00FA               	movwf	??_fputc+3
  5637  0C40  087A               	movf	??_fputc+3,w
  5638  0C41  3A80               	xorlw	128
  5639  0C42  00FB               	movwf	??_fputc+4
  5640  0C43  0878               	movf	??_fputc+1,w
  5641  0C44  3A80               	xorlw	128
  5642  0C45  027B               	subwf	??_fputc+4,w
  5643  0C46  1D03               	skipz
  5644  0C47  2C4A               	goto	u2135
  5645  0C48  0877               	movf	??_fputc,w
  5646  0C49  0279               	subwf	??_fputc+2,w
  5647  0C4A                     u2135:	
  5648  0C4A  1803               	skipnc
  5649  0C4B  0008               	return
  5650  0C4C                     l3578:	
  5651  0C4C  0A76               	incf	fputc@fp,w
  5652  0C4D  0086               	movwf	6
  5653  0C4E  0187               	clrf	7
  5654  0C4F  3001               	movlw	1
  5655  0C50  0781               	addwf	1,f
  5656  0C51  3141               	addfsr 1,1
  5657  0C52  1803               	skipnc
  5658  0C53  0A81               	incf	1,f
  5659  0C54  0008               	return
  5660  0C55                     __end_of_fputc:	
  5661                           
  5662                           	psect	text11
  5663  16D6                     __ptext11:	
  5664 ;; *************** function _putch *****************
  5665 ;; Defined at:
  5666 ;;		line 198 in file "mcc_generated_files/eusart.c"
  5667 ;; Parameters:    Size  Location     Type
  5668 ;;  txData          1    wreg     unsigned char 
  5669 ;; Auto vars:     Size  Location     Type
  5670 ;;  txData          1    3[COMMON] unsigned char 
  5671 ;; Return value:  Size  Location     Type
  5672 ;;                  1    wreg      void 
  5673 ;; Registers used:
  5674 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5675 ;; Tracked objects:
  5676 ;;		On entry : 0/0
  5677 ;;		On exit  : 0/0
  5678 ;;		Unchanged: 0/0
  5679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5680 ;;      Params:         0       0       0       0       0       0       0       0
  5681 ;;      Locals:         1       0       0       0       0       0       0       0
  5682 ;;      Temps:          0       0       0       0       0       0       0       0
  5683 ;;      Totals:         1       0       0       0       0       0       0       0
  5684 ;;Total ram usage:        1 bytes
  5685 ;; Hardware stack levels used:    1
  5686 ;; Hardware stack levels required when called:    5
  5687 ;; This function calls:
  5688 ;;		_EUSART_Write
  5689 ;; This function is called by:
  5690 ;;		_fputc
  5691 ;; This function uses a non-reentrant model
  5692 ;;
  5693                           
  5694                           
  5695                           ;psect for function _putch
  5696  16D6                     _putch:	
  5697                           
  5698                           ;incstack = 0
  5699                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5700                           ;putch@txData stored from wreg
  5701  16D6  00F3               	movwf	putch@txData
  5702                           
  5703                           ;mcc_generated_files/eusart.c: 198: void putch(char txData);mcc_generated_files/eusart.c
      +                          : 199: {;mcc_generated_files/eusart.c: 200:     EUSART_Write(txData);
  5704  16D7  0873               	movf	putch@txData,w
  5705  16D8  318A  2229         	fcall	_EUSART_Write
  5706  16DA  0008               	return
  5707  16DB                     __end_of_putch:	
  5708                           
  5709                           	psect	text12
  5710  0A29                     __ptext12:	
  5711 ;; *************** function _EUSART_Write *****************
  5712 ;; Defined at:
  5713 ;;		line 170 in file "mcc_generated_files/eusart.c"
  5714 ;; Parameters:    Size  Location     Type
  5715 ;;  txData          1    wreg     unsigned char 
  5716 ;; Auto vars:     Size  Location     Type
  5717 ;;  txData          1    2[COMMON] unsigned char 
  5718 ;; Return value:  Size  Location     Type
  5719 ;;                  1    wreg      void 
  5720 ;; Registers used:
  5721 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5722 ;; Tracked objects:
  5723 ;;		On entry : 0/0
  5724 ;;		On exit  : 0/0
  5725 ;;		Unchanged: 0/0
  5726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5727 ;;      Params:         0       0       0       0       0       0       0       0
  5728 ;;      Locals:         1       0       0       0       0       0       0       0
  5729 ;;      Temps:          1       0       0       0       0       0       0       0
  5730 ;;      Totals:         2       0       0       0       0       0       0       0
  5731 ;;Total ram usage:        2 bytes
  5732 ;; Hardware stack levels used:    1
  5733 ;; Hardware stack levels required when called:    4
  5734 ;; This function calls:
  5735 ;;		Nothing
  5736 ;; This function is called by:
  5737 ;;		_putch
  5738 ;; This function uses a non-reentrant model
  5739 ;;
  5740                           
  5741                           
  5742                           ;psect for function _EUSART_Write
  5743  0A29                     _EUSART_Write:	
  5744                           
  5745                           ;incstack = 0
  5746                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  5747                           ;EUSART_Write@txData stored from wreg
  5748  0A29  00F2               	movwf	EUSART_Write@txData
  5749  0A2A                     l3510:	
  5750                           ;mcc_generated_files/eusart.c: 170: void EUSART_Write(uint8_t txData);mcc_generated_file
      +                          s/eusart.c: 171: {;mcc_generated_files/eusart.c: 172:     while(0 == eusartTxBufferRemai
      +                          ning)
  5751                           
  5752                           
  5753                           ;mcc_generated_files/eusart.c: 172:     while(0 == eusartTxBufferRemaining)
  5754  0A2A  0021               	movlb	1	; select bank1
  5755  0A2B  086F               	movf	_eusartTxBufferRemaining^(0+128),w	;volatile
  5756  0A2C  1903               	btfsc	3,2
  5757  0A2D  2A2A               	goto	l3510
  5758                           
  5759                           ;mcc_generated_files/eusart.c: 176:     if(0 == PIE1bits.TXIE)
  5760  0A2E  1A11               	btfsc	17,4	;volatile
  5761  0A2F  2A34               	goto	l740
  5762                           
  5763                           ;mcc_generated_files/eusart.c: 177:     {;mcc_generated_files/eusart.c: 178:         TXR
      +                          EG = txData;
  5764  0A30  0872               	movf	EUSART_Write@txData,w
  5765  0A31  0023               	movlb	3	; select bank3
  5766  0A32  009A               	movwf	26	;volatile
  5767                           
  5768                           ;mcc_generated_files/eusart.c: 179:     }
  5769  0A33  2A49               	goto	l3524
  5770  0A34                     l740:	
  5771                           ;mcc_generated_files/eusart.c: 180:     else
  5772                           
  5773                           
  5774                           ;mcc_generated_files/eusart.c: 181:     {;mcc_generated_files/eusart.c: 182:         PIE
      +                          1bits.TXIE = 0;
  5775  0A34  1211               	bcf	17,4	;volatile
  5776                           
  5777                           ;mcc_generated_files/eusart.c: 183:         eusartTxBuffer[eusartTxHead++] = txData;
  5778  0A35  0872               	movf	EUSART_Write@txData,w
  5779  0A36  00F1               	movwf	??_EUSART_Write
  5780  0A37  0020               	movlb	0	; select bank0
  5781  0A38  0868               	movf	_eusartTxHead,w
  5782  0A39  3EB0               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  5783  0A3A  0086               	movwf	6
  5784  0A3B  0187               	clrf	7
  5785  0A3C  0871               	movf	??_EUSART_Write,w
  5786  0A3D  0081               	movwf	1
  5787  0A3E  3001               	movlw	1
  5788  0A3F  00F1               	movwf	??_EUSART_Write
  5789  0A40  0871               	movf	??_EUSART_Write,w
  5790  0A41  07E8               	addwf	_eusartTxHead,f	;volatile
  5791                           
  5792                           ;mcc_generated_files/eusart.c: 184:         if(sizeof(eusartTxBuffer) <= eusartTxHead)
  5793  0A42  3008               	movlw	8
  5794  0A43  0268               	subwf	_eusartTxHead,w	;volatile
  5795  0A44  1803               	btfsc	3,0
  5796                           
  5797                           ;mcc_generated_files/eusart.c: 185:         {;mcc_generated_files/eusart.c: 186:        
      +                               eusartTxHead = 0;
  5798  0A45  01E8               	clrf	_eusartTxHead	;volatile
  5799                           
  5800                           ;mcc_generated_files/eusart.c: 188:         eusartTxBufferRemaining--;
  5801  0A46  3001               	movlw	1
  5802  0A47  0021               	movlb	1	; select bank1
  5803  0A48  02EF               	subwf	_eusartTxBufferRemaining^(0+128),f	;volatile
  5804  0A49                     l3524:	
  5805                           
  5806                           ;mcc_generated_files/eusart.c: 190:     PIE1bits.TXIE = 1;
  5807  0A49  0021               	movlb	1	; select bank1
  5808  0A4A  1611               	bsf	17,4	;volatile
  5809  0A4B  0008               	return
  5810  0A4C                     __end_of_EUSART_Write:	
  5811                           
  5812                           	psect	text13
  5813  09E6                     __ptext13:	
  5814 ;; *************** function _check_data *****************
  5815 ;; Defined at:
  5816 ;;		line 267 in file "main.c"
  5817 ;; Parameters:    Size  Location     Type
  5818 ;;  x               1    wreg     unsigned char 
  5819 ;; Auto vars:     Size  Location     Type
  5820 ;;  x               1    3[COMMON] unsigned char 
  5821 ;; Return value:  Size  Location     Type
  5822 ;;                  1    wreg      _Bool 
  5823 ;; Registers used:
  5824 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5825 ;; Tracked objects:
  5826 ;;		On entry : 0/0
  5827 ;;		On exit  : 0/0
  5828 ;;		Unchanged: 0/0
  5829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5830 ;;      Params:         0       0       0       0       0       0       0       0
  5831 ;;      Locals:         1       0       0       0       0       0       0       0
  5832 ;;      Temps:          2       0       0       0       0       0       0       0
  5833 ;;      Totals:         3       0       0       0       0       0       0       0
  5834 ;;Total ram usage:        3 bytes
  5835 ;; Hardware stack levels used:    1
  5836 ;; Hardware stack levels required when called:    4
  5837 ;; This function calls:
  5838 ;;		Nothing
  5839 ;; This function is called by:
  5840 ;;		_main
  5841 ;; This function uses a non-reentrant model
  5842 ;;
  5843                           
  5844                           
  5845                           ;psect for function _check_data
  5846  09E6                     _check_data:	
  5847                           
  5848                           ;incstack = 0
  5849                           ; Regs used in _check_data: [wreg-fsr0h+status,2+status,0]
  5850                           ;check_data@x stored from wreg
  5851  09E6  00F3               	movwf	check_data@x
  5852                           
  5853                           ;main.c: 267: _Bool check_data(uint8_t x);main.c: 268: {;main.c: 269:     switch(x)
  5854  09E7  29EC               	goto	l4702
  5855  09E8                     l4676:	
  5856  09E8  3001               	movlw	1
  5857  09E9  0008               	return
  5858  09EA                     l4696:	
  5859  09EA  3000               	movlw	0
  5860  09EB  0008               	return
  5861  09EC                     l4702:	
  5862  09EC  0873               	movf	check_data@x,w
  5863  09ED  00F1               	movwf	??_check_data
  5864  09EE  01F2               	clrf	??_check_data+1
  5865                           
  5866                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5867                           ; Switch size 1, requested type "simple"
  5868                           ; Number of cases is 1, Range of values is 0 to 0
  5869                           ; switch strategies available:
  5870                           ; Name         Instructions Cycles
  5871                           ; simple_byte            4     3 (average)
  5872                           ; direct_byte            8     6 (fixed)
  5873                           ; jumptable            260     6 (fixed)
  5874                           ;	Chosen strategy is simple_byte
  5875  09EF  0872               	movf	??_check_data+1,w
  5876  09F0  3A00               	xorlw	0	; case 0
  5877  09F1  1903               	skipnz
  5878  09F2  29F4               	goto	l6430
  5879  09F3  29EA               	goto	l4696
  5880  09F4                     l6430:	
  5881                           
  5882                           ; Switch size 1, requested type "simple"
  5883                           ; Number of cases is 5, Range of values is 48 to 85
  5884                           ; switch strategies available:
  5885                           ; Name         Instructions Cycles
  5886                           ; simple_byte           16     9 (average)
  5887                           ; direct_byte           85     9 (fixed)
  5888                           ; jumptable            263     9 (fixed)
  5889                           ;	Chosen strategy is simple_byte
  5890  09F4  0871               	movf	??_check_data,w
  5891  09F5  3A30               	xorlw	48	; case 48
  5892  09F6  1903               	skipnz
  5893  09F7  29E8               	goto	l4676
  5894  09F8  3A01               	xorlw	1	; case 49
  5895  09F9  1903               	skipnz
  5896  09FA  29E8               	goto	l4676
  5897  09FB  3A77               	xorlw	119	; case 70
  5898  09FC  1903               	skipnz
  5899  09FD  29E8               	goto	l4676
  5900  09FE  3A12               	xorlw	18	; case 84
  5901  09FF  1903               	skipnz
  5902  0A00  29E8               	goto	l4676
  5903  0A01  3A01               	xorlw	1	; case 85
  5904  0A02  1903               	skipnz
  5905  0A03  29E8               	goto	l4676
  5906  0A04  29EA               	goto	l4696
  5907  0A05  0008               	return
  5908  0A06                     __end_of_check_data:	
  5909                           
  5910                           	psect	text14
  5911  0825                     __ptext14:	
  5912 ;; *************** function _SYSTEM_Initialize *****************
  5913 ;; Defined at:
  5914 ;;		line 50 in file "mcc_generated_files/mcc.c"
  5915 ;; Parameters:    Size  Location     Type
  5916 ;;		None
  5917 ;; Auto vars:     Size  Location     Type
  5918 ;;		None
  5919 ;; Return value:  Size  Location     Type
  5920 ;;                  1    wreg      void 
  5921 ;; Registers used:
  5922 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5923 ;; Tracked objects:
  5924 ;;		On entry : 0/0
  5925 ;;		On exit  : 0/0
  5926 ;;		Unchanged: 0/0
  5927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5928 ;;      Params:         0       0       0       0       0       0       0       0
  5929 ;;      Locals:         0       0       0       0       0       0       0       0
  5930 ;;      Temps:          0       0       0       0       0       0       0       0
  5931 ;;      Totals:         0       0       0       0       0       0       0       0
  5932 ;;Total ram usage:        0 bytes
  5933 ;; Hardware stack levels used:    1
  5934 ;; Hardware stack levels required when called:    9
  5935 ;; This function calls:
  5936 ;;		_EUSART_Initialize
  5937 ;;		_MTOUCH_Initialize
  5938 ;;		_OSCILLATOR_Initialize
  5939 ;;		_PIN_MANAGER_Initialize
  5940 ;;		_TMR2_Initialize
  5941 ;;		_WDT_Initialize
  5942 ;; This function is called by:
  5943 ;;		_main
  5944 ;; This function uses a non-reentrant model
  5945 ;;
  5946                           
  5947                           
  5948                           ;psect for function _SYSTEM_Initialize
  5949  0825                     _SYSTEM_Initialize:	
  5950                           
  5951                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  5952                           
  5953                           ;incstack = 0
  5954                           ; Regs used in _SYSTEM_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5955  0825  3189  218D  3188   	fcall	_PIN_MANAGER_Initialize
  5956                           
  5957                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  5958  0828  3197  2705  3188   	fcall	_OSCILLATOR_Initialize
  5959                           
  5960                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  5961  082B  3196  26CD  3188   	fcall	_WDT_Initialize
  5962                           
  5963                           ;mcc_generated_files/mcc.c: 56:     TMR2_Initialize();
  5964  082E  3197  273B  3188   	fcall	_TMR2_Initialize
  5965                           
  5966                           ;mcc_generated_files/mcc.c: 57:     EUSART_Initialize();
  5967  0831  318C  24CD  3188   	fcall	_EUSART_Initialize
  5968                           
  5969                           ;mcc_generated_files/mcc.c: 58:     MTOUCH_Initialize();
  5970  0834  3197  2762         	fcall	_MTOUCH_Initialize
  5971  0836  0008               	return
  5972  0837                     __end_of_SYSTEM_Initialize:	
  5973                           
  5974                           	psect	text15
  5975  16CD                     __ptext15:	
  5976 ;; *************** function _WDT_Initialize *****************
  5977 ;; Defined at:
  5978 ;;		line 69 in file "mcc_generated_files/mcc.c"
  5979 ;; Parameters:    Size  Location     Type
  5980 ;;		None
  5981 ;; Auto vars:     Size  Location     Type
  5982 ;;		None
  5983 ;; Return value:  Size  Location     Type
  5984 ;;                  1    wreg      void 
  5985 ;; Registers used:
  5986 ;;		wreg
  5987 ;; Tracked objects:
  5988 ;;		On entry : 0/0
  5989 ;;		On exit  : 0/0
  5990 ;;		Unchanged: 0/0
  5991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5992 ;;      Params:         0       0       0       0       0       0       0       0
  5993 ;;      Locals:         0       0       0       0       0       0       0       0
  5994 ;;      Temps:          0       0       0       0       0       0       0       0
  5995 ;;      Totals:         0       0       0       0       0       0       0       0
  5996 ;;Total ram usage:        0 bytes
  5997 ;; Hardware stack levels used:    1
  5998 ;; Hardware stack levels required when called:    4
  5999 ;; This function calls:
  6000 ;;		Nothing
  6001 ;; This function is called by:
  6002 ;;		_SYSTEM_Initialize
  6003 ;; This function uses a non-reentrant model
  6004 ;;
  6005                           
  6006                           
  6007                           ;psect for function _WDT_Initialize
  6008  16CD                     _WDT_Initialize:	
  6009                           
  6010                           ;mcc_generated_files/mcc.c: 72:     WDTCON = 0x16;
  6011                           
  6012                           ;incstack = 0
  6013                           ; Regs used in _WDT_Initialize: [wreg]
  6014  16CD  3016               	movlw	22
  6015  16CE  0021               	movlb	1	; select bank1
  6016  16CF  0097               	movwf	23	;volatile
  6017  16D0  0008               	return
  6018  16D1                     __end_of_WDT_Initialize:	
  6019                           
  6020                           	psect	text16
  6021  173B                     __ptext16:	
  6022 ;; *************** function _TMR2_Initialize *****************
  6023 ;; Defined at:
  6024 ;;		line 62 in file "mcc_generated_files/tmr2.c"
  6025 ;; Parameters:    Size  Location     Type
  6026 ;;		None
  6027 ;; Auto vars:     Size  Location     Type
  6028 ;;		None
  6029 ;; Return value:  Size  Location     Type
  6030 ;;                  1    wreg      void 
  6031 ;; Registers used:
  6032 ;;		wreg, status,2
  6033 ;; Tracked objects:
  6034 ;;		On entry : 0/0
  6035 ;;		On exit  : 0/0
  6036 ;;		Unchanged: 0/0
  6037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6038 ;;      Params:         0       0       0       0       0       0       0       0
  6039 ;;      Locals:         0       0       0       0       0       0       0       0
  6040 ;;      Temps:          0       0       0       0       0       0       0       0
  6041 ;;      Totals:         0       0       0       0       0       0       0       0
  6042 ;;Total ram usage:        0 bytes
  6043 ;; Hardware stack levels used:    1
  6044 ;; Hardware stack levels required when called:    4
  6045 ;; This function calls:
  6046 ;;		Nothing
  6047 ;; This function is called by:
  6048 ;;		_SYSTEM_Initialize
  6049 ;; This function uses a non-reentrant model
  6050 ;;
  6051                           
  6052                           
  6053                           ;psect for function _TMR2_Initialize
  6054  173B                     _TMR2_Initialize:	
  6055                           
  6056                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 0xFF;
  6057                           
  6058                           ;incstack = 0
  6059                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  6060  173B  30FF               	movlw	255
  6061  173C  0020               	movlb	0	; select bank0
  6062  173D  009B               	movwf	27	;volatile
  6063                           
  6064                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
  6065  173E  019A               	clrf	26	;volatile
  6066                           
  6067                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
  6068  173F  1091               	bcf	17,1	;volatile
  6069                           
  6070                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x04;
  6071  1740  3004               	movlw	4
  6072  1741  009C               	movwf	28	;volatile
  6073  1742  0008               	return
  6074  1743                     __end_of_TMR2_Initialize:	
  6075                           
  6076                           	psect	text17
  6077  098D                     __ptext17:	
  6078 ;; *************** function _PIN_MANAGER_Initialize *****************
  6079 ;; Defined at:
  6080 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  6081 ;; Parameters:    Size  Location     Type
  6082 ;;		None
  6083 ;; Auto vars:     Size  Location     Type
  6084 ;;		None
  6085 ;; Return value:  Size  Location     Type
  6086 ;;                  1    wreg      void 
  6087 ;; Registers used:
  6088 ;;		wreg, status,2
  6089 ;; Tracked objects:
  6090 ;;		On entry : 0/0
  6091 ;;		On exit  : 0/0
  6092 ;;		Unchanged: 0/0
  6093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6094 ;;      Params:         0       0       0       0       0       0       0       0
  6095 ;;      Locals:         0       0       0       0       0       0       0       0
  6096 ;;      Temps:          0       0       0       0       0       0       0       0
  6097 ;;      Totals:         0       0       0       0       0       0       0       0
  6098 ;;Total ram usage:        0 bytes
  6099 ;; Hardware stack levels used:    1
  6100 ;; Hardware stack levels required when called:    4
  6101 ;; This function calls:
  6102 ;;		Nothing
  6103 ;; This function is called by:
  6104 ;;		_SYSTEM_Initialize
  6105 ;; This function uses a non-reentrant model
  6106 ;;
  6107                           
  6108                           
  6109                           ;psect for function _PIN_MANAGER_Initialize
  6110  098D                     _PIN_MANAGER_Initialize:	
  6111                           
  6112                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x37;
  6113                           
  6114                           ;incstack = 0
  6115                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  6116  098D  3037               	movlw	55
  6117  098E  0022               	movlb	2	; select bank2
  6118  098F  008C               	movwf	12	;volatile
  6119                           
  6120                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x60;
  6121  0990  3060               	movlw	96
  6122  0991  008D               	movwf	13	;volatile
  6123                           
  6124                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0xAC;
  6125  0992  30AC               	movlw	172
  6126  0993  008E               	movwf	14	;volatile
  6127                           
  6128                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x1B;
  6129  0994  301B               	movlw	27
  6130  0995  0021               	movlb	1	; select bank1
  6131  0996  008C               	movwf	12	;volatile
  6132                           
  6133                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0x70;
  6134  0997  3070               	movlw	112
  6135  0998  008D               	movwf	13	;volatile
  6136                           
  6137                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0x4D;
  6138  0999  304D               	movlw	77
  6139  099A  008E               	movwf	14	;volatile
  6140                           
  6141                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0xED;
  6142  099B  30ED               	movlw	237
  6143  099C  0023               	movlb	3	; select bank3
  6144  099D  008E               	movwf	14	;volatile
  6145                           
  6146                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x50;
  6147  099E  3050               	movlw	80
  6148  099F  008D               	movwf	13	;volatile
  6149                           
  6150                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x37;
  6151  09A0  3037               	movlw	55
  6152  09A1  008C               	movwf	12	;volatile
  6153                           
  6154                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
  6155  09A2  0024               	movlb	4	; select bank4
  6156  09A3  018D               	clrf	13	;volatile
  6157                           
  6158                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
  6159  09A4  018C               	clrf	12	;volatile
  6160                           
  6161                           ;mcc_generated_files/pin_manager.c: 83:     OPTION_REGbits.nWPUEN = 1;
  6162  09A5  0021               	movlb	1	; select bank1
  6163  09A6  1795               	bsf	21,7	;volatile
  6164                           
  6165                           ;mcc_generated_files/pin_manager.c: 90:     APFCON = 0x00;
  6166  09A7  0022               	movlb	2	; select bank2
  6167  09A8  019D               	clrf	29	;volatile
  6168  09A9  0008               	return
  6169  09AA                     __end_of_PIN_MANAGER_Initialize:	
  6170                           
  6171                           	psect	text18
  6172  1705                     __ptext18:	
  6173 ;; *************** function _OSCILLATOR_Initialize *****************
  6174 ;; Defined at:
  6175 ;;		line 61 in file "mcc_generated_files/mcc.c"
  6176 ;; Parameters:    Size  Location     Type
  6177 ;;		None
  6178 ;; Auto vars:     Size  Location     Type
  6179 ;;		None
  6180 ;; Return value:  Size  Location     Type
  6181 ;;                  1    wreg      void 
  6182 ;; Registers used:
  6183 ;;		wreg, status,2
  6184 ;; Tracked objects:
  6185 ;;		On entry : 0/0
  6186 ;;		On exit  : 0/0
  6187 ;;		Unchanged: 0/0
  6188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6189 ;;      Params:         0       0       0       0       0       0       0       0
  6190 ;;      Locals:         0       0       0       0       0       0       0       0
  6191 ;;      Temps:          0       0       0       0       0       0       0       0
  6192 ;;      Totals:         0       0       0       0       0       0       0       0
  6193 ;;Total ram usage:        0 bytes
  6194 ;; Hardware stack levels used:    1
  6195 ;; Hardware stack levels required when called:    4
  6196 ;; This function calls:
  6197 ;;		Nothing
  6198 ;; This function is called by:
  6199 ;;		_SYSTEM_Initialize
  6200 ;; This function uses a non-reentrant model
  6201 ;;
  6202                           
  6203                           
  6204                           ;psect for function _OSCILLATOR_Initialize
  6205  1705                     _OSCILLATOR_Initialize:	
  6206                           
  6207                           ;mcc_generated_files/mcc.c: 64:     OSCCON = 0xF0;
  6208                           
  6209                           ;incstack = 0
  6210                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  6211  1705  30F0               	movlw	240
  6212  1706  0021               	movlb	1	; select bank1
  6213  1707  0099               	movwf	25	;volatile
  6214                           
  6215                           ;mcc_generated_files/mcc.c: 66:     BORCON = 0x00;
  6216  1708  0022               	movlb	2	; select bank2
  6217  1709  0196               	clrf	22	;volatile
  6218  170A  0008               	return
  6219  170B                     __end_of_OSCILLATOR_Initialize:	
  6220                           
  6221                           	psect	text19
  6222  1762                     __ptext19:	
  6223 ;; *************** function _MTOUCH_Initialize *****************
  6224 ;; Defined at:
  6225 ;;		line 80 in file "mcc_generated_files/mtouch/mtouch.c"
  6226 ;; Parameters:    Size  Location     Type
  6227 ;;		None
  6228 ;; Auto vars:     Size  Location     Type
  6229 ;;		None
  6230 ;; Return value:  Size  Location     Type
  6231 ;;                  1    wreg      void 
  6232 ;; Registers used:
  6233 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6234 ;; Tracked objects:
  6235 ;;		On entry : 0/0
  6236 ;;		On exit  : 0/0
  6237 ;;		Unchanged: 0/0
  6238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6239 ;;      Params:         0       0       0       0       0       0       0       0
  6240 ;;      Locals:         0       0       0       0       0       0       0       0
  6241 ;;      Temps:          0       0       0       0       0       0       0       0
  6242 ;;      Totals:         0       0       0       0       0       0       0       0
  6243 ;;Total ram usage:        0 bytes
  6244 ;; Hardware stack levels used:    1
  6245 ;; Hardware stack levels required when called:    8
  6246 ;; This function calls:
  6247 ;;		_MTOUCH_Button_InitializeAll
  6248 ;;		_MTOUCH_Sensor_InitializeAll
  6249 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  6250 ;;		_MTOUCH_Sensor_Scan_Initialize
  6251 ;; This function is called by:
  6252 ;;		_SYSTEM_Initialize
  6253 ;; This function uses a non-reentrant model
  6254 ;;
  6255                           
  6256                           
  6257                           ;psect for function _MTOUCH_Initialize
  6258  1762                     _MTOUCH_Initialize:	
  6259                           
  6260                           ;mcc_generated_files/mtouch/mtouch.c: 82:     MTOUCH_Sensor_InitializeAll();
  6261                           
  6262                           ;incstack = 0
  6263                           ; Regs used in _MTOUCH_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6264  1762  3197  2788  3197   	fcall	_MTOUCH_Sensor_InitializeAll
  6265                           
  6266                           ;mcc_generated_files/mtouch/mtouch.c: 83:     MTOUCH_Button_InitializeAll();
  6267  1765  3189  2156  3197   	fcall	_MTOUCH_Button_InitializeAll
  6268                           
  6269                           ;mcc_generated_files/mtouch/mtouch.c: 84:     MTOUCH_Sensor_Sampled_ResetAll();
  6270  1768  3188  2037  3197   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  6271                           
  6272                           ;mcc_generated_files/mtouch/mtouch.c: 85:     MTOUCH_Sensor_Scan_Initialize();
  6273  176B  3197  27D0         	fcall	_MTOUCH_Sensor_Scan_Initialize
  6274  176D  0008               	return
  6275  176E                     __end_of_MTOUCH_Initialize:	
  6276                           
  6277                           	psect	text20
  6278  1788                     __ptext20:	
  6279 ;; *************** function _MTOUCH_Sensor_InitializeAll *****************
  6280 ;; Defined at:
  6281 ;;		line 206 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6282 ;; Parameters:    Size  Location     Type
  6283 ;;		None
  6284 ;; Auto vars:     Size  Location     Type
  6285 ;;  sensor          1   10[COMMON] enum E2854
  6286 ;; Return value:  Size  Location     Type
  6287 ;;                  1    wreg      void 
  6288 ;; Registers used:
  6289 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6290 ;; Tracked objects:
  6291 ;;		On entry : 0/0
  6292 ;;		On exit  : 0/0
  6293 ;;		Unchanged: 0/0
  6294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6295 ;;      Params:         0       0       0       0       0       0       0       0
  6296 ;;      Locals:         1       0       0       0       0       0       0       0
  6297 ;;      Temps:          1       0       0       0       0       0       0       0
  6298 ;;      Totals:         2       0       0       0       0       0       0       0
  6299 ;;Total ram usage:        2 bytes
  6300 ;; Hardware stack levels used:    1
  6301 ;; Hardware stack levels required when called:    7
  6302 ;; This function calls:
  6303 ;;		_MTOUCH_Sensor_Initialize
  6304 ;; This function is called by:
  6305 ;;		_MTOUCH_Initialize
  6306 ;; This function uses a non-reentrant model
  6307 ;;
  6308                           
  6309                           
  6310                           ;psect for function _MTOUCH_Sensor_InitializeAll
  6311  1788                     _MTOUCH_Sensor_InitializeAll:	
  6312                           
  6313                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 208:     enum mtouch_sensor_names sensor;;m
      +                          cc_generated_files/mtouch/mtouch_sensor.c: 210:     for (sensor = 0; sensor < 1u; sensor
      +                          ++)
  6314                           
  6315                           ;incstack = 0
  6316                           ; Regs used in _MTOUCH_Sensor_InitializeAll: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  6317  1788  01FA               	clrf	MTOUCH_Sensor_InitializeAll@sensor
  6318  1789                     l5776:	
  6319                           
  6320                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 211:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 212:         MTOUCH_Sensor_Initialize(sensor);
  6321  1789  087A               	movf	MTOUCH_Sensor_InitializeAll@sensor,w
  6322  178A  3188  209A  3197   	fcall	_MTOUCH_Sensor_Initialize
  6323                           
  6324                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 213:     }
  6325  178D  3001               	movlw	1
  6326  178E  00F9               	movwf	??_MTOUCH_Sensor_InitializeAll
  6327  178F  0879               	movf	??_MTOUCH_Sensor_InitializeAll,w
  6328  1790  07FA               	addwf	MTOUCH_Sensor_InitializeAll@sensor,f
  6329  1791  087A               	movf	MTOUCH_Sensor_InitializeAll@sensor,w
  6330  1792  1D03               	btfss	3,2
  6331  1793  0008               	return
  6332  1794  2F89               	goto	l5776
  6333  1795                     __end_of_MTOUCH_Sensor_InitializeAll:	
  6334                           
  6335                           	psect	text21
  6336  089A                     __ptext21:	
  6337 ;; *************** function _MTOUCH_Sensor_Initialize *****************
  6338 ;; Defined at:
  6339 ;;		line 191 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6340 ;; Parameters:    Size  Location     Type
  6341 ;;  sensor          1    wreg     enum E2854
  6342 ;; Auto vars:     Size  Location     Type
  6343 ;;  sensor          1    8[COMMON] enum E2854
  6344 ;; Return value:  Size  Location     Type
  6345 ;;                  1    wreg      enum E2856
  6346 ;; Registers used:
  6347 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6348 ;; Tracked objects:
  6349 ;;		On entry : 0/0
  6350 ;;		On exit  : 0/0
  6351 ;;		Unchanged: 0/0
  6352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6353 ;;      Params:         0       0       0       0       0       0       0       0
  6354 ;;      Locals:         1       0       0       0       0       0       0       0
  6355 ;;      Temps:          1       0       0       0       0       0       0       0
  6356 ;;      Totals:         2       0       0       0       0       0       0       0
  6357 ;;Total ram usage:        2 bytes
  6358 ;; Hardware stack levels used:    1
  6359 ;; Hardware stack levels required when called:    6
  6360 ;; This function calls:
  6361 ;;		_MTOUCH_Sensor_Calibrate
  6362 ;;		_MTOUCH_Sensor_Enable
  6363 ;;		_Sensor_Sampled_Reset
  6364 ;;		___bmul
  6365 ;; This function is called by:
  6366 ;;		_MTOUCH_Sensor_InitializeAll
  6367 ;; This function uses a non-reentrant model
  6368 ;;
  6369                           
  6370                           
  6371                           ;psect for function _MTOUCH_Sensor_Initialize
  6372  089A                     _MTOUCH_Sensor_Initialize:	
  6373                           
  6374                           ;incstack = 0
  6375                           ; Regs used in _MTOUCH_Sensor_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  6376                           ;MTOUCH_Sensor_Initialize@sensor stored from wreg
  6377  089A  00F8               	movwf	MTOUCH_Sensor_Initialize@sensor
  6378                           
  6379                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 191: enum mtouch_sensor_error MTOUCH_Sensor
      +                          _Initialize(enum mtouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c:
      +                           192: {;mcc_generated_files/mtouch/mtouch_sensor.c: 194:     MTOUCH_Sensor_Enable(sensor
      +                          );
  6380  089B  0878               	movf	MTOUCH_Sensor_Initialize@sensor,w
  6381  089C  3197  27F0  3188   	fcall	_MTOUCH_Sensor_Enable
  6382                           
  6383                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 195:     MTOUCH_Sensor_Calibrate(sensor);
  6384  089F  0878               	movf	MTOUCH_Sensor_Initialize@sensor,w
  6385  08A0  3197  27C0  3188   	fcall	_MTOUCH_Sensor_Calibrate
  6386                           
  6387                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 196:     Sensor_Sampled_Reset(&mtouch_senso
      +                          r[sensor]);
  6388  08A3  3009               	movlw	9
  6389  08A4  00F7               	movwf	??_MTOUCH_Sensor_Initialize
  6390  08A5  0877               	movf	??_MTOUCH_Sensor_Initialize,w
  6391  08A6  00F1               	movwf	___bmul@multiplicand
  6392  08A7  0878               	movf	MTOUCH_Sensor_Initialize@sensor,w
  6393  08A8  3188  2003  3188   	fcall	___bmul
  6394  08AB  3EDE               	addlw	(low (_mtouch_sensor| 0))& (0+255)
  6395  08AC  3197  272C         	fcall	_Sensor_Sampled_Reset
  6396  08AE  0008               	return
  6397  08AF                     __end_of_MTOUCH_Sensor_Initialize:	
  6398                           
  6399                           	psect	text22
  6400  17F0                     __ptext22:	
  6401 ;; *************** function _MTOUCH_Sensor_Enable *****************
  6402 ;; Defined at:
  6403 ;;		line 824 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6404 ;; Parameters:    Size  Location     Type
  6405 ;;  sensor          1    wreg     enum E2854
  6406 ;; Auto vars:     Size  Location     Type
  6407 ;;  sensor          1    6[COMMON] enum E2854
  6408 ;; Return value:  Size  Location     Type
  6409 ;;                  1    wreg      void 
  6410 ;; Registers used:
  6411 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6412 ;; Tracked objects:
  6413 ;;		On entry : 0/0
  6414 ;;		On exit  : 0/0
  6415 ;;		Unchanged: 0/0
  6416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6417 ;;      Params:         0       0       0       0       0       0       0       0
  6418 ;;      Locals:         1       0       0       0       0       0       0       0
  6419 ;;      Temps:          1       0       0       0       0       0       0       0
  6420 ;;      Totals:         2       0       0       0       0       0       0       0
  6421 ;;Total ram usage:        2 bytes
  6422 ;; Hardware stack levels used:    1
  6423 ;; Hardware stack levels required when called:    5
  6424 ;; This function calls:
  6425 ;;		___bmul
  6426 ;; This function is called by:
  6427 ;;		_MTOUCH_Sensor_Initialize
  6428 ;; This function uses a non-reentrant model
  6429 ;;
  6430                           
  6431                           
  6432                           ;psect for function _MTOUCH_Sensor_Enable
  6433  17F0                     _MTOUCH_Sensor_Enable:	
  6434                           
  6435                           ;incstack = 0
  6436                           ; Regs used in _MTOUCH_Sensor_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6437                           ;MTOUCH_Sensor_Enable@sensor stored from wreg
  6438  17F0  00F6               	movwf	MTOUCH_Sensor_Enable@sensor
  6439                           
  6440                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 824: void MTOUCH_Sensor_Enable(enum mtouch_
      +                          sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 825: {;mcc_generated_fi
      +                          les/mtouch/mtouch_sensor.c: 826:     if(sensor < 1u)
  6441  17F1  0876               	movf	MTOUCH_Sensor_Enable@sensor,w
  6442  17F2  1D03               	btfss	3,2
  6443  17F3  0008               	return
  6444                           
  6445                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 827:         mtouch_sensor[sensor].enabled 
      +                          = 1;
  6446  17F4  3009               	movlw	9
  6447  17F5  00F5               	movwf	??_MTOUCH_Sensor_Enable
  6448  17F6  0875               	movf	??_MTOUCH_Sensor_Enable,w
  6449  17F7  00F1               	movwf	___bmul@multiplicand
  6450  17F8  0876               	movf	MTOUCH_Sensor_Enable@sensor,w
  6451  17F9  3188  2003         	fcall	___bmul
  6452  17FB  3EE6               	addlw	(low ((_mtouch_sensor| 0+8)))& (0+255)
  6453  17FC  0086               	movwf	6
  6454  17FD  0187               	clrf	7
  6455  17FE  1581               	bsf	1,3
  6456  17FF  0008               	return
  6457  1800                     __end_of_MTOUCH_Sensor_Enable:	
  6458                           
  6459                           	psect	text23
  6460  0956                     __ptext23:	
  6461 ;; *************** function _MTOUCH_Button_InitializeAll *****************
  6462 ;; Defined at:
  6463 ;;		line 155 in file "mcc_generated_files/mtouch/mtouch_button.c"
  6464 ;; Parameters:    Size  Location     Type
  6465 ;;		None
  6466 ;; Auto vars:     Size  Location     Type
  6467 ;;  button          1    0[BANK0 ] enum E3067
  6468 ;; Return value:  Size  Location     Type
  6469 ;;                  1    wreg      void 
  6470 ;; Registers used:
  6471 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6472 ;; Tracked objects:
  6473 ;;		On entry : 0/0
  6474 ;;		On exit  : 0/0
  6475 ;;		Unchanged: 0/0
  6476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6477 ;;      Params:         0       0       0       0       0       0       0       0
  6478 ;;      Locals:         0       1       0       0       0       0       0       0
  6479 ;;      Temps:          1       0       0       0       0       0       0       0
  6480 ;;      Totals:         1       1       0       0       0       0       0       0
  6481 ;;Total ram usage:        2 bytes
  6482 ;; Hardware stack levels used:    1
  6483 ;; Hardware stack levels required when called:    7
  6484 ;; This function calls:
  6485 ;;		_MTOUCH_Button_Initialize
  6486 ;;		_memcpy
  6487 ;; This function is called by:
  6488 ;;		_MTOUCH_Initialize
  6489 ;; This function uses a non-reentrant model
  6490 ;;
  6491                           
  6492                           
  6493                           ;psect for function _MTOUCH_Button_InitializeAll
  6494  0956                     _MTOUCH_Button_InitializeAll:	
  6495                           
  6496                           ;mcc_generated_files/mtouch/mtouch_button.c: 157:     enum mtouch_button_names button;;m
      +                          cc_generated_files/mtouch/mtouch_button.c: 159:     memcpy(mtouch_button,mtouch_button_i
      +                          nit,sizeof(mtouch_button_init));
  6497                           
  6498                           ;incstack = 0
  6499                           ; Regs used in _MTOUCH_Button_InitializeAll: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6500  0956  3000               	movlw	low (_mtouch_button_init| (0+32768))
  6501  0957  00F1               	movwf	memcpy@s1
  6502  0958  3090               	movlw	high (_mtouch_button_init| (0+32768))
  6503  0959  00F2               	movwf	memcpy@s1+1
  6504  095A  3010               	movlw	16
  6505  095B  00F3               	movwf	memcpy@n
  6506  095C  3000               	movlw	0
  6507  095D  00F4               	movwf	memcpy@n+1
  6508  095E  30C4               	movlw	(low (_mtouch_button| 0))& (0+255)
  6509  095F  318B  230D  3189   	fcall	_memcpy
  6510                           
  6511                           ;mcc_generated_files/mtouch/mtouch_button.c: 161:     for (button = 0; button < 1u; butt
      +                          on++)
  6512  0962  0020               	movlb	0	; select bank0
  6513  0963  01A0               	clrf	MTOUCH_Button_InitializeAll@button
  6514  0964                     l5790:	
  6515                           
  6516                           ;mcc_generated_files/mtouch/mtouch_button.c: 162:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 163:         MTOUCH_Button_Initialize(button);
  6517  0964  0820               	movf	MTOUCH_Button_InitializeAll@button,w
  6518  0965  318B  23BD  3189   	fcall	_MTOUCH_Button_Initialize
  6519                           
  6520                           ;mcc_generated_files/mtouch/mtouch_button.c: 164:     }
  6521  0968  3001               	movlw	1
  6522  0969  00FB               	movwf	??_MTOUCH_Button_InitializeAll
  6523  096A  087B               	movf	??_MTOUCH_Button_InitializeAll,w
  6524  096B  0020               	movlb	0	; select bank0
  6525  096C  07A0               	addwf	MTOUCH_Button_InitializeAll@button,f
  6526  096D  0820               	movf	MTOUCH_Button_InitializeAll@button,w
  6527  096E  1D03               	btfss	3,2
  6528  096F  0008               	return
  6529  0970  2964               	goto	l5790
  6530  0971                     __end_of_MTOUCH_Button_InitializeAll:	
  6531                           
  6532                           	psect	text24
  6533  0B0D                     __ptext24:	
  6534 ;; *************** function _memcpy *****************
  6535 ;; Defined at:
  6536 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\memcpy.c"
  6537 ;; Parameters:    Size  Location     Type
  6538 ;;  d1              1    wreg     PTR void 
  6539 ;;		 -> mtouch_button(16), 
  6540 ;;  s1              2    1[COMMON] PTR const void 
  6541 ;;		 -> mtouch_button_init(16), 
  6542 ;;  n               2    3[COMMON] unsigned int 
  6543 ;; Auto vars:     Size  Location     Type
  6544 ;;  d1              1    9[COMMON] PTR void 
  6545 ;;		 -> mtouch_button(16), 
  6546 ;;  s               2    7[COMMON] PTR const unsigned char 
  6547 ;;		 -> mtouch_button_init(16), 
  6548 ;;  d               1   10[COMMON] PTR unsigned char 
  6549 ;;		 -> mtouch_button(16), 
  6550 ;;  tmp             1    6[COMMON] unsigned char 
  6551 ;; Return value:  Size  Location     Type
  6552 ;;                  1    wreg      PTR void 
  6553 ;; Registers used:
  6554 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  6555 ;; Tracked objects:
  6556 ;;		On entry : 0/0
  6557 ;;		On exit  : 0/0
  6558 ;;		Unchanged: 0/0
  6559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6560 ;;      Params:         4       0       0       0       0       0       0       0
  6561 ;;      Locals:         5       0       0       0       0       0       0       0
  6562 ;;      Temps:          1       0       0       0       0       0       0       0
  6563 ;;      Totals:        10       0       0       0       0       0       0       0
  6564 ;;Total ram usage:       10 bytes
  6565 ;; Hardware stack levels used:    1
  6566 ;; Hardware stack levels required when called:    4
  6567 ;; This function calls:
  6568 ;;		Nothing
  6569 ;; This function is called by:
  6570 ;;		_MTOUCH_Button_InitializeAll
  6571 ;; This function uses a non-reentrant model
  6572 ;;
  6573                           
  6574                           
  6575                           ;psect for function _memcpy
  6576  0B0D                     _memcpy:	
  6577                           
  6578                           ;incstack = 0
  6579                           ; Regs used in _memcpy: [wreg-fsr1h+status,2+status,0+pclath]
  6580                           ;memcpy@d1 stored from wreg
  6581  0B0D  00F9               	movwf	memcpy@d1
  6582  0B0E  0872               	movf	memcpy@s1+1,w
  6583  0B0F  00F8               	movwf	memcpy@s+1
  6584  0B10  0871               	movf	memcpy@s1,w
  6585  0B11  00F7               	movwf	memcpy@s
  6586  0B12  0879               	movf	memcpy@d1,w
  6587  0B13  00F5               	movwf	??_memcpy
  6588  0B14  0875               	movf	??_memcpy,w
  6589  0B15  00FA               	movwf	memcpy@d
  6590  0B16                     l5674:	
  6591  0B16  3001               	movlw	1
  6592  0B17  02F3               	subwf	memcpy@n,f
  6593  0B18  3000               	movlw	0
  6594  0B19  3BF4               	subwfb	memcpy@n+1,f
  6595  0B1A  0A73               	incf	memcpy@n,w
  6596  0B1B  1903               	btfsc	3,2
  6597  0B1C  0A74               	incf	memcpy@n+1,w
  6598  0B1D  1903               	btfsc	3,2
  6599  0B1E  0008               	return
  6600  0B1F  0877               	movf	memcpy@s,w
  6601  0B20  0084               	movwf	4
  6602  0B21  0878               	movf	memcpy@s+1,w
  6603  0B22  0085               	movwf	5
  6604  0B23  0800               	movf	0,w	;code access
  6605  0B24  00F5               	movwf	??_memcpy
  6606  0B25  0875               	movf	??_memcpy,w
  6607  0B26  00F6               	movwf	memcpy@tmp
  6608  0B27  3001               	movlw	1
  6609  0B28  07F7               	addwf	memcpy@s,f
  6610  0B29  3000               	movlw	0
  6611  0B2A  3DF8               	addwfc	memcpy@s+1,f
  6612  0B2B  0876               	movf	memcpy@tmp,w
  6613  0B2C  00F5               	movwf	??_memcpy
  6614  0B2D  087A               	movf	memcpy@d,w
  6615  0B2E  0086               	movwf	6
  6616  0B2F  0187               	clrf	7
  6617  0B30  0875               	movf	??_memcpy,w
  6618  0B31  0081               	movwf	1
  6619  0B32  3001               	movlw	1
  6620  0B33  00F5               	movwf	??_memcpy
  6621  0B34  0875               	movf	??_memcpy,w
  6622  0B35  07FA               	addwf	memcpy@d,f
  6623  0B36  2B16               	goto	l5674
  6624  0B37                     __end_of_memcpy:	
  6625                           
  6626                           	psect	text25
  6627  0CCD                     __ptext25:	
  6628 ;; *************** function _EUSART_Initialize *****************
  6629 ;; Defined at:
  6630 ;;		line 85 in file "mcc_generated_files/eusart.c"
  6631 ;; Parameters:    Size  Location     Type
  6632 ;;		None
  6633 ;; Auto vars:     Size  Location     Type
  6634 ;;		None
  6635 ;; Return value:  Size  Location     Type
  6636 ;;                  1    wreg      void 
  6637 ;; Registers used:
  6638 ;;		wreg, status,2, status,0, pclath, cstack
  6639 ;; Tracked objects:
  6640 ;;		On entry : 0/0
  6641 ;;		On exit  : 0/0
  6642 ;;		Unchanged: 0/0
  6643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6644 ;;      Params:         0       0       0       0       0       0       0       0
  6645 ;;      Locals:         0       0       0       0       0       0       0       0
  6646 ;;      Temps:          1       0       0       0       0       0       0       0
  6647 ;;      Totals:         1       0       0       0       0       0       0       0
  6648 ;;Total ram usage:        1 bytes
  6649 ;; Hardware stack levels used:    1
  6650 ;; Hardware stack levels required when called:    5
  6651 ;; This function calls:
  6652 ;;		_EUSART_SetErrorHandler
  6653 ;;		_EUSART_SetFramingErrorHandler
  6654 ;;		_EUSART_SetOverrunErrorHandler
  6655 ;;		_EUSART_SetRxInterruptHandler
  6656 ;;		_EUSART_SetTxInterruptHandler
  6657 ;; This function is called by:
  6658 ;;		_SYSTEM_Initialize
  6659 ;; This function uses a non-reentrant model
  6660 ;;
  6661                           
  6662                           
  6663                           ;psect for function _EUSART_Initialize
  6664  0CCD                     _EUSART_Initialize:	
  6665                           
  6666                           ;mcc_generated_files/eusart.c: 88:     PIE1bits.RCIE = 0;
  6667                           
  6668                           ;incstack = 0
  6669                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6670  0CCD  0021               	movlb	1	; select bank1
  6671  0CCE  1291               	bcf	17,5	;volatile
  6672                           
  6673                           ;mcc_generated_files/eusart.c: 89:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  6674  0CCF  30EE               	movlw	low _EUSART_Receive_ISR
  6675  0CD0  00F1               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  6676  0CD1  300B               	movlw	high _EUSART_Receive_ISR
  6677  0CD2  00F2               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  6678  0CD3  3196  26F9  318C   	fcall	_EUSART_SetRxInterruptHandler
  6679                           
  6680                           ;mcc_generated_files/eusart.c: 90:     PIE1bits.TXIE = 0;
  6681  0CD6  0021               	movlb	1	; select bank1
  6682  0CD7  1211               	bcf	17,4	;volatile
  6683                           
  6684                           ;mcc_generated_files/eusart.c: 91:     EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR)
      +                          ;
  6685  0CD8  30AA               	movlw	low _EUSART_Transmit_ISR
  6686  0CD9  00F1               	movwf	EUSART_SetTxInterruptHandler@interruptHandler
  6687  0CDA  3009               	movlw	high _EUSART_Transmit_ISR
  6688  0CDB  00F2               	movwf	EUSART_SetTxInterruptHandler@interruptHandler+1
  6689  0CDC  3196  26FF  318C   	fcall	_EUSART_SetTxInterruptHandler
  6690                           
  6691                           ;mcc_generated_files/eusart.c: 95:     BAUDCON = 0x0A;
  6692  0CDF  300A               	movlw	10
  6693  0CE0  0023               	movlb	3	; select bank3
  6694  0CE1  009F               	movwf	31	;volatile
  6695                           
  6696                           ;mcc_generated_files/eusart.c: 98:     RCSTA = 0x90;
  6697  0CE2  3090               	movlw	144
  6698  0CE3  009D               	movwf	29	;volatile
  6699                           
  6700                           ;mcc_generated_files/eusart.c: 101:     TXSTA = 0x24;
  6701  0CE4  3024               	movlw	36
  6702  0CE5  009E               	movwf	30	;volatile
  6703                           
  6704                           ;mcc_generated_files/eusart.c: 104:     SPBRGL = 0x40;
  6705  0CE6  3040               	movlw	64
  6706  0CE7  009B               	movwf	27	;volatile
  6707                           
  6708                           ;mcc_generated_files/eusart.c: 107:     SPBRGH = 0x03;
  6709  0CE8  3003               	movlw	3
  6710  0CE9  009C               	movwf	28	;volatile
  6711                           
  6712                           ;mcc_generated_files/eusart.c: 110:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
  6713  0CEA  30AB               	movlw	low _EUSART_DefaultFramingErrorHandler
  6714  0CEB  00F1               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  6715  0CEC  3016               	movlw	high _EUSART_DefaultFramingErrorHandler
  6716  0CED  00F2               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  6717  0CEE  3196  26ED  318C   	fcall	_EUSART_SetFramingErrorHandler
  6718                           
  6719                           ;mcc_generated_files/eusart.c: 111:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
  6720  0CF1  30BD               	movlw	low _EUSART_DefaultOverrunErrorHandler
  6721  0CF2  00F1               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  6722  0CF3  3016               	movlw	high _EUSART_DefaultOverrunErrorHandler
  6723  0CF4  00F2               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  6724  0CF5  3196  26F3  318C   	fcall	_EUSART_SetOverrunErrorHandler
  6725                           
  6726                           ;mcc_generated_files/eusart.c: 112:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
  6727  0CF8  30AE               	movlw	low _EUSART_DefaultErrorHandler
  6728  0CF9  00F1               	movwf	EUSART_SetErrorHandler@interruptHandler
  6729  0CFA  3016               	movlw	high _EUSART_DefaultErrorHandler
  6730  0CFB  00F2               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  6731  0CFC  3196  26E7         	fcall	_EUSART_SetErrorHandler
  6732                           
  6733                           ;mcc_generated_files/eusart.c: 114:     eusartRxLastError.status = 0;
  6734  0CFE  0020               	movlb	0	; select bank0
  6735  0CFF  01E4               	clrf	_eusartRxLastError	;volatile
  6736                           
  6737                           ;mcc_generated_files/eusart.c: 117:     eusartTxHead = 0;
  6738  0D00  01E8               	clrf	_eusartTxHead	;volatile
  6739                           
  6740                           ;mcc_generated_files/eusart.c: 118:     eusartTxTail = 0;
  6741  0D01  01E7               	clrf	_eusartTxTail	;volatile
  6742                           
  6743                           ;mcc_generated_files/eusart.c: 119:     eusartTxBufferRemaining = sizeof(eusartTxBuffer)
      +                          ;
  6744  0D02  3008               	movlw	8
  6745  0D03  00F3               	movwf	??_EUSART_Initialize
  6746  0D04  0873               	movf	??_EUSART_Initialize,w
  6747  0D05  0021               	movlb	1	; select bank1
  6748  0D06  00EF               	movwf	_eusartTxBufferRemaining^(0+128)	;volatile
  6749                           
  6750                           ;mcc_generated_files/eusart.c: 121:     eusartRxHead = 0;
  6751  0D07  01FC               	clrf	_eusartRxHead	;volatile
  6752                           
  6753                           ;mcc_generated_files/eusart.c: 122:     eusartRxTail = 0;
  6754  0D08  0020               	movlb	0	; select bank0
  6755  0D09  01E6               	clrf	_eusartRxTail	;volatile
  6756                           
  6757                           ;mcc_generated_files/eusart.c: 123:     eusartRxCount = 0;
  6758  0D0A  01E5               	clrf	_eusartRxCount	;volatile
  6759                           
  6760                           ;mcc_generated_files/eusart.c: 126:     PIE1bits.RCIE = 1;
  6761  0D0B  0021               	movlb	1	; select bank1
  6762  0D0C  1691               	bsf	17,5	;volatile
  6763  0D0D  0008               	return
  6764  0D0E                     __end_of_EUSART_Initialize:	
  6765                           
  6766                           	psect	text26
  6767  16FF                     __ptext26:	
  6768 ;; *************** function _EUSART_SetTxInterruptHandler *****************
  6769 ;; Defined at:
  6770 ;;		line 282 in file "mcc_generated_files/eusart.c"
  6771 ;; Parameters:    Size  Location     Type
  6772 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  6773 ;;		 -> EUSART_Transmit_ISR(1), 
  6774 ;; Auto vars:     Size  Location     Type
  6775 ;;		None
  6776 ;; Return value:  Size  Location     Type
  6777 ;;                  1    wreg      void 
  6778 ;; Registers used:
  6779 ;;		wreg
  6780 ;; Tracked objects:
  6781 ;;		On entry : 0/0
  6782 ;;		On exit  : 0/0
  6783 ;;		Unchanged: 0/0
  6784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6785 ;;      Params:         2       0       0       0       0       0       0       0
  6786 ;;      Locals:         0       0       0       0       0       0       0       0
  6787 ;;      Temps:          0       0       0       0       0       0       0       0
  6788 ;;      Totals:         2       0       0       0       0       0       0       0
  6789 ;;Total ram usage:        2 bytes
  6790 ;; Hardware stack levels used:    1
  6791 ;; Hardware stack levels required when called:    4
  6792 ;; This function calls:
  6793 ;;		Nothing
  6794 ;; This function is called by:
  6795 ;;		_EUSART_Initialize
  6796 ;; This function uses a non-reentrant model
  6797 ;;
  6798                           
  6799                           
  6800                           ;psect for function _EUSART_SetTxInterruptHandler
  6801  16FF                     _EUSART_SetTxInterruptHandler:	
  6802                           
  6803                           ;mcc_generated_files/eusart.c: 283:     EUSART_TxDefaultInterruptHandler = interruptHand
      +                          ler;
  6804                           
  6805                           ;incstack = 0
  6806                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
  6807  16FF  0872               	movf	EUSART_SetTxInterruptHandler@interruptHandler+1,w
  6808  1700  0021               	movlb	1	; select bank1
  6809  1701  00EE               	movwf	(_EUSART_TxDefaultInterruptHandler+1)^(0+128)
  6810  1702  0871               	movf	EUSART_SetTxInterruptHandler@interruptHandler,w
  6811  1703  00ED               	movwf	_EUSART_TxDefaultInterruptHandler^(0+128)
  6812  1704  0008               	return
  6813  1705                     __end_of_EUSART_SetTxInterruptHandler:	
  6814                           
  6815                           	psect	text27
  6816  16F9                     __ptext27:	
  6817 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  6818 ;; Defined at:
  6819 ;;		line 286 in file "mcc_generated_files/eusart.c"
  6820 ;; Parameters:    Size  Location     Type
  6821 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  6822 ;;		 -> EUSART_Receive_ISR(1), 
  6823 ;; Auto vars:     Size  Location     Type
  6824 ;;		None
  6825 ;; Return value:  Size  Location     Type
  6826 ;;                  1    wreg      void 
  6827 ;; Registers used:
  6828 ;;		wreg
  6829 ;; Tracked objects:
  6830 ;;		On entry : 0/0
  6831 ;;		On exit  : 0/0
  6832 ;;		Unchanged: 0/0
  6833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6834 ;;      Params:         2       0       0       0       0       0       0       0
  6835 ;;      Locals:         0       0       0       0       0       0       0       0
  6836 ;;      Temps:          0       0       0       0       0       0       0       0
  6837 ;;      Totals:         2       0       0       0       0       0       0       0
  6838 ;;Total ram usage:        2 bytes
  6839 ;; Hardware stack levels used:    1
  6840 ;; Hardware stack levels required when called:    4
  6841 ;; This function calls:
  6842 ;;		Nothing
  6843 ;; This function is called by:
  6844 ;;		_EUSART_Initialize
  6845 ;; This function uses a non-reentrant model
  6846 ;;
  6847                           
  6848                           
  6849                           ;psect for function _EUSART_SetRxInterruptHandler
  6850  16F9                     _EUSART_SetRxInterruptHandler:	
  6851                           
  6852                           ;mcc_generated_files/eusart.c: 287:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  6853                           
  6854                           ;incstack = 0
  6855                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  6856  16F9  0872               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
  6857  16FA  0021               	movlb	1	; select bank1
  6858  16FB  00EC               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128)
  6859  16FC  0871               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
  6860  16FD  00EB               	movwf	_EUSART_RxDefaultInterruptHandler^(0+128)
  6861  16FE  0008               	return
  6862  16FF                     __end_of_EUSART_SetRxInterruptHandler:	
  6863                           
  6864                           	psect	text28
  6865  16F3                     __ptext28:	
  6866 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  6867 ;; Defined at:
  6868 ;;		line 274 in file "mcc_generated_files/eusart.c"
  6869 ;; Parameters:    Size  Location     Type
  6870 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  6871 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  6872 ;; Auto vars:     Size  Location     Type
  6873 ;;		None
  6874 ;; Return value:  Size  Location     Type
  6875 ;;                  1    wreg      void 
  6876 ;; Registers used:
  6877 ;;		wreg
  6878 ;; Tracked objects:
  6879 ;;		On entry : 0/0
  6880 ;;		On exit  : 0/0
  6881 ;;		Unchanged: 0/0
  6882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6883 ;;      Params:         2       0       0       0       0       0       0       0
  6884 ;;      Locals:         0       0       0       0       0       0       0       0
  6885 ;;      Temps:          0       0       0       0       0       0       0       0
  6886 ;;      Totals:         2       0       0       0       0       0       0       0
  6887 ;;Total ram usage:        2 bytes
  6888 ;; Hardware stack levels used:    1
  6889 ;; Hardware stack levels required when called:    4
  6890 ;; This function calls:
  6891 ;;		Nothing
  6892 ;; This function is called by:
  6893 ;;		_EUSART_Initialize
  6894 ;; This function uses a non-reentrant model
  6895 ;;
  6896                           
  6897                           
  6898                           ;psect for function _EUSART_SetOverrunErrorHandler
  6899  16F3                     _EUSART_SetOverrunErrorHandler:	
  6900                           
  6901                           ;mcc_generated_files/eusart.c: 275:     EUSART_OverrunErrorHandler = interruptHandler;
  6902                           
  6903                           ;incstack = 0
  6904                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  6905  16F3  0872               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  6906  16F4  0021               	movlb	1	; select bank1
  6907  16F5  00E8               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+128)
  6908  16F6  0871               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  6909  16F7  00E7               	movwf	_EUSART_OverrunErrorHandler^(0+128)
  6910  16F8  0008               	return
  6911  16F9                     __end_of_EUSART_SetOverrunErrorHandler:	
  6912                           
  6913                           	psect	text29
  6914  16ED                     __ptext29:	
  6915 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  6916 ;; Defined at:
  6917 ;;		line 270 in file "mcc_generated_files/eusart.c"
  6918 ;; Parameters:    Size  Location     Type
  6919 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  6920 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  6921 ;; Auto vars:     Size  Location     Type
  6922 ;;		None
  6923 ;; Return value:  Size  Location     Type
  6924 ;;                  1    wreg      void 
  6925 ;; Registers used:
  6926 ;;		wreg
  6927 ;; Tracked objects:
  6928 ;;		On entry : 0/0
  6929 ;;		On exit  : 0/0
  6930 ;;		Unchanged: 0/0
  6931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6932 ;;      Params:         2       0       0       0       0       0       0       0
  6933 ;;      Locals:         0       0       0       0       0       0       0       0
  6934 ;;      Temps:          0       0       0       0       0       0       0       0
  6935 ;;      Totals:         2       0       0       0       0       0       0       0
  6936 ;;Total ram usage:        2 bytes
  6937 ;; Hardware stack levels used:    1
  6938 ;; Hardware stack levels required when called:    4
  6939 ;; This function calls:
  6940 ;;		Nothing
  6941 ;; This function is called by:
  6942 ;;		_EUSART_Initialize
  6943 ;; This function uses a non-reentrant model
  6944 ;;
  6945                           
  6946                           
  6947                           ;psect for function _EUSART_SetFramingErrorHandler
  6948  16ED                     _EUSART_SetFramingErrorHandler:	
  6949                           
  6950                           ;mcc_generated_files/eusart.c: 271:     EUSART_FramingErrorHandler = interruptHandler;
  6951                           
  6952                           ;incstack = 0
  6953                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  6954  16ED  0872               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  6955  16EE  0021               	movlb	1	; select bank1
  6956  16EF  00EA               	movwf	(_EUSART_FramingErrorHandler+1)^(0+128)
  6957  16F0  0871               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  6958  16F1  00E9               	movwf	_EUSART_FramingErrorHandler^(0+128)
  6959  16F2  0008               	return
  6960  16F3                     __end_of_EUSART_SetFramingErrorHandler:	
  6961                           
  6962                           	psect	text30
  6963  16E7                     __ptext30:	
  6964 ;; *************** function _EUSART_SetErrorHandler *****************
  6965 ;; Defined at:
  6966 ;;		line 278 in file "mcc_generated_files/eusart.c"
  6967 ;; Parameters:    Size  Location     Type
  6968 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  6969 ;;		 -> EUSART_DefaultErrorHandler(1), 
  6970 ;; Auto vars:     Size  Location     Type
  6971 ;;		None
  6972 ;; Return value:  Size  Location     Type
  6973 ;;                  1    wreg      void 
  6974 ;; Registers used:
  6975 ;;		wreg
  6976 ;; Tracked objects:
  6977 ;;		On entry : 0/0
  6978 ;;		On exit  : 0/0
  6979 ;;		Unchanged: 0/0
  6980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6981 ;;      Params:         2       0       0       0       0       0       0       0
  6982 ;;      Locals:         0       0       0       0       0       0       0       0
  6983 ;;      Temps:          0       0       0       0       0       0       0       0
  6984 ;;      Totals:         2       0       0       0       0       0       0       0
  6985 ;;Total ram usage:        2 bytes
  6986 ;; Hardware stack levels used:    1
  6987 ;; Hardware stack levels required when called:    4
  6988 ;; This function calls:
  6989 ;;		Nothing
  6990 ;; This function is called by:
  6991 ;;		_EUSART_Initialize
  6992 ;; This function uses a non-reentrant model
  6993 ;;
  6994                           
  6995                           
  6996                           ;psect for function _EUSART_SetErrorHandler
  6997  16E7                     _EUSART_SetErrorHandler:	
  6998                           
  6999                           ;mcc_generated_files/eusart.c: 279:     EUSART_ErrorHandler = interruptHandler;
  7000                           
  7001                           ;incstack = 0
  7002                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  7003  16E7  0872               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  7004  16E8  0022               	movlb	2	; select bank2
  7005  16E9  00C1               	movwf	(_EUSART_ErrorHandler+1)^(0+256)
  7006  16EA  0871               	movf	EUSART_SetErrorHandler@interruptHandler,w
  7007  16EB  00C0               	movwf	_EUSART_ErrorHandler^(0+256)
  7008  16EC  0008               	return
  7009  16ED                     __end_of_EUSART_SetErrorHandler:	
  7010                           
  7011                           	psect	text31
  7012  0971                     __ptext31:	
  7013 ;; *************** function _MTOUCH_Service_Mainloop *****************
  7014 ;; Defined at:
  7015 ;;		line 95 in file "mcc_generated_files/mtouch/mtouch.c"
  7016 ;; Parameters:    Size  Location     Type
  7017 ;;		None
  7018 ;; Auto vars:     Size  Location     Type
  7019 ;;		None
  7020 ;; Return value:  Size  Location     Type
  7021 ;;                  1    wreg      _Bool 
  7022 ;; Registers used:
  7023 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7024 ;; Tracked objects:
  7025 ;;		On entry : 0/0
  7026 ;;		On exit  : 0/0
  7027 ;;		Unchanged: 0/0
  7028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7029 ;;      Params:         0       0       0       0       0       0       0       0
  7030 ;;      Locals:         0       0       0       0       0       0       0       0
  7031 ;;      Temps:          0       1       0       0       0       0       0       0
  7032 ;;      Totals:         0       1       0       0       0       0       0       0
  7033 ;;Total ram usage:        1 bytes
  7034 ;; Hardware stack levels used:    1
  7035 ;; Hardware stack levels required when called:   11
  7036 ;; This function calls:
  7037 ;;		_MTOUCH_Button_ServiceAll
  7038 ;;		_MTOUCH_Sensor_SampleAll
  7039 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  7040 ;;		_MTOUCH_Tick
  7041 ;;		_MTOUCH_needReburst
  7042 ;; This function is called by:
  7043 ;;		_main
  7044 ;;		_touch_example
  7045 ;; This function uses a non-reentrant model
  7046 ;;
  7047                           
  7048                           
  7049                           ;psect for function _MTOUCH_Service_Mainloop
  7050  0971                     _MTOUCH_Service_Mainloop:	
  7051                           
  7052                           ;mcc_generated_files/mtouch/mtouch.c: 99:     mtouch_time_toScan = 1;
  7053                           
  7054                           ;incstack = 0
  7055                           ; Regs used in _MTOUCH_Service_Mainloop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7056  0971  0020               	movlb	0	; select bank0
  7057  0972  01EB               	clrf	_mtouch_time_toScan
  7058  0973  0AEB               	incf	_mtouch_time_toScan,f
  7059                           
  7060                           ;mcc_generated_files/mtouch/mtouch.c: 102:     {;mcc_generated_files/mtouch/mtouch.c: 10
      +                          3:         if(MTOUCH_Sensor_SampleAll() == 0)
  7061                           
  7062                           ;mcc_generated_files/mtouch/mtouch.c: 101:     if(mtouch_time_toScan)
  7063  0974  3188  2085  3189   	fcall	_MTOUCH_Sensor_SampleAll
  7064  0977  3A00               	xorlw	0
  7065  0978  1D03               	skipz
  7066  0979  297C               	goto	l5916
  7067                           
  7068                           ;mcc_generated_files/mtouch/mtouch.c: 104:         return 0;
  7069  097A  3000               	movlw	0
  7070  097B  0008               	return
  7071  097C                     l5916:	
  7072                           
  7073                           ;mcc_generated_files/mtouch/mtouch.c: 107:             MTOUCH_Button_ServiceAll();
  7074  097C  3197  27B1  3189   	fcall	_MTOUCH_Button_ServiceAll
  7075                           
  7076                           ;mcc_generated_files/mtouch/mtouch.c: 108:             mtouch_time_toScan = MTOUCH_needR
      +                          eburst();
  7077  097F  3180  2002  3189   	fcall	_MTOUCH_needReburst
  7078  0982  0020               	movlb	0	; select bank0
  7079  0983  00C8               	movwf	??_MTOUCH_Service_Mainloop
  7080  0984  0848               	movf	??_MTOUCH_Service_Mainloop,w
  7081  0985  00EB               	movwf	_mtouch_time_toScan
  7082                           
  7083                           ;mcc_generated_files/mtouch/mtouch.c: 109:             MTOUCH_Sensor_Sampled_ResetAll();
  7084  0986  3188  2037  3189   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  7085                           
  7086                           ;mcc_generated_files/mtouch/mtouch.c: 110:             MTOUCH_Tick();
  7087  0989  3196  26BA         	fcall	_MTOUCH_Tick
  7088                           
  7089                           ;mcc_generated_files/mtouch/mtouch.c: 111:             return 1;
  7090  098B  3001               	movlw	1
  7091  098C  0008               	return
  7092  098D                     __end_of_MTOUCH_Service_Mainloop:	
  7093                           
  7094                           	psect	text32
  7095  0002                     __ptext32:	
  7096 ;; *************** function _MTOUCH_needReburst *****************
  7097 ;; Defined at:
  7098 ;;		line 134 in file "mcc_generated_files/mtouch/mtouch.c"
  7099 ;; Parameters:    Size  Location     Type
  7100 ;;		None
  7101 ;; Auto vars:     Size  Location     Type
  7102 ;;  needReburst     1    0        _Bool 
  7103 ;; Return value:  Size  Location     Type
  7104 ;;                  1    wreg      _Bool 
  7105 ;; Registers used:
  7106 ;;		wreg, status,2
  7107 ;; Tracked objects:
  7108 ;;		On entry : 0/0
  7109 ;;		On exit  : 0/0
  7110 ;;		Unchanged: 0/0
  7111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7112 ;;      Params:         0       0       0       0       0       0       0       0
  7113 ;;      Locals:         1       0       0       0       0       0       0       0
  7114 ;;      Temps:          0       0       0       0       0       0       0       0
  7115 ;;      Totals:         1       0       0       0       0       0       0       0
  7116 ;;Total ram usage:        1 bytes
  7117 ;; Hardware stack levels used:    1
  7118 ;; Hardware stack levels required when called:    4
  7119 ;; This function calls:
  7120 ;;		Nothing
  7121 ;; This function is called by:
  7122 ;;		_MTOUCH_Service_Mainloop
  7123 ;; This function uses a non-reentrant model
  7124 ;;
  7125                           
  7126                           
  7127                           ;psect for function _MTOUCH_needReburst
  7128  0002                     _MTOUCH_needReburst:	
  7129                           
  7130                           ;mcc_generated_files/mtouch/mtouch.c: 138:     return needReburst;
  7131                           
  7132                           ;incstack = 0
  7133                           ; Regs used in _MTOUCH_needReburst: [wreg+status,2]
  7134  0002  3000               	movlw	0
  7135  0003  0008               	return
  7136  0004                     __end_of_MTOUCH_needReburst:	
  7137                           
  7138                           	psect	text33
  7139  16BA                     __ptext33:	
  7140 ;; *************** function _MTOUCH_Tick *****************
  7141 ;; Defined at:
  7142 ;;		line 124 in file "mcc_generated_files/mtouch/mtouch.c"
  7143 ;; Parameters:    Size  Location     Type
  7144 ;;		None
  7145 ;; Auto vars:     Size  Location     Type
  7146 ;;		None
  7147 ;; Return value:  Size  Location     Type
  7148 ;;                  1    wreg      void 
  7149 ;; Registers used:
  7150 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7151 ;; Tracked objects:
  7152 ;;		On entry : 0/0
  7153 ;;		On exit  : 0/0
  7154 ;;		Unchanged: 0/0
  7155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7156 ;;      Params:         0       0       0       0       0       0       0       0
  7157 ;;      Locals:         0       0       0       0       0       0       0       0
  7158 ;;      Temps:          0       0       0       0       0       0       0       0
  7159 ;;      Totals:         0       0       0       0       0       0       0       0
  7160 ;;Total ram usage:        0 bytes
  7161 ;; Hardware stack levels used:    1
  7162 ;; Hardware stack levels required when called:    6
  7163 ;; This function calls:
  7164 ;;		_MTOUCH_Button_Tick
  7165 ;; This function is called by:
  7166 ;;		_MTOUCH_Service_Mainloop
  7167 ;; This function uses a non-reentrant model
  7168 ;;
  7169                           
  7170                           
  7171                           ;psect for function _MTOUCH_Tick
  7172  16BA                     _MTOUCH_Tick:	
  7173                           
  7174                           ;mcc_generated_files/mtouch/mtouch.c: 126:     MTOUCH_Button_Tick();
  7175                           
  7176                           ;incstack = 0
  7177                           ; Regs used in _MTOUCH_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7178  16BA  3196  26C9         	fcall	_MTOUCH_Button_Tick
  7179  16BC  0008               	return
  7180  16BD                     __end_of_MTOUCH_Tick:	
  7181                           
  7182                           	psect	text34
  7183  16C9                     __ptext34:	
  7184 ;; *************** function _MTOUCH_Button_Tick *****************
  7185 ;; Defined at:
  7186 ;;		line 281 in file "mcc_generated_files/mtouch/mtouch_button.c"
  7187 ;; Parameters:    Size  Location     Type
  7188 ;;		None
  7189 ;; Auto vars:     Size  Location     Type
  7190 ;;		None
  7191 ;; Return value:  Size  Location     Type
  7192 ;;                  1    wreg      void 
  7193 ;; Registers used:
  7194 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7195 ;; Tracked objects:
  7196 ;;		On entry : 0/0
  7197 ;;		On exit  : 0/0
  7198 ;;		Unchanged: 0/0
  7199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7200 ;;      Params:         0       0       0       0       0       0       0       0
  7201 ;;      Locals:         0       0       0       0       0       0       0       0
  7202 ;;      Temps:          0       0       0       0       0       0       0       0
  7203 ;;      Totals:         0       0       0       0       0       0       0       0
  7204 ;;Total ram usage:        0 bytes
  7205 ;; Hardware stack levels used:    1
  7206 ;; Hardware stack levels required when called:    5
  7207 ;; This function calls:
  7208 ;;		_Button_Tick_helper
  7209 ;; This function is called by:
  7210 ;;		_MTOUCH_Tick
  7211 ;; This function uses a non-reentrant model
  7212 ;;
  7213                           
  7214                           
  7215                           ;psect for function _MTOUCH_Button_Tick
  7216  16C9                     _MTOUCH_Button_Tick:	
  7217                           
  7218                           ;mcc_generated_files/mtouch/mtouch_button.c: 283:     Button_Tick_helper(&mtouch_button[
      +                          0]);
  7219                           
  7220                           ;incstack = 0
  7221                           ; Regs used in _MTOUCH_Button_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7222  16C9  30C4               	movlw	(low (_mtouch_button| 0))& (0+255)
  7223  16CA  318A  2206         	fcall	_Button_Tick_helper
  7224  16CC  0008               	return
  7225  16CD                     __end_of_MTOUCH_Button_Tick:	
  7226                           
  7227                           	psect	text35
  7228  0A06                     __ptext35:	
  7229 ;; *************** function _Button_Tick_helper *****************
  7230 ;; Defined at:
  7231 ;;		line 285 in file "mcc_generated_files/mtouch/mtouch_button.c"
  7232 ;; Parameters:    Size  Location     Type
  7233 ;;  button          1    wreg     PTR struct .
  7234 ;;		 -> mtouch_button(16), 
  7235 ;; Auto vars:     Size  Location     Type
  7236 ;;  button          1    3[COMMON] PTR struct .
  7237 ;;		 -> mtouch_button(16), 
  7238 ;; Return value:  Size  Location     Type
  7239 ;;                  1    wreg      void 
  7240 ;; Registers used:
  7241 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7242 ;; Tracked objects:
  7243 ;;		On entry : 0/0
  7244 ;;		On exit  : 0/0
  7245 ;;		Unchanged: 0/0
  7246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7247 ;;      Params:         0       0       0       0       0       0       0       0
  7248 ;;      Locals:         1       0       0       0       0       0       0       0
  7249 ;;      Temps:          2       0       0       0       0       0       0       0
  7250 ;;      Totals:         3       0       0       0       0       0       0       0
  7251 ;;Total ram usage:        3 bytes
  7252 ;; Hardware stack levels used:    1
  7253 ;; Hardware stack levels required when called:    4
  7254 ;; This function calls:
  7255 ;;		Nothing
  7256 ;; This function is called by:
  7257 ;;		_MTOUCH_Button_Tick
  7258 ;; This function uses a non-reentrant model
  7259 ;;
  7260                           
  7261                           
  7262                           ;psect for function _Button_Tick_helper
  7263  0A06                     _Button_Tick_helper:	
  7264                           
  7265                           ;incstack = 0
  7266                           ; Regs used in _Button_Tick_helper: [wreg+fsr1l+fsr1h+status,2+status,0]
  7267                           ;Button_Tick_helper@button stored from wreg
  7268  0A06  00F3               	movwf	Button_Tick_helper@button
  7269                           
  7270                           ;mcc_generated_files/mtouch/mtouch_button.c: 285: static void Button_Tick_helper(mtouch_
      +                          button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 286: {;mcc_generated_files
      +                          /mtouch/mtouch_button.c: 288:     if ((button->state) == MTOUCH_BUTTON_STATE_pressed)
  7271  0A07  0873               	movf	Button_Tick_helper@button,w
  7272  0A08  3E02               	addlw	2
  7273  0A09  0086               	movwf	6
  7274  0A0A  0187               	clrf	7
  7275  0A0B  3002               	movlw	2
  7276  0A0C  0601               	xorwf	1,w
  7277  0A0D  1D03               	btfss	3,2
  7278  0A0E  0008               	return
  7279                           
  7280                           ;mcc_generated_files/mtouch/mtouch_button.c: 289:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 290:         (button->counter)++;
  7281  0A0F  0873               	movf	Button_Tick_helper@button,w
  7282  0A10  3E0A               	addlw	10
  7283  0A11  0086               	movwf	6
  7284  0A12  0187               	clrf	7
  7285  0A13  3001               	movlw	1
  7286  0A14  0781               	addwf	1,f
  7287  0A15  3141               	addfsr 1,1
  7288  0A16  1803               	skipnc
  7289  0A17  0A81               	incf	1,f
  7290                           
  7291                           ;mcc_generated_files/mtouch/mtouch_button.c: 291:         if (button->counter == (mtouch
      +                          _button_statecounter_t)0)
  7292  0A18  0873               	movf	Button_Tick_helper@button,w
  7293  0A19  3E0A               	addlw	10
  7294  0A1A  0086               	movwf	6
  7295  0A1B  0187               	clrf	7
  7296  0A1C  0016               	moviw fsr1++
  7297  0A1D  0401               	iorwf	1,w
  7298  0A1E  1D03               	btfss	3,2
  7299  0A1F  0008               	return
  7300                           
  7301                           ;mcc_generated_files/mtouch/mtouch_button.c: 292:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 293:             button->counter = (mtouch_button_statecounter_t)0xFFFF;
  7302  0A20  0873               	movf	Button_Tick_helper@button,w
  7303  0A21  3E0A               	addlw	10
  7304  0A22  0086               	movwf	6
  7305  0A23  0187               	clrf	7
  7306  0A24  30FF               	movlw	255
  7307  0A25  3FC0               	movwi [0]fsr1
  7308  0A26  30FF               	movlw	255
  7309  0A27  3FC1               	movwi [1]fsr1
  7310  0A28  0008               	return
  7311  0A29                     __end_of_Button_Tick_helper:	
  7312                           
  7313                           	psect	text36
  7314  0837                     __ptext36:	
  7315 ;; *************** function _MTOUCH_Sensor_Sampled_ResetAll *****************
  7316 ;; Defined at:
  7317 ;;		line 933 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7318 ;; Parameters:    Size  Location     Type
  7319 ;;		None
  7320 ;; Auto vars:     Size  Location     Type
  7321 ;;  sensor          1    3[COMMON] PTR struct .
  7322 ;;		 -> mtouch_sensor(9), 
  7323 ;; Return value:  Size  Location     Type
  7324 ;;                  1    wreg      void 
  7325 ;; Registers used:
  7326 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7327 ;; Tracked objects:
  7328 ;;		On entry : 0/0
  7329 ;;		On exit  : 0/0
  7330 ;;		Unchanged: 0/0
  7331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7332 ;;      Params:         0       0       0       0       0       0       0       0
  7333 ;;      Locals:         1       0       0       0       0       0       0       0
  7334 ;;      Temps:          1       0       0       0       0       0       0       0
  7335 ;;      Totals:         2       0       0       0       0       0       0       0
  7336 ;;Total ram usage:        2 bytes
  7337 ;; Hardware stack levels used:    1
  7338 ;; Hardware stack levels required when called:    5
  7339 ;; This function calls:
  7340 ;;		_Sensor_Sampled_Reset
  7341 ;; This function is called by:
  7342 ;;		_MTOUCH_Initialize
  7343 ;;		_MTOUCH_Service_Mainloop
  7344 ;; This function uses a non-reentrant model
  7345 ;;
  7346                           
  7347                           
  7348                           ;psect for function _MTOUCH_Sensor_Sampled_ResetAll
  7349  0837                     _MTOUCH_Sensor_Sampled_ResetAll:	
  7350                           
  7351                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 935:     mtouch_sensor_t* sensor;;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 936:     for(sensor = &mtouch_sensor[0];sensor<= &mto
      +                          uch_sensor[1u -1];sensor++)
  7352                           
  7353                           ;incstack = 0
  7354                           ; Regs used in _MTOUCH_Sensor_Sampled_ResetAll: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
  7355  0837  30DE               	movlw	(low (_mtouch_sensor| 0))& (0+255)
  7356  0838  00F2               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  7357  0839  0872               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  7358  083A  00F3               	movwf	MTOUCH_Sensor_Sampled_ResetAll@sensor
  7359  083B                     L2:	
  7360  083B  30DE               	movlw	(low (_mtouch_sensor| 0))& (0+255)
  7361  083C  00F2               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  7362  083D  0873               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  7363  083E  0272               	subwf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  7364  083F  1C03               	btfss	3,0
  7365  0840  0008               	return
  7366                           
  7367                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 937:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 938:         Sensor_Sampled_Reset(sensor);
  7368  0841  0873               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  7369  0842  3197  272C  3188   	fcall	_Sensor_Sampled_Reset
  7370                           
  7371                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 939:     }
  7372  0845  3009               	movlw	9
  7373  0846  00F2               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  7374  0847  0872               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  7375  0848  07F3               	addwf	MTOUCH_Sensor_Sampled_ResetAll@sensor,f
  7376  0849  283B               	goto	L2
  7377  084A                     __end_of_MTOUCH_Sensor_Sampled_ResetAll:	
  7378                           
  7379                           	psect	text37
  7380  172C                     __ptext37:	
  7381 ;; *************** function _Sensor_Sampled_Reset *****************
  7382 ;; Defined at:
  7383 ;;		line 947 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7384 ;; Parameters:    Size  Location     Type
  7385 ;;  sensor          1    wreg     PTR struct .
  7386 ;;		 -> mtouch_sensor(9), 
  7387 ;; Auto vars:     Size  Location     Type
  7388 ;;  sensor          1    1[COMMON] PTR struct .
  7389 ;;		 -> mtouch_sensor(9), 
  7390 ;; Return value:  Size  Location     Type
  7391 ;;                  1    wreg      void 
  7392 ;; Registers used:
  7393 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7394 ;; Tracked objects:
  7395 ;;		On entry : 0/0
  7396 ;;		On exit  : 0/0
  7397 ;;		Unchanged: 0/0
  7398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7399 ;;      Params:         0       0       0       0       0       0       0       0
  7400 ;;      Locals:         1       0       0       0       0       0       0       0
  7401 ;;      Temps:          0       0       0       0       0       0       0       0
  7402 ;;      Totals:         1       0       0       0       0       0       0       0
  7403 ;;Total ram usage:        1 bytes
  7404 ;; Hardware stack levels used:    1
  7405 ;; Hardware stack levels required when called:    4
  7406 ;; This function calls:
  7407 ;;		Nothing
  7408 ;; This function is called by:
  7409 ;;		_MTOUCH_Sensor_Initialize
  7410 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  7411 ;; This function uses a non-reentrant model
  7412 ;;
  7413                           
  7414                           
  7415                           ;psect for function _Sensor_Sampled_Reset
  7416  172C                     _Sensor_Sampled_Reset:	
  7417                           
  7418                           ;incstack = 0
  7419                           ; Regs used in _Sensor_Sampled_Reset: [wreg+fsr1l+fsr1h+status,2+status,0]
  7420                           ;Sensor_Sampled_Reset@sensor stored from wreg
  7421  172C  00F1               	movwf	Sensor_Sampled_Reset@sensor
  7422                           
  7423                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 947: static __attribute__((inline)) void Se
      +                          nsor_Sampled_Reset(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          948: {;mcc_generated_files/mtouch/mtouch_sensor.c: 949:     sensor->sampled = 0;
  7424  172D  0871               	movf	Sensor_Sampled_Reset@sensor,w
  7425  172E  3E08               	addlw	8
  7426  172F  0086               	movwf	6
  7427  1730  0187               	clrf	7
  7428  1731  1001               	bcf	1,0
  7429  1732  0008               	return
  7430  1733                     __end_of_Sensor_Sampled_Reset:	
  7431                           
  7432                           	psect	text38
  7433  0885                     __ptext38:	
  7434 ;; *************** function _MTOUCH_Sensor_SampleAll *****************
  7435 ;; Defined at:
  7436 ;;		line 241 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7437 ;; Parameters:    Size  Location     Type
  7438 ;;		None
  7439 ;; Auto vars:     Size  Location     Type
  7440 ;;  group           1   39[BANK0 ] unsigned char 
  7441 ;; Return value:  Size  Location     Type
  7442 ;;                  1    wreg      _Bool 
  7443 ;; Registers used:
  7444 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7445 ;; Tracked objects:
  7446 ;;		On entry : 0/0
  7447 ;;		On exit  : 0/0
  7448 ;;		Unchanged: 0/0
  7449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7450 ;;      Params:         0       0       0       0       0       0       0       0
  7451 ;;      Locals:         0       1       0       0       0       0       0       0
  7452 ;;      Temps:          0       1       0       0       0       0       0       0
  7453 ;;      Totals:         0       2       0       0       0       0       0       0
  7454 ;;Total ram usage:        2 bytes
  7455 ;; Hardware stack levels used:    1
  7456 ;; Hardware stack levels required when called:   10
  7457 ;; This function calls:
  7458 ;;		_Sensor_Service
  7459 ;; This function is called by:
  7460 ;;		_MTOUCH_Service_Mainloop
  7461 ;; This function uses a non-reentrant model
  7462 ;;
  7463                           
  7464                           
  7465                           ;psect for function _MTOUCH_Sensor_SampleAll
  7466  0885                     _MTOUCH_Sensor_SampleAll:	
  7467                           
  7468                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 243:     uint8_t group;;mcc_generated_files
      +                          /mtouch/mtouch_sensor.c: 244:     for (group = 0; group < 1u; group++)
  7469                           
  7470                           ;incstack = 0
  7471                           ; Regs used in _MTOUCH_Sensor_SampleAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7472  0885  0020               	movlb	0	; select bank0
  7473  0886  01C7               	clrf	MTOUCH_Sensor_SampleAll@group
  7474  0887                     l5876:	
  7475                           
  7476                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 245:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 246:         if(Sensor_Service(group)!= MTOUCH_SENSOR_ERROR_none)
  7477  0887  0847               	movf	MTOUCH_Sensor_SampleAll@group,w
  7478  0888  3186  265C  3188   	fcall	_Sensor_Service
  7479  088B  3A00               	xorlw	0
  7480  088C  1903               	skipnz
  7481  088D  2890               	goto	l5882
  7482                           
  7483                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 247:             return 0;
  7484  088E  3000               	movlw	0
  7485  088F  0008               	return
  7486  0890                     l5882:	
  7487                           
  7488                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 248:     }
  7489  0890  3001               	movlw	1
  7490  0891  0020               	movlb	0	; select bank0
  7491  0892  00C6               	movwf	??_MTOUCH_Sensor_SampleAll
  7492  0893  0846               	movf	??_MTOUCH_Sensor_SampleAll,w
  7493  0894  07C7               	addwf	MTOUCH_Sensor_SampleAll@group,f
  7494  0895  0847               	movf	MTOUCH_Sensor_SampleAll@group,w
  7495  0896  1903               	btfsc	3,2
  7496  0897  2887               	goto	l5876
  7497                           
  7498                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 249:     return 1;
  7499  0898  3001               	movlw	1
  7500  0899  0008               	return
  7501  089A                     __end_of_MTOUCH_Sensor_SampleAll:	
  7502                           
  7503                           	psect	text39
  7504  065C                     __ptext39:	
  7505 ;; *************** function _Sensor_Service *****************
  7506 ;; Defined at:
  7507 ;;		line 286 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7508 ;; Parameters:    Size  Location     Type
  7509 ;;  scanGroup       1    wreg     unsigned char 
  7510 ;; Auto vars:     Size  Location     Type
  7511 ;;  scanGroup       1   34[BANK0 ] unsigned char 
  7512 ;;  sensor_adc2     1   37[BANK0 ] PTR struct .
  7513 ;;		 -> mtouch_sensor(9), 
  7514 ;;  sensor_adc1     1   36[BANK0 ] PTR struct .
  7515 ;;		 -> NULL(0), 
  7516 ;;  error           1   35[BANK0 ] enum E2856
  7517 ;; Return value:  Size  Location     Type
  7518 ;;                  1    wreg      enum E2856
  7519 ;; Registers used:
  7520 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7521 ;; Tracked objects:
  7522 ;;		On entry : 0/0
  7523 ;;		On exit  : 0/0
  7524 ;;		Unchanged: 0/0
  7525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7526 ;;      Params:         0       0       0       0       0       0       0       0
  7527 ;;      Locals:         0       4       0       0       0       0       0       0
  7528 ;;      Temps:          0       3       0       0       0       0       0       0
  7529 ;;      Totals:         0       7       0       0       0       0       0       0
  7530 ;;Total ram usage:        7 bytes
  7531 ;; Hardware stack levels used:    1
  7532 ;; Hardware stack levels required when called:    9
  7533 ;; This function calls:
  7534 ;;		_Sensor_Acquisition
  7535 ;;		_Sensor_DefaultCallback
  7536 ;;		_Sensor_RawSample_Update
  7537 ;;		_Sensor_isEnabled
  7538 ;;		_Sensor_setSampled
  7539 ;; This function is called by:
  7540 ;;		_MTOUCH_Sensor_SampleAll
  7541 ;; This function uses a non-reentrant model
  7542 ;;
  7543                           
  7544                           
  7545                           ;psect for function _Sensor_Service
  7546  065C                     _Sensor_Service:	
  7547                           
  7548                           ;incstack = 0
  7549                           ; Regs used in _Sensor_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7550                           ;Sensor_Service@scanGroup stored from wreg
  7551  065C  0020               	movlb	0	; select bank0
  7552  065D  00C2               	movwf	Sensor_Service@scanGroup
  7553                           
  7554                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 286: static enum mtouch_sensor_error Sensor
      +                          _Service(uint8_t scanGroup);mcc_generated_files/mtouch/mtouch_sensor.c: 287: {;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 288:     mtouch_sensor_t* sensor_adc1;;mcc_generated_
      +                          files/mtouch/mtouch_sensor.c: 289:     mtouch_sensor_t* sensor_adc2;;mcc_generated_files
      +                          /mtouch/mtouch_sensor.c: 291:     sensor_adc1 = (mtouch_sensor_t*)sensor_scan_group[scan
      +                          Group].sensor_adc1;
  7555  065E  0842               	movf	Sensor_Service@scanGroup,w
  7556  065F  00BF               	movwf	??_Sensor_Service
  7557  0660  01C0               	clrf	??_Sensor_Service+1
  7558  0661  35BF               	lslf	??_Sensor_Service,f
  7559  0662  0DC0               	rlf	??_Sensor_Service+1,f
  7560  0663  3021               	movlw	low (_sensor_scan_group| (0+32768))
  7561  0664  073F               	addwf	??_Sensor_Service,w
  7562  0665  0084               	movwf	4
  7563  0666  3098               	movlw	high (_sensor_scan_group| (0+32768))
  7564  0667  3D40               	addwfc	??_Sensor_Service+1,w
  7565  0668  0085               	movwf	5
  7566  0669  0800               	movf	0,w	;code access
  7567  066A  00C1               	movwf	??_Sensor_Service+2
  7568  066B  0841               	movf	??_Sensor_Service+2,w
  7569  066C  00C4               	movwf	Sensor_Service@sensor_adc1
  7570                           
  7571                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 292:     sensor_adc2 = (mtouch_sensor_t*)se
      +                          nsor_scan_group[scanGroup].sensor_adc2;
  7572  066D  0842               	movf	Sensor_Service@scanGroup,w
  7573  066E  00BF               	movwf	??_Sensor_Service
  7574  066F  01C0               	clrf	??_Sensor_Service+1
  7575  0670  35BF               	lslf	??_Sensor_Service,f
  7576  0671  0DC0               	rlf	??_Sensor_Service+1,f
  7577  0672  3022               	movlw	low ((_sensor_scan_group+1)| (0+32768))
  7578  0673  073F               	addwf	??_Sensor_Service,w
  7579  0674  0084               	movwf	4
  7580  0675  3098               	movlw	high ((_sensor_scan_group+1)| (0+32768))
  7581  0676  3D40               	addwfc	??_Sensor_Service+1,w
  7582  0677  0085               	movwf	5
  7583  0678  0800               	movf	0,w	;code access
  7584  0679  00C1               	movwf	??_Sensor_Service+2
  7585  067A  0841               	movf	??_Sensor_Service+2,w
  7586  067B  00C5               	movwf	Sensor_Service@sensor_adc2
  7587                           
  7588                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 294:     enum mtouch_sensor_error error = S
      +                          ensor_Acquisition(sensor_adc1,sensor_adc2);
  7589  067C  0845               	movf	Sensor_Service@sensor_adc2,w
  7590  067D  00BF               	movwf	??_Sensor_Service
  7591  067E  083F               	movf	??_Sensor_Service,w
  7592  067F  00BB               	movwf	Sensor_Acquisition@sensor_adc2
  7593  0680  0844               	movf	Sensor_Service@sensor_adc1,w
  7594  0681  318E  26AB  3186   	fcall	_Sensor_Acquisition
  7595  0684  0020               	movlb	0	; select bank0
  7596  0685  00C0               	movwf	??_Sensor_Service+1
  7597  0686  0840               	movf	??_Sensor_Service+1,w
  7598  0687  00C3               	movwf	Sensor_Service@error
  7599                           
  7600                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 297:     switch(error)
  7601  0688  2EC9               	goto	l5822
  7602  0689                     l5800:	
  7603                           
  7604                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 300:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 301:             if(Sensor_isEnabled(sensor_adc1))
  7605  0689  0844               	movf	Sensor_Service@sensor_adc1,w
  7606  068A  3197  27E0  3186   	fcall	_Sensor_isEnabled
  7607  068D  3A00               	xorlw	0
  7608  068E  1903               	skipnz
  7609  068F  2EA8               	goto	l5810
  7610                           
  7611                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 302:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 307:                 if(!lowpowerActivated)
  7612  0690  0020               	movlb	0	; select bank0
  7613  0691  086A               	movf	_lowpowerActivated,w
  7614  0692  1D03               	btfss	3,2
  7615  0693  2E98               	goto	l5806
  7616                           
  7617                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 308:                 {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 309:                     Sensor_RawSample_Update(sensor_adc1);
  7618  0694  0844               	movf	Sensor_Service@sensor_adc1,w
  7619  0695  318A  2271  3186   	fcall	_Sensor_RawSample_Update
  7620  0698                     l5806:	
  7621                           
  7622                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 311:                 Sensor_setSampled(sens
      +                          or_adc1);
  7623  0698  0020               	movlb	0	; select bank0
  7624  0699  0844               	movf	Sensor_Service@sensor_adc1,w
  7625  069A  3197  2725  3186   	fcall	_Sensor_setSampled
  7626                           
  7627                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 312:                 callback_sampled(senso
      +                          r_adc1->sensor);
  7628  069D  0020               	movlb	0	; select bank0
  7629  069E  0844               	movf	Sensor_Service@sensor_adc1,w
  7630  069F  0086               	movwf	6
  7631  06A0  0187               	clrf	7
  7632  06A1  0801               	movf	1,w
  7633  06A2  00BF               	movwf	??_Sensor_Service
  7634  06A3  083F               	movf	??_Sensor_Service,w
  7635  06A4  00F1               	movwf	Sensor_DefaultCallback@sensor
  7636  06A5  3196  26AD  3186   	fcall	_Sensor_DefaultCallback
  7637  06A8                     l5810:	
  7638                           
  7639                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 314:             if(Sensor_isEnabled(sensor
      +                          _adc2))
  7640  06A8  0020               	movlb	0	; select bank0
  7641  06A9  0845               	movf	Sensor_Service@sensor_adc2,w
  7642  06AA  3197  27E0  3186   	fcall	_Sensor_isEnabled
  7643  06AD  3A00               	xorlw	0
  7644  06AE  1903               	skipnz
  7645  06AF  2EEC               	goto	l5824
  7646                           
  7647                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 315:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 316:                 if(!lowpowerActivated)
  7648  06B0  0020               	movlb	0	; select bank0
  7649  06B1  086A               	movf	_lowpowerActivated,w
  7650  06B2  1D03               	btfss	3,2
  7651  06B3  2EB8               	goto	l5816
  7652                           
  7653                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 317:                 {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 318:                     Sensor_RawSample_Update(sensor_adc2);
  7654  06B4  0845               	movf	Sensor_Service@sensor_adc2,w
  7655  06B5  318A  2271  3186   	fcall	_Sensor_RawSample_Update
  7656  06B8                     l5816:	
  7657                           
  7658                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 320:                 Sensor_setSampled(sens
      +                          or_adc2);
  7659  06B8  0020               	movlb	0	; select bank0
  7660  06B9  0845               	movf	Sensor_Service@sensor_adc2,w
  7661  06BA  3197  2725  3186   	fcall	_Sensor_setSampled
  7662                           
  7663                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 321:                 callback_sampled(senso
      +                          r_adc2->sensor);
  7664  06BD  0020               	movlb	0	; select bank0
  7665  06BE  0845               	movf	Sensor_Service@sensor_adc2,w
  7666  06BF  0086               	movwf	6
  7667  06C0  0187               	clrf	7
  7668  06C1  0801               	movf	1,w
  7669  06C2  00BF               	movwf	??_Sensor_Service
  7670  06C3  083F               	movf	??_Sensor_Service,w
  7671  06C4  00F1               	movwf	Sensor_DefaultCallback@sensor
  7672  06C5  3196  26AD  3186   	fcall	_Sensor_DefaultCallback
  7673  06C8  2EEC               	goto	l5824
  7674  06C9                     l5822:	
  7675  06C9  0843               	movf	Sensor_Service@error,w
  7676  06CA  00BF               	movwf	??_Sensor_Service
  7677  06CB  01C0               	clrf	??_Sensor_Service+1
  7678  06CC  1BBF               	btfsc	??_Sensor_Service,7
  7679  06CD  03C0               	decf	??_Sensor_Service+1,f
  7680                           
  7681                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  7682                           ; Switch size 1, requested type "simple"
  7683                           ; Number of cases is 2, Range of values is 0 to 255
  7684                           ; switch strategies available:
  7685                           ; Name         Instructions Cycles
  7686                           ; simple_byte            7     4 (average)
  7687                           ; jumptable            260     6 (fixed)
  7688                           ;	Chosen strategy is simple_byte
  7689  06CE  0840               	movf	??_Sensor_Service+1,w
  7690  06CF  3A00               	xorlw	0	; case 0
  7691  06D0  1903               	skipnz
  7692  06D1  2ED6               	goto	l6432
  7693  06D2  3AFF               	xorlw	255	; case 255
  7694  06D3  1903               	skipnz
  7695  06D4  2EDB               	goto	l6434
  7696  06D5  2EEC               	goto	l5824
  7697  06D6                     l6432:	
  7698                           
  7699                           ; Switch size 1, requested type "simple"
  7700                           ; Number of cases is 1, Range of values is 0 to 0
  7701                           ; switch strategies available:
  7702                           ; Name         Instructions Cycles
  7703                           ; simple_byte            4     3 (average)
  7704                           ; direct_byte            8     6 (fixed)
  7705                           ; jumptable            260     6 (fixed)
  7706                           ;	Chosen strategy is simple_byte
  7707  06D6  083F               	movf	??_Sensor_Service,w
  7708  06D7  3A00               	xorlw	0	; case 0
  7709  06D8  1903               	skipnz
  7710  06D9  2E89               	goto	l5800
  7711  06DA  2EEC               	goto	l5824
  7712  06DB                     l6434:	
  7713                           
  7714                           ; Switch size 1, requested type "simple"
  7715                           ; Number of cases is 5, Range of values is 251 to 255
  7716                           ; switch strategies available:
  7717                           ; Name         Instructions Cycles
  7718                           ; direct_byte           15     5 (fixed)
  7719                           ; simple_byte           16     9 (average)
  7720                           ; jumptable            263     9 (fixed)
  7721                           ;	Chosen strategy is simple_byte
  7722  06DB  083F               	movf	??_Sensor_Service,w
  7723  06DC  3AFB               	xorlw	251	; case 251
  7724  06DD  1903               	skipnz
  7725  06DE  2EEC               	goto	l5824
  7726  06DF  3A07               	xorlw	7	; case 252
  7727  06E0  1903               	skipnz
  7728  06E1  2EEC               	goto	l5824
  7729  06E2  3A01               	xorlw	1	; case 253
  7730  06E3  1903               	skipnz
  7731  06E4  2EEC               	goto	l5824
  7732  06E5  3A03               	xorlw	3	; case 254
  7733  06E6  1903               	skipnz
  7734  06E7  2EEC               	goto	l5824
  7735  06E8  3A01               	xorlw	1	; case 255
  7736  06E9  1903               	skipnz
  7737  06EA  2EEC               	goto	l5824
  7738  06EB  2EEC               	goto	l5824
  7739  06EC                     l5824:	
  7740                           
  7741                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 334:     return error;
  7742  06EC  0020               	movlb	0	; select bank0
  7743  06ED  0843               	movf	Sensor_Service@error,w
  7744  06EE  0008               	return
  7745  06EF                     __end_of_Sensor_Service:	
  7746                           
  7747                           	psect	text40
  7748  1725                     __ptext40:	
  7749 ;; *************** function _Sensor_setSampled *****************
  7750 ;; Defined at:
  7751 ;;		line 952 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7752 ;; Parameters:    Size  Location     Type
  7753 ;;  sensor          1    wreg     PTR struct .
  7754 ;;		 -> NULL(0), mtouch_sensor(9), 
  7755 ;; Auto vars:     Size  Location     Type
  7756 ;;  sensor          1    1[COMMON] PTR struct .
  7757 ;;		 -> NULL(0), mtouch_sensor(9), 
  7758 ;; Return value:  Size  Location     Type
  7759 ;;                  1    wreg      void 
  7760 ;; Registers used:
  7761 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7762 ;; Tracked objects:
  7763 ;;		On entry : 0/0
  7764 ;;		On exit  : 0/0
  7765 ;;		Unchanged: 0/0
  7766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7767 ;;      Params:         0       0       0       0       0       0       0       0
  7768 ;;      Locals:         1       0       0       0       0       0       0       0
  7769 ;;      Temps:          0       0       0       0       0       0       0       0
  7770 ;;      Totals:         1       0       0       0       0       0       0       0
  7771 ;;Total ram usage:        1 bytes
  7772 ;; Hardware stack levels used:    1
  7773 ;; Hardware stack levels required when called:    4
  7774 ;; This function calls:
  7775 ;;		Nothing
  7776 ;; This function is called by:
  7777 ;;		_Sensor_Service
  7778 ;; This function uses a non-reentrant model
  7779 ;;
  7780                           
  7781                           
  7782                           ;psect for function _Sensor_setSampled
  7783  1725                     _Sensor_setSampled:	
  7784                           
  7785                           ;incstack = 0
  7786                           ; Regs used in _Sensor_setSampled: [wreg+fsr1l+fsr1h+status,2+status,0]
  7787                           ;Sensor_setSampled@sensor stored from wreg
  7788  1725  00F1               	movwf	Sensor_setSampled@sensor
  7789                           
  7790                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 952: static __attribute__((inline)) void Se
      +                          nsor_setSampled(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 953
      +                          : {;mcc_generated_files/mtouch/mtouch_sensor.c: 954:     sensor->sampled = 1;
  7791  1726  0871               	movf	Sensor_setSampled@sensor,w
  7792  1727  3E08               	addlw	8
  7793  1728  0086               	movwf	6
  7794  1729  0187               	clrf	7
  7795  172A  1401               	bsf	1,0
  7796  172B  0008               	return
  7797  172C                     __end_of_Sensor_setSampled:	
  7798                           
  7799                           	psect	text41
  7800  0A71                     __ptext41:	
  7801 ;; *************** function _Sensor_RawSample_Update *****************
  7802 ;; Defined at:
  7803 ;;		line 785 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7804 ;; Parameters:    Size  Location     Type
  7805 ;;  sensor          1    wreg     PTR struct .
  7806 ;;		 -> NULL(0), mtouch_sensor(9), 
  7807 ;; Auto vars:     Size  Location     Type
  7808 ;;  sensor          1    7[COMMON] PTR struct .
  7809 ;;		 -> NULL(0), mtouch_sensor(9), 
  7810 ;;  adcIndex        1    6[COMMON] unsigned char 
  7811 ;; Return value:  Size  Location     Type
  7812 ;;                  1    wreg      void 
  7813 ;; Registers used:
  7814 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7815 ;; Tracked objects:
  7816 ;;		On entry : 0/0
  7817 ;;		On exit  : 0/0
  7818 ;;		Unchanged: 0/0
  7819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7820 ;;      Params:         0       0       0       0       0       0       0       0
  7821 ;;      Locals:         2       0       0       0       0       0       0       0
  7822 ;;      Temps:          1       0       0       0       0       0       0       0
  7823 ;;      Totals:         3       0       0       0       0       0       0       0
  7824 ;;Total ram usage:        3 bytes
  7825 ;; Hardware stack levels used:    1
  7826 ;; Hardware stack levels required when called:    5
  7827 ;; This function calls:
  7828 ;;		_Sensor_getScanGroupIndex
  7829 ;; This function is called by:
  7830 ;;		_Sensor_Service
  7831 ;; This function uses a non-reentrant model
  7832 ;;
  7833                           
  7834                           
  7835                           ;psect for function _Sensor_RawSample_Update
  7836  0A71                     _Sensor_RawSample_Update:	
  7837                           
  7838                           ;incstack = 0
  7839                           ; Regs used in _Sensor_RawSample_Update: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7840                           ;Sensor_RawSample_Update@sensor stored from wreg
  7841  0A71  00F7               	movwf	Sensor_RawSample_Update@sensor
  7842                           
  7843                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 785: static void Sensor_RawSample_Update(mt
      +                          ouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 786: {;mcc_generated_
      +                          files/mtouch/mtouch_sensor.c: 787:     uint8_t adcIndex = Sensor_getScanGroupIndex(senso
      +                          r);
  7844  0A72  0877               	movf	Sensor_RawSample_Update@sensor,w
  7845  0A73  318B  2362  318A   	fcall	_Sensor_getScanGroupIndex
  7846  0A76  00F5               	movwf	??_Sensor_RawSample_Update
  7847  0A77  0875               	movf	??_Sensor_RawSample_Update,w
  7848  0A78  00F6               	movwf	Sensor_RawSample_Update@adcIndex
  7849                           
  7850                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 789:     if (INTCONbits.GIE == (uint8_t)1)
  7851  0A79  1F8B               	btfss	11,7	;volatile
  7852  0A7A  2A8A               	goto	l4158
  7853                           
  7854                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 790:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 791:         INTCONbits.GIE = (uint8_t)0;
  7855  0A7B  138B               	bcf	11,7	;volatile
  7856                           
  7857                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 792:         sensor->rawSample = packet_sam
      +                          ple[adcIndex];
  7858  0A7C  3576               	lslf	Sensor_RawSample_Update@adcIndex,w
  7859  0A7D  3E53               	addlw	(low (_packet_sample| 0))& (0+255)
  7860  0A7E  0086               	movwf	6
  7861  0A7F  0187               	clrf	7
  7862  0A80  0877               	movf	Sensor_RawSample_Update@sensor,w
  7863  0A81  3E06               	addlw	6
  7864  0A82  0084               	movwf	4
  7865  0A83  0185               	clrf	5
  7866  0A84  3F40               	moviw [0]fsr1
  7867  0A85  3F80               	movwi [0]fsr0
  7868  0A86  3F41               	moviw [1]fsr1
  7869  0A87  3F81               	movwi [1]fsr0
  7870                           
  7871                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 793:         INTCONbits.GIE = (uint8_t)1;
  7872  0A88  178B               	bsf	11,7	;volatile
  7873                           
  7874                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 794:     }
  7875  0A89  0008               	return
  7876  0A8A                     l4158:	
  7877                           
  7878                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 796:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 797:         sensor->rawSample = packet_sample[adcIndex];
  7879  0A8A  3576               	lslf	Sensor_RawSample_Update@adcIndex,w
  7880  0A8B  3E53               	addlw	(low (_packet_sample| 0))& (0+255)
  7881  0A8C  0086               	movwf	6
  7882  0A8D  0187               	clrf	7
  7883  0A8E  0877               	movf	Sensor_RawSample_Update@sensor,w
  7884  0A8F  3E06               	addlw	6
  7885  0A90  0084               	movwf	4
  7886  0A91  0185               	clrf	5
  7887  0A92  3F40               	moviw [0]fsr1
  7888  0A93  3F80               	movwi [0]fsr0
  7889  0A94  3F41               	moviw [1]fsr1
  7890  0A95  3F81               	movwi [1]fsr0
  7891  0A96  0008               	return
  7892  0A97                     __end_of_Sensor_RawSample_Update:	
  7893                           
  7894                           	psect	text42
  7895  16AD                     __ptext42:	
  7896 ;; *************** function _Sensor_DefaultCallback *****************
  7897 ;; Defined at:
  7898 ;;		line 806 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7899 ;; Parameters:    Size  Location     Type
  7900 ;;  sensor          1    1[COMMON] enum E2854
  7901 ;; Auto vars:     Size  Location     Type
  7902 ;;		None
  7903 ;; Return value:  Size  Location     Type
  7904 ;;                  1    wreg      void 
  7905 ;; Registers used:
  7906 ;;		None
  7907 ;; Tracked objects:
  7908 ;;		On entry : 0/0
  7909 ;;		On exit  : 0/0
  7910 ;;		Unchanged: 0/0
  7911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7912 ;;      Params:         1       0       0       0       0       0       0       0
  7913 ;;      Locals:         0       0       0       0       0       0       0       0
  7914 ;;      Temps:          0       0       0       0       0       0       0       0
  7915 ;;      Totals:         1       0       0       0       0       0       0       0
  7916 ;;Total ram usage:        1 bytes
  7917 ;; Hardware stack levels used:    1
  7918 ;; Hardware stack levels required when called:    4
  7919 ;; This function calls:
  7920 ;;		Nothing
  7921 ;; This function is called by:
  7922 ;;		_Sensor_Service
  7923 ;; This function uses a non-reentrant model
  7924 ;;
  7925                           
  7926                           
  7927                           ;psect for function _Sensor_DefaultCallback
  7928  16AD                     _Sensor_DefaultCallback:	
  7929                           
  7930                           ;incstack = 0
  7931                           ; Regs used in _Sensor_DefaultCallback: []
  7932  16AD  0008               	return
  7933  16AE                     __end_of_Sensor_DefaultCallback:	
  7934                           
  7935                           	psect	text43
  7936  0EAB                     __ptext43:	
  7937 ;; *************** function _Sensor_Acquisition *****************
  7938 ;; Defined at:
  7939 ;;		line 355 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7940 ;; Parameters:    Size  Location     Type
  7941 ;;  sensor_adc1     1    wreg     PTR struct .
  7942 ;;		 -> NULL(0), 
  7943 ;;  sensor_adc2     1   27[BANK0 ] PTR struct .
  7944 ;;		 -> mtouch_sensor(9), 
  7945 ;; Auto vars:     Size  Location     Type
  7946 ;;  sensor_adc1     1   30[BANK0 ] PTR struct .
  7947 ;;		 -> NULL(0), 
  7948 ;;  retry           1   29[BANK0 ] unsigned char 
  7949 ;; Return value:  Size  Location     Type
  7950 ;;                  1    wreg      enum E2856
  7951 ;; Registers used:
  7952 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7953 ;; Tracked objects:
  7954 ;;		On entry : 0/0
  7955 ;;		On exit  : 0/0
  7956 ;;		Unchanged: 0/0
  7957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7958 ;;      Params:         0       1       0       0       0       0       0       0
  7959 ;;      Locals:         0       2       0       0       0       0       0       0
  7960 ;;      Temps:          0       1       0       0       0       0       0       0
  7961 ;;      Totals:         0       4       0       0       0       0       0       0
  7962 ;;Total ram usage:        4 bytes
  7963 ;; Hardware stack levels used:    1
  7964 ;; Hardware stack levels required when called:    8
  7965 ;; This function calls:
  7966 ;;		_Sensor_Acq_ExecutePacket
  7967 ;;		_Sensor_Scanfrequency_Evaluation
  7968 ;;		_Sensor_isActive
  7969 ;;		_Sensor_isCalibrated
  7970 ;;		_Sensor_postAcquisitionProcess
  7971 ;; This function is called by:
  7972 ;;		_Sensor_Service
  7973 ;; This function uses a non-reentrant model
  7974 ;;
  7975                           
  7976                           
  7977                           ;psect for function _Sensor_Acquisition
  7978  0EAB                     _Sensor_Acquisition:	
  7979                           
  7980                           ;incstack = 0
  7981                           ; Regs used in _Sensor_Acquisition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7982                           ;Sensor_Acquisition@sensor_adc1 stored from wreg
  7983  0EAB  0020               	movlb	0	; select bank0
  7984  0EAC  00BE               	movwf	Sensor_Acquisition@sensor_adc1
  7985                           
  7986                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 355: static enum mtouch_sensor_error Sensor
      +                          _Acquisition(mtouch_sensor_t* sensor_adc1,mtouch_sensor_t* sensor_adc2);mcc_generated_fi
      +                          les/mtouch/mtouch_sensor.c: 356: {;mcc_generated_files/mtouch/mtouch_sensor.c: 357:     
      +                          uint8_t retry = (uint8_t)5;
  7987  0EAD  3005               	movlw	5
  7988  0EAE  00BC               	movwf	??_Sensor_Acquisition
  7989  0EAF  083C               	movf	??_Sensor_Acquisition,w
  7990  0EB0  00BD               	movwf	Sensor_Acquisition@retry
  7991                           
  7992                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 360:     if (sensor_adc1 == ((void*)0) && s
      +                          ensor_adc2 == ((void*)0))
  7993  0EB1  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  7994  0EB2  1D03               	btfss	3,2
  7995  0EB3  2EC1               	goto	l5622
  7996  0EB4  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  7997  0EB5  1D03               	btfss	3,2
  7998  0EB6  2EC1               	goto	l5622
  7999                           
  8000                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 361:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 362:         return MTOUCH_SENSOR_ERROR_invalid_index;
  8001  0EB7  30FF               	movlw	255
  8002  0EB8  0008               	return
  8003  0EB9                     l5616:	
  8004                           
  8005                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 371:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 372:         retry--;
  8006  0EB9  3001               	movlw	1
  8007  0EBA  0020               	movlb	0	; select bank0
  8008  0EBB  02BD               	subwf	Sensor_Acquisition@retry,f
  8009                           
  8010                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 373:         if(retry == 0)
  8011  0EBC  083D               	movf	Sensor_Acquisition@retry,w
  8012  0EBD  1D03               	btfss	3,2
  8013  0EBE  2EC1               	goto	l5622
  8014                           
  8015                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 374:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 375:             return MTOUCH_SENSOR_ERROR_tooManyRetries;
  8016  0EBF  30FC               	movlw	252
  8017  0EC0  0008               	return
  8018  0EC1                     l5622:	
  8019                           
  8020                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 370:     while(Sensor_Acq_ExecutePacket(sen
      +                          sor_adc1,sensor_adc2))
  8021  0EC1  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  8022  0EC2  00BC               	movwf	??_Sensor_Acquisition
  8023  0EC3  083C               	movf	??_Sensor_Acquisition,w
  8024  0EC4  00FB               	movwf	Sensor_Acq_ExecutePacket@sensor_adc2
  8025  0EC5  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  8026  0EC6  3182  22B6  318E   	fcall	_Sensor_Acq_ExecutePacket
  8027  0EC9  3A00               	xorlw	0
  8028  0ECA  1D03               	skipz
  8029  0ECB  2EB9               	goto	l5616
  8030                           
  8031                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 379:     if(sensor_adc1 != ((void*)0))
  8032  0ECC  0020               	movlb	0	; select bank0
  8033  0ECD  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  8034  0ECE  1903               	btfsc	3,2
  8035  0ECF  2ED4               	goto	l5628
  8036                           
  8037                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 380:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 381:         Sensor_postAcquisitionProcess(sensor_adc1);
  8038  0ED0  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  8039  0ED1  318C  2455  318E   	fcall	_Sensor_postAcquisitionProcess
  8040  0ED4                     l5628:	
  8041                           
  8042                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 384:     if(sensor_adc2 !=((void*)0))
  8043  0ED4  0020               	movlb	0	; select bank0
  8044  0ED5  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  8045  0ED6  1903               	btfsc	3,2
  8046  0ED7  2EDC               	goto	l5632
  8047                           
  8048                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 385:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 386:         Sensor_postAcquisitionProcess(sensor_adc2);
  8049  0ED8  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  8050  0ED9  318C  2455  318E   	fcall	_Sensor_postAcquisitionProcess
  8051  0EDC                     l5632:	
  8052                           
  8053                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 389:     if((Sensor_isActive(sensor_adc1) &
      +                          & Sensor_isCalibrated(sensor_adc1))
  8054  0EDC  0020               	movlb	0	; select bank0
  8055  0EDD  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  8056  0EDE  3197  277B  318E   	fcall	_Sensor_isActive
  8057  0EE1  3A00               	xorlw	0
  8058  0EE2  1903               	skipnz
  8059  0EE3  2EEC               	goto	l5636
  8060  0EE4  0020               	movlb	0	; select bank0
  8061  0EE5  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  8062  0EE6  3197  2743  318E   	fcall	_Sensor_isCalibrated
  8063  0EE9  3A00               	xorlw	0
  8064  0EEA  1D03               	skipz
  8065  0EEB  2EFC               	goto	l5640
  8066  0EEC                     l5636:	
  8067  0EEC  0020               	movlb	0	; select bank0
  8068  0EED  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  8069  0EEE  3197  277B  318E   	fcall	_Sensor_isActive
  8070  0EF1  3A00               	xorlw	0
  8071  0EF2  1903               	skipnz
  8072  0EF3  2F05               	goto	l5644
  8073  0EF4  0020               	movlb	0	; select bank0
  8074  0EF5  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  8075  0EF6  3197  2743  318E   	fcall	_Sensor_isCalibrated
  8076  0EF9  3A00               	xorlw	0
  8077  0EFA  1903               	skipnz
  8078  0EFB  2F05               	goto	l5644
  8079  0EFC                     l5640:	
  8080                           
  8081                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 391:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 392:         return Sensor_Scanfrequency_Evaluation(sensor_adc1,sensor_adc2)
      +                          ;
  8082  0EFC  0020               	movlb	0	; select bank0
  8083  0EFD  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  8084  0EFE  00BC               	movwf	??_Sensor_Acquisition
  8085  0EFF  083C               	movf	??_Sensor_Acquisition,w
  8086  0F00  00AE               	movwf	Sensor_Scanfrequency_Evaluation@sensor_adc2
  8087  0F01  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  8088  0F02  318F  2707         	fcall	_Sensor_Scanfrequency_Evaluation
  8089  0F04  0008               	return
  8090  0F05                     l5644:	
  8091                           
  8092                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 395:     return MTOUCH_SENSOR_ERROR_none;
  8093  0F05  3000               	movlw	0
  8094  0F06  0008               	return
  8095  0F07                     __end_of_Sensor_Acquisition:	
  8096                           
  8097                           	psect	text44
  8098  0C55                     __ptext44:	
  8099 ;; *************** function _Sensor_postAcquisitionProcess *****************
  8100 ;; Defined at:
  8101 ;;		line 398 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8102 ;; Parameters:    Size  Location     Type
  8103 ;;  sensor          1    wreg     PTR struct .
  8104 ;;		 -> NULL(0), mtouch_sensor(9), 
  8105 ;; Auto vars:     Size  Location     Type
  8106 ;;  sensor          1    9[COMMON] PTR struct .
  8107 ;;		 -> NULL(0), mtouch_sensor(9), 
  8108 ;;  deviation       2    6[COMMON] unsigned short 
  8109 ;;  adcIndex        1    8[COMMON] unsigned char 
  8110 ;; Return value:  Size  Location     Type
  8111 ;;                  1    wreg      void 
  8112 ;; Registers used:
  8113 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8114 ;; Tracked objects:
  8115 ;;		On entry : 0/0
  8116 ;;		On exit  : 0/0
  8117 ;;		Unchanged: 0/0
  8118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8119 ;;      Params:         0       0       0       0       0       0       0       0
  8120 ;;      Locals:         4       0       0       0       0       0       0       0
  8121 ;;      Temps:          1       0       0       0       0       0       0       0
  8122 ;;      Totals:         5       0       0       0       0       0       0       0
  8123 ;;Total ram usage:        5 bytes
  8124 ;; Hardware stack levels used:    1
  8125 ;; Hardware stack levels required when called:    5
  8126 ;; This function calls:
  8127 ;;		_Sensor_getScanGroupIndex
  8128 ;;		_Sensor_isEnabled
  8129 ;;		_Sensor_setActive
  8130 ;;		_Sensor_setInactive
  8131 ;;		_abs
  8132 ;; This function is called by:
  8133 ;;		_Sensor_Acquisition
  8134 ;; This function uses a non-reentrant model
  8135 ;;
  8136                           
  8137                           
  8138                           ;psect for function _Sensor_postAcquisitionProcess
  8139  0C55                     _Sensor_postAcquisitionProcess:	
  8140                           
  8141                           ;incstack = 0
  8142                           ; Regs used in _Sensor_postAcquisitionProcess: [wreg-fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  8143                           ;Sensor_postAcquisitionProcess@sensor stored from wreg
  8144  0C55  00F9               	movwf	Sensor_postAcquisitionProcess@sensor
  8145                           
  8146                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 398: static void Sensor_postAcquisitionProc
      +                          ess(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 399: {;mcc_gene
      +                          rated_files/mtouch/mtouch_sensor.c: 400:     mtouch_sensor_sample_t deviation;;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 401:     uint8_t adcIndex = Sensor_getScanGroupIndex(
      +                          sensor);
  8147  0C56  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  8148  0C57  318B  2362  318C   	fcall	_Sensor_getScanGroupIndex
  8149  0C5A  00F5               	movwf	??_Sensor_postAcquisitionProcess
  8150  0C5B  0875               	movf	??_Sensor_postAcquisitionProcess,w
  8151  0C5C  00F8               	movwf	Sensor_postAcquisitionProcess@adcIndex
  8152                           
  8153                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 403:     if(Sensor_isEnabled(sensor))
  8154  0C5D  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  8155  0C5E  3197  27E0  318C   	fcall	_Sensor_isEnabled
  8156  0C61  3A00               	xorlw	0
  8157  0C62  1903               	skipnz
  8158  0C63  2C7B               	goto	l3986
  8159                           
  8160                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 404:         deviation = (mtouch_sensor_sam
      +                          ple_t)abs(packet_sample[adcIndex] - sensor->rawSample);
  8161  0C64  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  8162  0C65  3E06               	addlw	6
  8163  0C66  0086               	movwf	6
  8164  0C67  0187               	clrf	7
  8165  0C68  3578               	lslf	Sensor_postAcquisitionProcess@adcIndex,w
  8166  0C69  3E53               	addlw	(low (_packet_sample| 0))& (0+255)
  8167  0C6A  0084               	movwf	4
  8168  0C6B  0185               	clrf	5
  8169  0C6C  3F40               	moviw [0]fsr1
  8170  0C6D  0200               	subwf	0,w
  8171  0C6E  00F1               	movwf	abs@a
  8172  0C6F  3101               	addfsr 0,1
  8173  0C70  3F41               	moviw [1]fsr1
  8174  0C71  3B00               	subwfb	0,w
  8175  0C72  00F2               	movwf	abs@a+1
  8176  0C73  3188  20DC  318C   	fcall	_abs
  8177  0C76  0872               	movf	?_abs+1,w
  8178  0C77  00F7               	movwf	Sensor_postAcquisitionProcess@deviation+1
  8179  0C78  0871               	movf	?_abs,w
  8180  0C79  00F6               	movwf	Sensor_postAcquisitionProcess@deviation
  8181  0C7A  2C7D               	goto	l3988
  8182  0C7B                     l3986:	
  8183                           
  8184                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 406:         deviation = 0;
  8185  0C7B  01F6               	clrf	Sensor_postAcquisitionProcess@deviation
  8186  0C7C  01F7               	clrf	Sensor_postAcquisitionProcess@deviation+1
  8187  0C7D                     l3988:	
  8188                           
  8189                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 408:     if(deviation > 100u)
  8190  0C7D  3000               	movlw	0
  8191  0C7E  0277               	subwf	Sensor_postAcquisitionProcess@deviation+1,w
  8192  0C7F  3065               	movlw	101
  8193  0C80  1903               	skipnz
  8194  0C81  0276               	subwf	Sensor_postAcquisitionProcess@deviation,w
  8195  0C82  1C03               	skipc
  8196  0C83  2C88               	goto	l3992
  8197                           
  8198                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 409:         Sensor_setActive(sensor);
  8199  0C84  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  8200  0C85  3197  2717         	fcall	_Sensor_setActive
  8201  0C87  0008               	return
  8202  0C88                     l3992:	
  8203                           
  8204                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 411:         Sensor_setInactive(sensor);
  8205  0C88  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  8206  0C89  3197  271E         	fcall	_Sensor_setInactive
  8207  0C8B  0008               	return
  8208  0C8C                     __end_of_Sensor_postAcquisitionProcess:	
  8209                           
  8210                           	psect	text45
  8211  171E                     __ptext45:	
  8212 ;; *************** function _Sensor_setInactive *****************
  8213 ;; Defined at:
  8214 ;;		line 860 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8215 ;; Parameters:    Size  Location     Type
  8216 ;;  sensor          1    wreg     PTR struct .
  8217 ;;		 -> NULL(0), mtouch_sensor(9), 
  8218 ;; Auto vars:     Size  Location     Type
  8219 ;;  sensor          1    1[COMMON] PTR struct .
  8220 ;;		 -> NULL(0), mtouch_sensor(9), 
  8221 ;; Return value:  Size  Location     Type
  8222 ;;                  1    wreg      void 
  8223 ;; Registers used:
  8224 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8225 ;; Tracked objects:
  8226 ;;		On entry : 0/0
  8227 ;;		On exit  : 0/0
  8228 ;;		Unchanged: 0/0
  8229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8230 ;;      Params:         0       0       0       0       0       0       0       0
  8231 ;;      Locals:         1       0       0       0       0       0       0       0
  8232 ;;      Temps:          0       0       0       0       0       0       0       0
  8233 ;;      Totals:         1       0       0       0       0       0       0       0
  8234 ;;Total ram usage:        1 bytes
  8235 ;; Hardware stack levels used:    1
  8236 ;; Hardware stack levels required when called:    4
  8237 ;; This function calls:
  8238 ;;		Nothing
  8239 ;; This function is called by:
  8240 ;;		_Sensor_postAcquisitionProcess
  8241 ;; This function uses a non-reentrant model
  8242 ;;
  8243                           
  8244                           
  8245                           ;psect for function _Sensor_setInactive
  8246  171E                     _Sensor_setInactive:	
  8247                           
  8248                           ;incstack = 0
  8249                           ; Regs used in _Sensor_setInactive: [wreg+fsr1l+fsr1h+status,2+status,0]
  8250                           ;Sensor_setInactive@sensor stored from wreg
  8251  171E  00F1               	movwf	Sensor_setInactive@sensor
  8252                           
  8253                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 860: static __attribute__((inline)) void Se
      +                          nsor_setInactive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 86
      +                          1: {;mcc_generated_files/mtouch/mtouch_sensor.c: 862:     sensor->active = 0;
  8254  171F  0871               	movf	Sensor_setInactive@sensor,w
  8255  1720  3E08               	addlw	8
  8256  1721  0086               	movwf	6
  8257  1722  0187               	clrf	7
  8258  1723  1081               	bcf	1,1
  8259  1724  0008               	return
  8260  1725                     __end_of_Sensor_setInactive:	
  8261                           
  8262                           	psect	text46
  8263  1717                     __ptext46:	
  8264 ;; *************** function _Sensor_setActive *****************
  8265 ;; Defined at:
  8266 ;;		line 855 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8267 ;; Parameters:    Size  Location     Type
  8268 ;;  sensor          1    wreg     PTR struct .
  8269 ;;		 -> NULL(0), mtouch_sensor(9), 
  8270 ;; Auto vars:     Size  Location     Type
  8271 ;;  sensor          1    1[COMMON] PTR struct .
  8272 ;;		 -> NULL(0), mtouch_sensor(9), 
  8273 ;; Return value:  Size  Location     Type
  8274 ;;                  1    wreg      void 
  8275 ;; Registers used:
  8276 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8277 ;; Tracked objects:
  8278 ;;		On entry : 0/0
  8279 ;;		On exit  : 0/0
  8280 ;;		Unchanged: 0/0
  8281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8282 ;;      Params:         0       0       0       0       0       0       0       0
  8283 ;;      Locals:         1       0       0       0       0       0       0       0
  8284 ;;      Temps:          0       0       0       0       0       0       0       0
  8285 ;;      Totals:         1       0       0       0       0       0       0       0
  8286 ;;Total ram usage:        1 bytes
  8287 ;; Hardware stack levels used:    1
  8288 ;; Hardware stack levels required when called:    4
  8289 ;; This function calls:
  8290 ;;		Nothing
  8291 ;; This function is called by:
  8292 ;;		_Sensor_postAcquisitionProcess
  8293 ;; This function uses a non-reentrant model
  8294 ;;
  8295                           
  8296                           
  8297                           ;psect for function _Sensor_setActive
  8298  1717                     _Sensor_setActive:	
  8299                           
  8300                           ;incstack = 0
  8301                           ; Regs used in _Sensor_setActive: [wreg+fsr1l+fsr1h+status,2+status,0]
  8302                           ;Sensor_setActive@sensor stored from wreg
  8303  1717  00F1               	movwf	Sensor_setActive@sensor
  8304                           
  8305                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 855: static __attribute__((inline)) void Se
      +                          nsor_setActive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 856:
      +                           {;mcc_generated_files/mtouch/mtouch_sensor.c: 857:     sensor->active = 1;
  8306  1718  0871               	movf	Sensor_setActive@sensor,w
  8307  1719  3E08               	addlw	8
  8308  171A  0086               	movwf	6
  8309  171B  0187               	clrf	7
  8310  171C  1481               	bsf	1,1
  8311  171D  0008               	return
  8312  171E                     __end_of_Sensor_setActive:	
  8313                           
  8314                           	psect	text47
  8315  0F07                     __ptext47:	
  8316 ;; *************** function _Sensor_Scanfrequency_Evaluation *****************
  8317 ;; Defined at:
  8318 ;;		line 716 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8319 ;; Parameters:    Size  Location     Type
  8320 ;;  sensor_adc1     1    wreg     PTR struct .
  8321 ;;		 -> NULL(0), 
  8322 ;;  sensor_adc2     1   14[BANK0 ] PTR struct .
  8323 ;;		 -> mtouch_sensor(9), 
  8324 ;; Auto vars:     Size  Location     Type
  8325 ;;  sensor_adc1     1   19[BANK0 ] PTR struct .
  8326 ;;		 -> NULL(0), 
  8327 ;;  best_packet_    4   22[BANK0 ] unsigned short [2]
  8328 ;;  packet_noise    2   17[BANK0 ] unsigned short 
  8329 ;;  i               1   26[BANK0 ] unsigned char 
  8330 ;;  retry           1   21[BANK0 ] unsigned char 
  8331 ;;  best_sample_    1   20[BANK0 ] unsigned char 
  8332 ;; Return value:  Size  Location     Type
  8333 ;;                  1    wreg      enum E2856
  8334 ;; Registers used:
  8335 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8336 ;; Tracked objects:
  8337 ;;		On entry : 0/0
  8338 ;;		On exit  : 0/0
  8339 ;;		Unchanged: 0/0
  8340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8341 ;;      Params:         0       1       0       0       0       0       0       0
  8342 ;;      Locals:         0      10       0       0       0       0       0       0
  8343 ;;      Temps:          0       2       0       0       0       0       0       0
  8344 ;;      Totals:         0      13       0       0       0       0       0       0
  8345 ;;Total ram usage:       13 bytes
  8346 ;; Hardware stack levels used:    1
  8347 ;; Hardware stack levels required when called:    7
  8348 ;; This function calls:
  8349 ;;		_Sensor_Acq_ExecutePacket
  8350 ;; This function is called by:
  8351 ;;		_Sensor_Acquisition
  8352 ;; This function uses a non-reentrant model
  8353 ;;
  8354                           
  8355                           
  8356                           ;psect for function _Sensor_Scanfrequency_Evaluation
  8357  0F07                     _Sensor_Scanfrequency_Evaluation:	
  8358                           
  8359                           ;incstack = 0
  8360                           ; Regs used in _Sensor_Scanfrequency_Evaluation: [wreg-fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  8361                           ;Sensor_Scanfrequency_Evaluation@sensor_adc1 stored from wreg
  8362  0F07  0020               	movlb	0	; select bank0
  8363  0F08  00B3               	movwf	Sensor_Scanfrequency_Evaluation@sensor_adc1
  8364                           
  8365                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 716: static enum mtouch_sensor_error Sensor
      +                          _Scanfrequency_Evaluation(mtouch_sensor_t* sensor_adc1,mtouch_sensor_t* sensor_adc2);mcc
      +                          _generated_files/mtouch/mtouch_sensor.c: 717: {;mcc_generated_files/mtouch/mtouch_sensor
      +                          .c: 718:     uint8_t i;;mcc_generated_files/mtouch/mtouch_sensor.c: 719:     const mtouc
      +                          h_sensor_sampleperiod_t frequency_hop[5] = {0,13,28,30,23};;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 720:     mtouch_sensor_packetnoise_t packet_noise_Max;;mcc_generated_fil
      +                          es/mtouch/mtouch_sensor.c: 721:     mtouch_sensor_sampleperiod_t best_sample_period;
  8366  0F09  085C               	movf	_packet_noise+1,w
  8367  0F0A  00B0               	movwf	??_Sensor_Scanfrequency_Evaluation+1
  8368  0F0B  085B               	movf	_packet_noise,w
  8369  0F0C  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  8370  0F0D  36B0               	lsrf	??_Sensor_Scanfrequency_Evaluation+1,f
  8371  0F0E  0CAF               	rrf	??_Sensor_Scanfrequency_Evaluation,f
  8372  0F0F  36B0               	lsrf	??_Sensor_Scanfrequency_Evaluation+1,f
  8373  0F10  0CAF               	rrf	??_Sensor_Scanfrequency_Evaluation,f
  8374  0F11  085B               	movf	_packet_noise,w
  8375  0F12  072F               	addwf	??_Sensor_Scanfrequency_Evaluation,w
  8376  0F13  00B1               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max
  8377  0F14  085C               	movf	_packet_noise+1,w
  8378  0F15  3D30               	addwfc	??_Sensor_Scanfrequency_Evaluation+1,w
  8379  0F16  00B2               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1
  8380                           
  8381                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 726:     best_sample_period = sample_period
      +                          ;
  8382  0F17  086E               	movf	_sample_period,w
  8383  0F18  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  8384  0F19  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  8385  0F1A  00B4               	movwf	Sensor_Scanfrequency_Evaluation@best_sample_period
  8386                           
  8387                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 727:     best_packet_sample[0] = packet_sam
      +                          ple[0];
  8388  0F1B  0854               	movf	_packet_sample+1,w
  8389  0F1C  00B7               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1
  8390  0F1D  0853               	movf	_packet_sample,w
  8391  0F1E  00B6               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample
  8392                           
  8393                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 728:     best_packet_sample[1] = packet_sam
      +                          ple[1];
  8394  0F1F  0856               	movf	_packet_sample+3,w
  8395  0F20  00B9               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3
  8396  0F21  0855               	movf	_packet_sample+2,w
  8397  0F22  00B8               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2
  8398                           
  8399                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 730:     for(i=(uint8_t)0;i<(uint8_t)5;i++)
  8400  0F23  01BA               	clrf	Sensor_Scanfrequency_Evaluation@i
  8401  0F24                     l5534:	
  8402                           
  8403                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 731:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 732:         sample_period += frequency_hop[i];
  8404  0F24  083A               	movf	Sensor_Scanfrequency_Evaluation@i,w
  8405  0F25  3E0F               	addlw	low (Sensor_Scanfrequency_Evaluation@frequency_hop| (0+32768))
  8406  0F26  0084               	movwf	4
  8407  0F27  3098               	movlw	high (Sensor_Scanfrequency_Evaluation@frequency_hop| (0+32768))
  8408  0F28  1803               	skipnc
  8409  0F29  3E01               	addlw	1
  8410  0F2A  0085               	movwf	5
  8411  0F2B  0800               	movf	0,w	;code access
  8412  0F2C  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  8413  0F2D  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  8414  0F2E  07EE               	addwf	_sample_period,f
  8415                           
  8416                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 733:         if(sample_period > ((mtouch_se
      +                          nsor_sampleperiod_t)255))
  8417  0F2F  30AE               	movlw	174
  8418  0F30  026E               	subwf	_sample_period,w
  8419  0F31  1803               	skipnc
  8420  0F32  2F37               	goto	l5542
  8421                           
  8422                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 739:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 740:             sample_period += ((mtouch_sensor_sampleperiod_t)(mtouch
      +                          _sensor_time_t)32 +(mtouch_sensor_time_t)32 +(mtouch_sensor_time_t)110);
  8423  0F33  30AE               	movlw	174
  8424  0F34  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  8425  0F35  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  8426  0F36  07EE               	addwf	_sample_period,f
  8427  0F37                     l5542:	
  8428                           
  8429                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 743:         retry = (uint8_t)5;
  8430  0F37  3005               	movlw	5
  8431  0F38  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  8432  0F39  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  8433  0F3A  00B5               	movwf	Sensor_Scanfrequency_Evaluation@retry
  8434  0F3B                     l5550:	
  8435                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 745:         while(Sensor_Acq_ExecutePacket
      +                          (sensor_adc1,sensor_adc2))
  8436                           
  8437                           
  8438                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 745:         while(Sensor_Acq_ExecutePacket
      +                          (sensor_adc1,sensor_adc2))
  8439  0F3B  082E               	movf	Sensor_Scanfrequency_Evaluation@sensor_adc2,w
  8440  0F3C  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  8441  0F3D  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  8442  0F3E  00FB               	movwf	Sensor_Acq_ExecutePacket@sensor_adc2
  8443  0F3F  0833               	movf	Sensor_Scanfrequency_Evaluation@sensor_adc1,w
  8444  0F40  3182  22B6  318F   	fcall	_Sensor_Acq_ExecutePacket
  8445  0F43  3A00               	xorlw	0
  8446  0F44  1903               	btfsc	3,2
  8447  0F45  2F4E               	goto	l5552
  8448                           
  8449                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 746:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 747:             retry--;
  8450  0F46  3001               	movlw	1
  8451  0F47  0020               	movlb	0	; select bank0
  8452  0F48  02B5               	subwf	Sensor_Scanfrequency_Evaluation@retry,f
  8453                           
  8454                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 748:             if(retry == 0)
  8455  0F49  0835               	movf	Sensor_Scanfrequency_Evaluation@retry,w
  8456  0F4A  1D03               	btfss	3,2
  8457  0F4B  2F3B               	goto	l5550
  8458                           
  8459                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 749:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 750:                 return MTOUCH_SENSOR_ERROR_tooManyRetries;
  8460  0F4C  30FC               	movlw	252
  8461  0F4D  0008               	return
  8462  0F4E                     l5552:	
  8463                           
  8464                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 754:         if(packet_noise_Max < packet_n
      +                          oise)
  8465  0F4E  0020               	movlb	0	; select bank0
  8466  0F4F  085C               	movf	_packet_noise+1,w
  8467  0F50  0232               	subwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1,w
  8468  0F51  1D03               	skipz
  8469  0F52  2F55               	goto	u4525
  8470  0F53  085B               	movf	_packet_noise,w
  8471  0F54  0231               	subwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max,w
  8472  0F55                     u4525:	
  8473  0F55  1803               	skipnc
  8474  0F56  2F67               	goto	l5556
  8475                           
  8476                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 755:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 756:             packet_noise_Max = packet_noise;
  8477  0F57  085C               	movf	_packet_noise+1,w
  8478  0F58  00B2               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1
  8479  0F59  085B               	movf	_packet_noise,w
  8480  0F5A  00B1               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max
  8481                           
  8482                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 757:             best_sample_period = sampl
      +                          e_period;
  8483  0F5B  086E               	movf	_sample_period,w
  8484  0F5C  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  8485  0F5D  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  8486  0F5E  00B4               	movwf	Sensor_Scanfrequency_Evaluation@best_sample_period
  8487                           
  8488                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 758:             best_packet_sample[0] = pa
      +                          cket_sample[0];
  8489  0F5F  0854               	movf	_packet_sample+1,w
  8490  0F60  00B7               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1
  8491  0F61  0853               	movf	_packet_sample,w
  8492  0F62  00B6               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample
  8493                           
  8494                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 759:             best_packet_sample[1] = pa
      +                          cket_sample[1];
  8495  0F63  0856               	movf	_packet_sample+3,w
  8496  0F64  00B9               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3
  8497  0F65  0855               	movf	_packet_sample+2,w
  8498  0F66  00B8               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2
  8499  0F67                     l5556:	
  8500                           
  8501                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 761:     }
  8502  0F67  3001               	movlw	1
  8503  0F68  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  8504  0F69  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  8505  0F6A  07BA               	addwf	Sensor_Scanfrequency_Evaluation@i,f
  8506  0F6B  3005               	movlw	5
  8507  0F6C  023A               	subwf	Sensor_Scanfrequency_Evaluation@i,w
  8508  0F6D  1C03               	skipc
  8509  0F6E  2F24               	goto	l5534
  8510                           
  8511                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 763:     sample_period = best_sample_period
      +                          ;
  8512  0F6F  0834               	movf	Sensor_Scanfrequency_Evaluation@best_sample_period,w
  8513  0F70  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  8514  0F71  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  8515  0F72  00EE               	movwf	_sample_period
  8516                           
  8517                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 764:     packet_sample[0] = best_packet_sam
      +                          ple[0];
  8518  0F73  0837               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1,w
  8519  0F74  00D4               	movwf	_packet_sample+1
  8520  0F75  0836               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample,w
  8521  0F76  00D3               	movwf	_packet_sample
  8522                           
  8523                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 765:     packet_sample[1] = best_packet_sam
      +                          ple[1];
  8524  0F77  0839               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3,w
  8525  0F78  00D6               	movwf	_packet_sample+3
  8526  0F79  0838               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2,w
  8527  0F7A  00D5               	movwf	_packet_sample+2
  8528                           
  8529                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 767:     return MTOUCH_SENSOR_ERROR_none;
  8530  0F7B  3000               	movlw	0
  8531  0F7C  0008               	return
  8532  0F7D                     __end_of_Sensor_Scanfrequency_Evaluation:	
  8533                           
  8534                           	psect	text48
  8535  02B6                     __ptext48:	
  8536 ;; *************** function _Sensor_Acq_ExecutePacket *****************
  8537 ;; Defined at:
  8538 ;;		line 454 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8539 ;; Parameters:    Size  Location     Type
  8540 ;;  sensor_adc1     1    wreg     PTR struct .
  8541 ;;		 -> NULL(0), 
  8542 ;;  sensor_adc2     1   11[COMMON] PTR struct .
  8543 ;;		 -> mtouch_sensor(9), 
  8544 ;; Auto vars:     Size  Location     Type
  8545 ;;  sensor_adc1     1   13[BANK0 ] PTR struct .
  8546 ;;		 -> NULL(0), 
  8547 ;;  last_b          2   10[BANK0 ] unsigned short 
  8548 ;;  last_a          2    8[BANK0 ] unsigned short 
  8549 ;;  packet_count    1   12[BANK0 ] unsigned char 
  8550 ;;  activeSensor    1    7[BANK0 ] unsigned char 
  8551 ;;  ADxIF_flag      1    6[BANK0 ] unsigned char 
  8552 ;;  sensor2Force    1    5[BANK0 ] unsigned char 
  8553 ;;  sensor1Force    1    4[BANK0 ] unsigned char 
  8554 ;;  AD2CON2_temp    1    3[BANK0 ] unsigned char 
  8555 ;;  AD1CON2_temp    1    2[BANK0 ] unsigned char 
  8556 ;;  ADCOMCON_tem    1    1[BANK0 ] unsigned char 
  8557 ;; Return value:  Size  Location     Type
  8558 ;;                  1    wreg      enum E2856
  8559 ;; Registers used:
  8560 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8561 ;; Tracked objects:
  8562 ;;		On entry : 0/0
  8563 ;;		On exit  : 0/0
  8564 ;;		Unchanged: 0/0
  8565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8566 ;;      Params:         1       0       0       0       0       0       0       0
  8567 ;;      Locals:         0      13       0       0       0       0       0       0
  8568 ;;      Temps:          0       1       0       0       0       0       0       0
  8569 ;;      Totals:         1      14       0       0       0       0       0       0
  8570 ;;Total ram usage:       15 bytes
  8571 ;; Hardware stack levels used:    1
  8572 ;; Hardware stack levels required when called:    6
  8573 ;; This function calls:
  8574 ;;		_MTOUCH_Sensor_Scan_Initialize
  8575 ;;		_Sensor_autoCalibration
  8576 ;;		_Sensor_isActive
  8577 ;;		_Sensor_isCalibrated
  8578 ;;		_Sensor_isEnabled
  8579 ;;		_Sensor_loadADCSettings
  8580 ;;		_TMR2_LoadPeriodRegister
  8581 ;;		_TMR2_StartTimer
  8582 ;;		_TMR2_StopTimer
  8583 ;;		_abs
  8584 ;; This function is called by:
  8585 ;;		_Sensor_Acquisition
  8586 ;;		_Sensor_Scanfrequency_Evaluation
  8587 ;; This function uses a non-reentrant model
  8588 ;;
  8589                           
  8590                           
  8591                           ;psect for function _Sensor_Acq_ExecutePacket
  8592  02B6                     _Sensor_Acq_ExecutePacket:	
  8593                           
  8594                           ;incstack = 0
  8595                           ; Regs used in _Sensor_Acq_ExecutePacket: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8596                           ;Sensor_Acq_ExecutePacket@sensor_adc1 stored from wreg
  8597  02B6  0020               	movlb	0	; select bank0
  8598  02B7  00AD               	movwf	Sensor_Acq_ExecutePacket@sensor_adc1
  8599                           
  8600                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 457:     mtouch_sensor_packetcounter_t pack
      +                          et_counter;;mcc_generated_files/mtouch/mtouch_sensor.c: 459:     mtouch_sensor_adcsample
      +                          _t last_a = 0;
  8601  02B8  01A8               	clrf	Sensor_Acq_ExecutePacket@last_a
  8602  02B9  01A9               	clrf	Sensor_Acq_ExecutePacket@last_a+1
  8603                           
  8604                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 460:     mtouch_sensor_adcsample_t last_b =
      +                           0;
  8605  02BA  01AA               	clrf	Sensor_Acq_ExecutePacket@last_b
  8606  02BB  01AB               	clrf	Sensor_Acq_ExecutePacket@last_b+1
  8607                           
  8608                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 461:     uint8_t activeSensor = 0;
  8609  02BC  01A7               	clrf	Sensor_Acq_ExecutePacket@activeSensor
  8610                           
  8611                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 463:     uint8_t ADCOMCON_temp;;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 464:     uint8_t AD1CON2_temp,AD2CON2_temp;;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 470:     uint8_t sensor1ForceEnabled = 0, sensor2ForceE
      +                          nabled = 0;
  8612  02BD  01A4               	clrf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled
  8613  02BE  01A5               	clrf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled
  8614                           
  8615                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 471:     if(sensor_adc1 != ((void*)0) && se
      +                          nsor_adc2 != ((void*)0))
  8616  02BF  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8617  02C0  1903               	btfsc	3,2
  8618  02C1  2AF5               	goto	l5314
  8619  02C2  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8620  02C3  1903               	btfsc	3,2
  8621  02C4  2AF5               	goto	l5314
  8622                           
  8623                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 472:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 473:         if (sensor_adc1->enabled == 0 && sensor_adc2->enabled == 1)
  8624  02C5  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8625  02C6  3E08               	addlw	8
  8626  02C7  0086               	movwf	6
  8627  02C8  0187               	clrf	7
  8628  02C9  1981               	btfsc	1,3
  8629  02CA  2AD9               	goto	l5296
  8630  02CB  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8631  02CC  3E08               	addlw	8
  8632  02CD  0086               	movwf	6
  8633  02CE  0187               	clrf	7
  8634  02CF  1D81               	btfss	1,3
  8635  02D0  2AD9               	goto	l5296
  8636                           
  8637                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 474:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 475:             sensor_adc1->enabled = 1;
  8638  02D1  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8639  02D2  3E08               	addlw	8
  8640  02D3  0086               	movwf	6
  8641  02D4  0187               	clrf	7
  8642  02D5  1581               	bsf	1,3
  8643                           
  8644                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 476:             sensor1ForceEnabled = 1;
  8645  02D6  01A4               	clrf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled
  8646  02D7  0AA4               	incf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled,f
  8647                           
  8648                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 477:         }
  8649  02D8  2B09               	goto	l5338
  8650  02D9                     l5296:	
  8651  02D9  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8652  02DA  3E08               	addlw	8
  8653  02DB  0086               	movwf	6
  8654  02DC  0187               	clrf	7
  8655  02DD  1981               	btfsc	1,3
  8656  02DE  2AED               	goto	l5304
  8657  02DF  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8658  02E0  3E08               	addlw	8
  8659  02E1  0086               	movwf	6
  8660  02E2  0187               	clrf	7
  8661  02E3  1D81               	btfss	1,3
  8662  02E4  2AED               	goto	l5304
  8663                           
  8664                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 479:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 480:             sensor_adc2->enabled = 1;
  8665  02E5  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8666  02E6  3E08               	addlw	8
  8667  02E7  0086               	movwf	6
  8668  02E8  0187               	clrf	7
  8669  02E9  1581               	bsf	1,3
  8670                           
  8671                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 481:             sensor2ForceEnabled = 1;
  8672  02EA  01A5               	clrf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled
  8673  02EB  0AA5               	incf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled,f
  8674                           
  8675                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 482:         }
  8676  02EC  2B09               	goto	l5338
  8677  02ED                     l5304:	
  8678  02ED  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8679  02EE  3E08               	addlw	8
  8680  02EF  0086               	movwf	6
  8681  02F0  0187               	clrf	7
  8682  02F1  1981               	btfsc	1,3
  8683  02F2  2B09               	goto	l5338
  8684  02F3                     l5306:	
  8685  02F3  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8686  02F4  2B02               	goto	L4
  8687  02F5                     l5314:	
  8688                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 490:     }
  8689                           
  8690  02F5  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8691  02F6  1D03               	btfss	3,2
  8692  02F7  2AFB               	goto	l5326
  8693  02F8  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8694  02F9  1D03               	btfss	3,2
  8695  02FA  2AF3               	goto	l5306
  8696  02FB                     l5326:	
  8697                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 492:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 493:         if(sensor_adc2->enabled == 0)
  8698                           
  8699  02FB  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8700  02FC  1903               	btfsc	3,2
  8701  02FD  2B09               	goto	l5338
  8702  02FE  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8703  02FF  1D03               	btfss	3,2
  8704  0300  2B09               	goto	l5338
  8705                           
  8706                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 502:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 503:         if(sensor_adc1->enabled == 0)
  8707  0301  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8708  0302                     L4:	
  8709  0302  3E08               	addlw	8
  8710  0303  0086               	movwf	6
  8711  0304  0187               	clrf	7
  8712  0305  1981               	btfsc	1,3
  8713  0306  2B09               	goto	l5338
  8714  0307                     l5308:	
  8715                           
  8716                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 484:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 485:             return MTOUCH_SENSOR_ERROR_none;
  8717  0307  3000               	movlw	0
  8718  0308  0008               	return
  8719  0309                     l5338:	
  8720                           
  8721                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 515:     if(Sensor_isActive(sensor_adc2))
  8722  0309  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8723  030A  3197  277B  3182   	fcall	_Sensor_isActive
  8724  030D  3A00               	xorlw	0
  8725  030E  1903               	skipnz
  8726  030F  2B13               	goto	l5342
  8727                           
  8728                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 516:         activeSensor = 1;
  8729  0310  0020               	movlb	0	; select bank0
  8730  0311  01A7               	clrf	Sensor_Acq_ExecutePacket@activeSensor
  8731  0312  0AA7               	incf	Sensor_Acq_ExecutePacket@activeSensor,f
  8732  0313                     l5342:	
  8733                           
  8734                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 522:     ADCOMCON_temp = ADCOMCON;
  8735  0313  002E               	movlb	14	; select bank14
  8736  0314  0812               	movf	18,w	;volatile
  8737  0315  0020               	movlb	0	; select bank0
  8738  0316  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  8739  0317  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  8740  0318  00A1               	movwf	Sensor_Acq_ExecutePacket@ADCOMCON_temp
  8741                           
  8742                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 523:     AD1CON2_temp = AD1CON2;
  8743  0319  002E               	movlb	14	; select bank14
  8744  031A  0813               	movf	19,w	;volatile
  8745  031B  0020               	movlb	0	; select bank0
  8746  031C  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  8747  031D  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  8748  031E  00A2               	movwf	Sensor_Acq_ExecutePacket@AD1CON2_temp
  8749                           
  8750                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 524:     AD2CON2_temp = AD2CON2;
  8751  031F  002F               	movlb	15	; select bank15
  8752  0320  0813               	movf	19,w	;volatile
  8753  0321  0020               	movlb	0	; select bank0
  8754  0322  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  8755  0323  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  8756  0324  00A3               	movwf	Sensor_Acq_ExecutePacket@AD2CON2_temp
  8757                           
  8758                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 525:     MTOUCH_Sensor_Scan_Initialize();
  8759  0325  3197  27D0  3182   	fcall	_MTOUCH_Sensor_Scan_Initialize
  8760                           
  8761                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 529:     if(sensor_adc1!=((void*)0))
  8762  0328  0020               	movlb	0	; select bank0
  8763  0329  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8764  032A  1903               	btfsc	3,2
  8765  032B  2B3E               	goto	l5358
  8766                           
  8767                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 530:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 531:         packet_counter = (mtouch_sensor_packetcounter_t)(sensor_adc1->o
      +                          versampling-(mtouch_sensor_packetcounter_t)1);
  8768  032C  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8769  032D  3E04               	addlw	4
  8770  032E  0086               	movwf	6
  8771  032F  0187               	clrf	7
  8772  0330  0801               	movf	1,w
  8773  0331  3EFF               	addlw	255
  8774  0332  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  8775  0333  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  8776  0334  00AC               	movwf	Sensor_Acq_ExecutePacket@packet_counter
  8777                           
  8778                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 532:         ADxIF_flag = 0;
  8779  0335  01A6               	clrf	Sensor_Acq_ExecutePacket@ADxIF_flag
  8780                           
  8781                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 533:         AAD1GRD = 0b01000000;
  8782  0336  3040               	movlw	64
  8783  0337  002E               	movlb	14	; select bank14
  8784  0338  0098               	movwf	24	;volatile
  8785                           
  8786                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 534:         AAD2GRD = 0b00000000;
  8787  0339  002F               	movlb	15	; select bank15
  8788  033A  0198               	clrf	24	;volatile
  8789                           
  8790                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 535:         APFCONbits.GRDASEL = 0x0;
  8791  033B  0022               	movlb	2	; select bank2
  8792  033C  101D               	bcf	29,0	;volatile
  8793                           
  8794                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 536:     }
  8795  033D  2B50               	goto	l5368
  8796  033E                     l5358:	
  8797                           
  8798                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 538:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 539:         packet_counter = (mtouch_sensor_packetcounter_t)(sensor_adc2->o
      +                          versampling-(mtouch_sensor_packetcounter_t)1);
  8799  033E  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8800  033F  3E04               	addlw	4
  8801  0340  0086               	movwf	6
  8802  0341  0187               	clrf	7
  8803  0342  0801               	movf	1,w
  8804  0343  3EFF               	addlw	255
  8805  0344  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  8806  0345  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  8807  0346  00AC               	movwf	Sensor_Acq_ExecutePacket@packet_counter
  8808                           
  8809                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 540:         ADxIF_flag = 1;
  8810  0347  01A6               	clrf	Sensor_Acq_ExecutePacket@ADxIF_flag
  8811  0348  0AA6               	incf	Sensor_Acq_ExecutePacket@ADxIF_flag,f
  8812                           
  8813                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 541:         AAD1GRD = 0b00000000;
  8814  0349  002E               	movlb	14	; select bank14
  8815  034A  0198               	clrf	24	;volatile
  8816                           
  8817                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 542:         AAD2GRD = 0b01000000;
  8818  034B  3040               	movlw	64
  8819  034C  002F               	movlb	15	; select bank15
  8820  034D  0098               	movwf	24	;volatile
  8821                           
  8822                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 543:         APFCONbits.GRDASEL = 0x1;
  8823  034E  0022               	movlb	2	; select bank2
  8824  034F  141D               	bsf	29,0	;volatile
  8825  0350                     l5368:	
  8826                           
  8827                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 546:     Sensor_loadADCSettings(sensor_adc1
      +                          ,0);
  8828  0350  01F2               	clrf	Sensor_loadADCSettings@adc_index
  8829  0351  0020               	movlb	0	; select bank0
  8830  0352  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8831  0353  3184  2474  3182   	fcall	_Sensor_loadADCSettings
  8832                           
  8833                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 547:     Sensor_loadADCSettings(sensor_adc2
      +                          ,1);
  8834  0356  01F2               	clrf	Sensor_loadADCSettings@adc_index
  8835  0357  0AF2               	incf	Sensor_loadADCSettings@adc_index,f
  8836  0358  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8837  0359  3184  2474  3182   	fcall	_Sensor_loadADCSettings
  8838                           
  8839                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 549:     sensor_globalFlags.done = 0;
  8840  035C  0020               	movlb	0	; select bank0
  8841  035D  1069               	bcf	_sensor_globalFlags,0	;volatile
  8842                           
  8843                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 550:     sensor_globalFlags.error = 0;
  8844  035E  1169               	bcf	_sensor_globalFlags,2	;volatile
  8845                           
  8846                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 551:     sensor_globalFlags.interrupted = 0
      +                          ;
  8847  035F  11E9               	bcf	_sensor_globalFlags,3	;volatile
  8848                           
  8849                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 553:     TMR2_LoadPeriodRegister(sample_per
      +                          iod);
  8850  0360  086E               	movf	_sample_period,w
  8851  0361  3196  26D1  3182   	fcall	_TMR2_LoadPeriodRegister
  8852                           
  8853                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 554:     TMR2_StartTimer();
  8854  0364  3196  26B4  3182   	fcall	_TMR2_StartTimer
  8855                           
  8856                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 555:     packet_noise = 0;
  8857  0367  0020               	movlb	0	; select bank0
  8858  0368  01DB               	clrf	_packet_noise
  8859  0369  01DC               	clrf	_packet_noise+1
  8860  036A                     l5384:	
  8861                           
  8862                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 558:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 559:         if(ADxIF_flag == 0)
  8863  036A  0826               	movf	Sensor_Acq_ExecutePacket@ADxIF_flag,w
  8864  036B  1D03               	btfss	3,2
  8865  036C  2B73               	goto	l286
  8866                           
  8867                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 560:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 561:             if (PIR1bits.AD1IF == 0) { sensor_globalFlags.check = 0
      +                          ; }
  8868  036D  1F11               	btfss	17,6	;volatile
  8869  036E  10E9               	bcf	_sensor_globalFlags,1	;volatile
  8870  036F                     l288:	
  8871  036F  1F11               	btfss	17,6	;volatile
  8872  0370  2B6F               	goto	l288
  8873                           
  8874                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 563:             PIR1bits.AD1IF = 0;
  8875  0371  1311               	bcf	17,6	;volatile
  8876                           
  8877                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 564:         }
  8878  0372  2B79               	goto	l5392
  8879  0373                     l286:	
  8880                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 565:         else
  8881                           
  8882                           
  8883                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 566:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 567:             if (PIR2bits.AD2IF == 0) { sensor_globalFlags.check = 0
      +                          ; }
  8884  0373  1B12               	btfsc	18,6	;volatile
  8885  0374  2B76               	goto	l293
  8886  0375  10E9               	bcf	_sensor_globalFlags,1	;volatile
  8887  0376                     l293:	
  8888  0376  1F12               	btfss	18,6	;volatile
  8889  0377  2B76               	goto	l293
  8890                           
  8891                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 569:             PIR2bits.AD2IF = 0;
  8892  0378  1312               	bcf	18,6	;volatile
  8893  0379                     l5392:	
  8894                           
  8895                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 572:         AAD1GRD ^= 0b00100001;
  8896  0379  3021               	movlw	33
  8897  037A  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  8898  037B  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  8899  037C  002E               	movlb	14	; select bank14
  8900  037D  0698               	xorwf	24,f	;volatile
  8901                           
  8902                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 573:         AAD2GRD ^= 0b00100001;
  8903  037E  3021               	movlw	33
  8904  037F  0020               	movlb	0	; select bank0
  8905  0380  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  8906  0381  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  8907  0382  002F               	movlb	15	; select bank15
  8908  0383  0698               	xorwf	24,f	;volatile
  8909                           
  8910                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 574:         AAD1CON3 ^= 0b11000000;
  8911  0384  30C0               	movlw	192
  8912  0385  0020               	movlb	0	; select bank0
  8913  0386  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  8914  0387  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  8915  0388  002E               	movlb	14	; select bank14
  8916  0389  0694               	xorwf	20,f	;volatile
  8917                           
  8918                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 575:         AAD2CON3 ^= 0b11000000;
  8919  038A  30C0               	movlw	192
  8920  038B  0020               	movlb	0	; select bank0
  8921  038C  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  8922  038D  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  8923  038E  002F               	movlb	15	; select bank15
  8924  038F  0694               	xorwf	20,f	;volatile
  8925                           
  8926                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 577:         if ((packet_counter & 0x01) ==
      +                           0)
  8927  0390  0020               	movlb	0	; select bank0
  8928  0391  182C               	btfsc	Sensor_Acq_ExecutePacket@packet_counter,0
  8929  0392  2BD9               	goto	l5408
  8930                           
  8931                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 578:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 579:             packet_sample[0] += AAD1RES0;
  8932  0393  002E               	movlb	14	; select bank14
  8933  0394  081A               	movf	26,w	;volatile
  8934  0395  0020               	movlb	0	; select bank0
  8935  0396  07D3               	addwf	_packet_sample,f
  8936  0397  002E               	movlb	14	; select bank14
  8937  0398  081B               	movf	27,w	;volatile
  8938  0399  0020               	movlb	0	; select bank0
  8939  039A  3DD4               	addwfc	_packet_sample+1,f
  8940                           
  8941                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 580:             packet_sample[1] += AAD2RE
      +                          S0;
  8942  039B  002F               	movlb	15	; select bank15
  8943  039C  081A               	movf	26,w	;volatile
  8944  039D  0020               	movlb	0	; select bank0
  8945  039E  07D5               	addwf	_packet_sample+2,f
  8946  039F  002F               	movlb	15	; select bank15
  8947  03A0  081B               	movf	27,w	;volatile
  8948  03A1  0020               	movlb	0	; select bank0
  8949  03A2  3DD6               	addwfc	_packet_sample+3,f
  8950                           
  8951                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 581:             if(activeSensor ==0)
  8952  03A3  0827               	movf	Sensor_Acq_ExecutePacket@activeSensor,w
  8953  03A4  1D03               	btfss	3,2
  8954  03A5  2BBE               	goto	l5404
  8955                           
  8956                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 582:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 583:                 packet_noise += (mtouch_sensor_packetsample_t)a
      +                          bs(last_b-AAD1RES0);
  8957  03A6  002E               	movlb	14	; select bank14
  8958  03A7  081A               	movf	26,w	;volatile
  8959  03A8  0020               	movlb	0	; select bank0
  8960  03A9  022A               	subwf	Sensor_Acq_ExecutePacket@last_b,w
  8961  03AA  00F1               	movwf	abs@a
  8962  03AB  002E               	movlb	14	; select bank14
  8963  03AC  081B               	movf	27,w	;volatile
  8964  03AD  0020               	movlb	0	; select bank0
  8965  03AE  3B2B               	subwfb	Sensor_Acq_ExecutePacket@last_b+1,w
  8966  03AF  00F2               	movwf	abs@a+1
  8967  03B0  3188  20DC  3182   	fcall	_abs
  8968  03B3  0871               	movf	?_abs,w
  8969  03B4  0020               	movlb	0	; select bank0
  8970  03B5  07DB               	addwf	_packet_noise,f
  8971  03B6  0872               	movf	?_abs+1,w
  8972  03B7  3DDC               	addwfc	_packet_noise+1,f
  8973                           
  8974                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 584:                 last_b = AAD1RES0;
  8975  03B8  002E               	movlb	14	; select bank14
  8976  03B9  081B               	movf	27,w	;volatile
  8977  03BA  0020               	movlb	0	; select bank0
  8978  03BB  00AB               	movwf	Sensor_Acq_ExecutePacket@last_b+1
  8979  03BC  002E               	movlb	14	; select bank14
  8980  03BD  2BD5               	goto	L3
  8981  03BE                     l5404:	
  8982                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 585:             }
  8983                           
  8984                           
  8985                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 587:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 588:                 packet_noise += (mtouch_sensor_packetsample_t)a
      +                          bs(last_b-AAD2RES0);
  8986  03BE  002F               	movlb	15	; select bank15
  8987  03BF  081A               	movf	26,w	;volatile
  8988  03C0  0020               	movlb	0	; select bank0
  8989  03C1  022A               	subwf	Sensor_Acq_ExecutePacket@last_b,w
  8990  03C2  00F1               	movwf	abs@a
  8991  03C3  002F               	movlb	15	; select bank15
  8992  03C4  081B               	movf	27,w	;volatile
  8993  03C5  0020               	movlb	0	; select bank0
  8994  03C6  3B2B               	subwfb	Sensor_Acq_ExecutePacket@last_b+1,w
  8995  03C7  00F2               	movwf	abs@a+1
  8996  03C8  3188  20DC  3182   	fcall	_abs
  8997  03CB  0871               	movf	?_abs,w
  8998  03CC  0020               	movlb	0	; select bank0
  8999  03CD  07DB               	addwf	_packet_noise,f
  9000  03CE  0872               	movf	?_abs+1,w
  9001  03CF  3DDC               	addwfc	_packet_noise+1,f
  9002                           
  9003                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 589:                 last_b = AAD2RES0;
  9004  03D0  002F               	movlb	15	; select bank15
  9005  03D1  081B               	movf	27,w	;volatile
  9006  03D2  0020               	movlb	0	; select bank0
  9007  03D3  00AB               	movwf	Sensor_Acq_ExecutePacket@last_b+1
  9008  03D4  002F               	movlb	15	; select bank15
  9009  03D5                     L3:	
  9010  03D5  081A               	movf	26,w	;volatile
  9011  03D6  0020               	movlb	0	; select bank0
  9012  03D7  00AA               	movwf	Sensor_Acq_ExecutePacket@last_b
  9013  03D8  2C0D               	goto	l5420
  9014  03D9                     l5408:	
  9015                           
  9016                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 593:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 594:             packet_sample[0] -= AAD1RES0;
  9017  03D9  002E               	movlb	14	; select bank14
  9018  03DA  081A               	movf	26,w	;volatile
  9019  03DB  0020               	movlb	0	; select bank0
  9020  03DC  02D3               	subwf	_packet_sample,f
  9021  03DD  002E               	movlb	14	; select bank14
  9022  03DE  081B               	movf	27,w	;volatile
  9023  03DF  0020               	movlb	0	; select bank0
  9024  03E0  3BD4               	subwfb	_packet_sample+1,f
  9025                           
  9026                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 595:             packet_sample[1] -= AAD2RE
      +                          S0;
  9027  03E1  002F               	movlb	15	; select bank15
  9028  03E2  081A               	movf	26,w	;volatile
  9029  03E3  0020               	movlb	0	; select bank0
  9030  03E4  02D5               	subwf	_packet_sample+2,f
  9031  03E5  002F               	movlb	15	; select bank15
  9032  03E6  081B               	movf	27,w	;volatile
  9033  03E7  0020               	movlb	0	; select bank0
  9034  03E8  3BD6               	subwfb	_packet_sample+3,f
  9035                           
  9036                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 596:             if(activeSensor ==0)
  9037  03E9  0827               	movf	Sensor_Acq_ExecutePacket@activeSensor,w
  9038  03EA  1D03               	btfss	3,2
  9039  03EB  2BF3               	goto	l5416
  9040                           
  9041                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 597:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 598:                 packet_noise +=(mtouch_sensor_packetsample_t)ab
      +                          s(last_a-AAD1RES0);
  9042  03EC  002E               	movlb	14	; select bank14
  9043  03ED  081A               	movf	26,w	;volatile
  9044  03EE  0020               	movlb	0	; select bank0
  9045  03EF  0228               	subwf	Sensor_Acq_ExecutePacket@last_a,w
  9046  03F0  00F1               	movwf	abs@a
  9047  03F1  002E               	movlb	14	; select bank14
  9048  03F2  2BF9               	goto	L6
  9049  03F3                     l5416:	
  9050                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 600:             }
  9051                           
  9052                           
  9053                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 602:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 603:                 packet_noise +=(mtouch_sensor_packetsample_t)ab
      +                          s(last_a-AAD2RES0);
  9054  03F3  002F               	movlb	15	; select bank15
  9055  03F4  081A               	movf	26,w	;volatile
  9056  03F5  0020               	movlb	0	; select bank0
  9057  03F6  0228               	subwf	Sensor_Acq_ExecutePacket@last_a,w
  9058  03F7  00F1               	movwf	abs@a
  9059  03F8  002F               	movlb	15	; select bank15
  9060  03F9                     L6:	
  9061  03F9  081B               	movf	27,w	;volatile
  9062  03FA  0020               	movlb	0	; select bank0
  9063  03FB  3B29               	subwfb	Sensor_Acq_ExecutePacket@last_a+1,w
  9064  03FC  00F2               	movwf	abs@a+1
  9065  03FD  3188  20DC  3182   	fcall	_abs
  9066  0400  0871               	movf	?_abs,w
  9067  0401  0020               	movlb	0	; select bank0
  9068  0402  07DB               	addwf	_packet_noise,f
  9069  0403  0872               	movf	?_abs+1,w
  9070  0404  3DDC               	addwfc	_packet_noise+1,f
  9071                           
  9072                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 599:                 last_a = AAD1RES0;
  9073  0405  002E               	movlb	14	; select bank14
  9074  0406  081B               	movf	27,w	;volatile
  9075  0407  0020               	movlb	0	; select bank0
  9076  0408  00A9               	movwf	Sensor_Acq_ExecutePacket@last_a+1
  9077  0409  002E               	movlb	14	; select bank14
  9078  040A  081A               	movf	26,w	;volatile
  9079  040B  0020               	movlb	0	; select bank0
  9080  040C  00A8               	movwf	Sensor_Acq_ExecutePacket@last_a
  9081  040D                     l5420:	
  9082                           
  9083                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 609:         if (packet_counter == 0)
  9084  040D  082C               	movf	Sensor_Acq_ExecutePacket@packet_counter,w
  9085  040E  1903               	btfsc	3,2
  9086                           
  9087                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 610:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 612:             sensor_globalFlags.done = (uint8_t)1;
  9088  040F  1469               	bsf	_sensor_globalFlags,0	;volatile
  9089                           
  9090                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 614:         packet_counter--;
  9091  0410  3001               	movlw	1
  9092  0411  02AC               	subwf	Sensor_Acq_ExecutePacket@packet_counter,f
  9093                           
  9094                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 616:         if (sensor_globalFlags.check !
      +                          = 0)
  9095  0412  1CE9               	btfss	_sensor_globalFlags,1	;volatile
  9096  0413  2C16               	goto	l303
  9097                           
  9098                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 617:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 618:             sensor_globalFlags.error = 1;
  9099  0414  1569               	bsf	_sensor_globalFlags,2	;volatile
  9100                           
  9101                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 619:             sensor_globalFlags.done = 
      +                          1;
  9102  0415  1469               	bsf	_sensor_globalFlags,0	;volatile
  9103  0416                     l303:	
  9104                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 620:         }
  9105                           
  9106                           
  9107                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 621:         sensor_globalFlags.check = 1;
  9108  0416  14E9               	bsf	_sensor_globalFlags,1	;volatile
  9109                           
  9110                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 622:     } while(sensor_globalFlags.done ==
      +                           0);
  9111  0417  1C69               	btfss	_sensor_globalFlags,0	;volatile
  9112  0418  2B6A               	goto	l5384
  9113                           
  9114                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 624:     TMR2_StopTimer();
  9115  0419  3196  26B7  3182   	fcall	_TMR2_StopTimer
  9116                           
  9117                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 625:     ADCOMCON = ADCOMCON_temp;
  9118  041C  0020               	movlb	0	; select bank0
  9119  041D  0821               	movf	Sensor_Acq_ExecutePacket@ADCOMCON_temp,w
  9120  041E  002E               	movlb	14	; select bank14
  9121  041F  0092               	movwf	18	;volatile
  9122                           
  9123                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 626:     AD1CON2 = AD1CON2_temp;
  9124  0420  0020               	movlb	0	; select bank0
  9125  0421  0822               	movf	Sensor_Acq_ExecutePacket@AD1CON2_temp,w
  9126  0422  002E               	movlb	14	; select bank14
  9127  0423  0093               	movwf	19	;volatile
  9128                           
  9129                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 627:     AD2CON2 = AD2CON2_temp;
  9130  0424  0020               	movlb	0	; select bank0
  9131  0425  0823               	movf	Sensor_Acq_ExecutePacket@AD2CON2_temp,w
  9132  0426  002F               	movlb	15	; select bank15
  9133  0427  0093               	movwf	19	;volatile
  9134                           
  9135                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 629:     if(sensor_globalFlags.error)
  9136  0428  0020               	movlb	0	; select bank0
  9137  0429  1D69               	btfss	_sensor_globalFlags,2	;volatile
  9138  042A  2C2D               	goto	l305
  9139                           
  9140                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 630:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 631:         return MTOUCH_SENSOR_ERROR_scanOverrun;
  9141  042B  30FB               	movlw	251
  9142  042C  0008               	return
  9143  042D                     l305:	
  9144                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 632:     }
  9145                           
  9146                           
  9147                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 634:     if(sensor_globalFlags.interrupted)
  9148  042D  1DE9               	btfss	_sensor_globalFlags,3	;volatile
  9149  042E  2C31               	goto	l5448
  9150                           
  9151                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 635:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 636:         return MTOUCH_SENSOR_ERROR_interruptedScan;
  9152  042F  30FA               	movlw	250
  9153  0430  0008               	return
  9154  0431                     l5448:	
  9155                           
  9156                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 640:     if (sensor1ForceEnabled)
  9157  0431  0824               	movf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled,w
  9158  0432  1903               	btfsc	3,2
  9159  0433  2C39               	goto	l5452
  9160                           
  9161                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 641:         sensor_adc1->enabled = 0;
  9162  0434  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9163  0435  3E08               	addlw	8
  9164  0436  0086               	movwf	6
  9165  0437  0187               	clrf	7
  9166  0438  1181               	bcf	1,3
  9167  0439                     l5452:	
  9168                           
  9169                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 643:     if (sensor2ForceEnabled)
  9170  0439  0825               	movf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled,w
  9171  043A  1903               	btfsc	3,2
  9172  043B  2C41               	goto	l5456
  9173                           
  9174                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 644:         sensor_adc2->enabled = 0;
  9175  043C  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9176  043D  3E08               	addlw	8
  9177  043E  0086               	movwf	6
  9178  043F  0187               	clrf	7
  9179  0440  1181               	bcf	1,3
  9180  0441                     l5456:	
  9181                           
  9182                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 647:     if(Sensor_isEnabled(sensor_adc1) &
      +                          & !Sensor_isCalibrated(sensor_adc1))
  9183  0441  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9184  0442  3197  27E0  3182   	fcall	_Sensor_isEnabled
  9185  0445  3A00               	xorlw	0
  9186  0446  1903               	skipnz
  9187  0447  2C55               	goto	l5462
  9188  0448  0020               	movlb	0	; select bank0
  9189  0449  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9190  044A  3197  2743  3182   	fcall	_Sensor_isCalibrated
  9191  044D  3A00               	xorlw	0
  9192  044E  1D03               	skipz
  9193  044F  2C55               	goto	l5462
  9194                           
  9195                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 648:         Sensor_autoCalibration(sensor_
      +                          adc1);
  9196  0450  0020               	movlb	0	; select bank0
  9197  0451  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9198  0452  3186  26EF  3182   	fcall	_Sensor_autoCalibration
  9199  0455                     l5462:	
  9200                           
  9201                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 650:     if(Sensor_isEnabled(sensor_adc2) &
      +                          & !Sensor_isCalibrated(sensor_adc2))
  9202  0455  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9203  0456  3197  27E0  3182   	fcall	_Sensor_isEnabled
  9204  0459  3A00               	xorlw	0
  9205  045A  1903               	skipnz
  9206  045B  2C67               	goto	l5468
  9207  045C  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9208  045D  3197  2743  3182   	fcall	_Sensor_isCalibrated
  9209  0460  3A00               	xorlw	0
  9210  0461  1D03               	skipz
  9211  0462  2C67               	goto	l5468
  9212                           
  9213                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 651:         Sensor_autoCalibration(sensor_
      +                          adc2);
  9214  0463  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9215  0464  3186  26EF  3182   	fcall	_Sensor_autoCalibration
  9216  0467                     l5468:	
  9217                           
  9218                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 653:     AD1PRECON = 0;
  9219  0467  002E               	movlb	14	; select bank14
  9220  0468  0196               	clrf	22	;volatile
  9221                           
  9222                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 654:     AD2PRECON = 0;
  9223  0469  002F               	movlb	15	; select bank15
  9224  046A  0196               	clrf	22	;volatile
  9225                           
  9226                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 655:     AD1ACQCON = 0;
  9227  046B  002E               	movlb	14	; select bank14
  9228  046C  0197               	clrf	23	;volatile
  9229                           
  9230                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 656:     AD2ACQCON = 0;
  9231  046D  002F               	movlb	15	; select bank15
  9232  046E  0197               	clrf	23	;volatile
  9233                           
  9234                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 657:     AD1CON0bits.ADON = 0;
  9235  046F  002E               	movlb	14	; select bank14
  9236  0470  1011               	bcf	17,0	;volatile
  9237                           
  9238                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 658:     AD2CON0bits.ADON = 0;
  9239  0471  002F               	movlb	15	; select bank15
  9240  0472  1011               	bcf	17,0	;volatile
  9241  0473  2B07               	goto	l5308
  9242  0474                     __end_of_Sensor_Acq_ExecutePacket:	
  9243                           
  9244                           	psect	text49
  9245  16B7                     __ptext49:	
  9246 ;; *************** function _TMR2_StopTimer *****************
  9247 ;; Defined at:
  9248 ;;		line 85 in file "mcc_generated_files/tmr2.c"
  9249 ;; Parameters:    Size  Location     Type
  9250 ;;		None
  9251 ;; Auto vars:     Size  Location     Type
  9252 ;;		None
  9253 ;; Return value:  Size  Location     Type
  9254 ;;                  1    wreg      void 
  9255 ;; Registers used:
  9256 ;;		None
  9257 ;; Tracked objects:
  9258 ;;		On entry : 0/0
  9259 ;;		On exit  : 0/0
  9260 ;;		Unchanged: 0/0
  9261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9262 ;;      Params:         0       0       0       0       0       0       0       0
  9263 ;;      Locals:         0       0       0       0       0       0       0       0
  9264 ;;      Temps:          0       0       0       0       0       0       0       0
  9265 ;;      Totals:         0       0       0       0       0       0       0       0
  9266 ;;Total ram usage:        0 bytes
  9267 ;; Hardware stack levels used:    1
  9268 ;; Hardware stack levels required when called:    4
  9269 ;; This function calls:
  9270 ;;		Nothing
  9271 ;; This function is called by:
  9272 ;;		_Sensor_Acq_ExecutePacket
  9273 ;; This function uses a non-reentrant model
  9274 ;;
  9275                           
  9276                           
  9277                           ;psect for function _TMR2_StopTimer
  9278  16B7                     _TMR2_StopTimer:	
  9279                           
  9280                           ;mcc_generated_files/tmr2.c: 88:     T2CONbits.TMR2ON = 0;
  9281                           
  9282                           ;incstack = 0
  9283                           ; Regs used in _TMR2_StopTimer: []
  9284  16B7  0020               	movlb	0	; select bank0
  9285  16B8  111C               	bcf	28,2	;volatile
  9286  16B9  0008               	return
  9287  16BA                     __end_of_TMR2_StopTimer:	
  9288                           
  9289                           	psect	text50
  9290  16B4                     __ptext50:	
  9291 ;; *************** function _TMR2_StartTimer *****************
  9292 ;; Defined at:
  9293 ;;		line 79 in file "mcc_generated_files/tmr2.c"
  9294 ;; Parameters:    Size  Location     Type
  9295 ;;		None
  9296 ;; Auto vars:     Size  Location     Type
  9297 ;;		None
  9298 ;; Return value:  Size  Location     Type
  9299 ;;                  1    wreg      void 
  9300 ;; Registers used:
  9301 ;;		None
  9302 ;; Tracked objects:
  9303 ;;		On entry : 0/0
  9304 ;;		On exit  : 0/0
  9305 ;;		Unchanged: 0/0
  9306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9307 ;;      Params:         0       0       0       0       0       0       0       0
  9308 ;;      Locals:         0       0       0       0       0       0       0       0
  9309 ;;      Temps:          0       0       0       0       0       0       0       0
  9310 ;;      Totals:         0       0       0       0       0       0       0       0
  9311 ;;Total ram usage:        0 bytes
  9312 ;; Hardware stack levels used:    1
  9313 ;; Hardware stack levels required when called:    4
  9314 ;; This function calls:
  9315 ;;		Nothing
  9316 ;; This function is called by:
  9317 ;;		_Sensor_Acq_ExecutePacket
  9318 ;; This function uses a non-reentrant model
  9319 ;;
  9320                           
  9321                           
  9322                           ;psect for function _TMR2_StartTimer
  9323  16B4                     _TMR2_StartTimer:	
  9324                           
  9325                           ;mcc_generated_files/tmr2.c: 82:     T2CONbits.TMR2ON = 1;
  9326                           
  9327                           ;incstack = 0
  9328                           ; Regs used in _TMR2_StartTimer: []
  9329  16B4  0020               	movlb	0	; select bank0
  9330  16B5  151C               	bsf	28,2	;volatile
  9331  16B6  0008               	return
  9332  16B7                     __end_of_TMR2_StartTimer:	
  9333                           
  9334                           	psect	text51
  9335  16D1                     __ptext51:	
  9336 ;; *************** function _TMR2_LoadPeriodRegister *****************
  9337 ;; Defined at:
  9338 ;;		line 106 in file "mcc_generated_files/tmr2.c"
  9339 ;; Parameters:    Size  Location     Type
  9340 ;;  periodVal       1    wreg     unsigned char 
  9341 ;; Auto vars:     Size  Location     Type
  9342 ;;  periodVal       1    1[COMMON] unsigned char 
  9343 ;; Return value:  Size  Location     Type
  9344 ;;                  1    wreg      void 
  9345 ;; Registers used:
  9346 ;;		wreg
  9347 ;; Tracked objects:
  9348 ;;		On entry : 0/0
  9349 ;;		On exit  : 0/0
  9350 ;;		Unchanged: 0/0
  9351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9352 ;;      Params:         0       0       0       0       0       0       0       0
  9353 ;;      Locals:         1       0       0       0       0       0       0       0
  9354 ;;      Temps:          0       0       0       0       0       0       0       0
  9355 ;;      Totals:         1       0       0       0       0       0       0       0
  9356 ;;Total ram usage:        1 bytes
  9357 ;; Hardware stack levels used:    1
  9358 ;; Hardware stack levels required when called:    4
  9359 ;; This function calls:
  9360 ;;		Nothing
  9361 ;; This function is called by:
  9362 ;;		_Sensor_Acq_ExecutePacket
  9363 ;; This function uses a non-reentrant model
  9364 ;;
  9365                           
  9366                           
  9367                           ;psect for function _TMR2_LoadPeriodRegister
  9368  16D1                     _TMR2_LoadPeriodRegister:	
  9369                           
  9370                           ;incstack = 0
  9371                           ; Regs used in _TMR2_LoadPeriodRegister: [wreg]
  9372                           ;TMR2_LoadPeriodRegister@periodVal stored from wreg
  9373  16D1  00F1               	movwf	TMR2_LoadPeriodRegister@periodVal
  9374                           
  9375                           ;mcc_generated_files/tmr2.c: 106: void TMR2_LoadPeriodRegister(uint8_t periodVal);mcc_ge
      +                          nerated_files/tmr2.c: 107: {;mcc_generated_files/tmr2.c: 108:    PR2 = periodVal;
  9376  16D2  0871               	movf	TMR2_LoadPeriodRegister@periodVal,w
  9377  16D3  0020               	movlb	0	; select bank0
  9378  16D4  009B               	movwf	27	;volatile
  9379  16D5  0008               	return
  9380  16D6                     __end_of_TMR2_LoadPeriodRegister:	
  9381                           
  9382                           	psect	text52
  9383  0474                     __ptext52:	
  9384 ;; *************** function _Sensor_loadADCSettings *****************
  9385 ;; Defined at:
  9386 ;;		line 420 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9387 ;; Parameters:    Size  Location     Type
  9388 ;;  sensor          1    wreg     PTR struct .
  9389 ;;		 -> NULL(0), mtouch_sensor(9), 
  9390 ;;  adc_index       1    2[COMMON] unsigned char 
  9391 ;; Auto vars:     Size  Location     Type
  9392 ;;  sensor          1    9[COMMON] PTR struct .
  9393 ;;		 -> NULL(0), mtouch_sensor(9), 
  9394 ;;  addressOffse    1    8[COMMON] unsigned char 
  9395 ;; Return value:  Size  Location     Type
  9396 ;;                  1    wreg      void 
  9397 ;; Registers used:
  9398 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9399 ;; Tracked objects:
  9400 ;;		On entry : 0/0
  9401 ;;		On exit  : 0/0
  9402 ;;		Unchanged: 0/0
  9403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9404 ;;      Params:         1       0       0       0       0       0       0       0
  9405 ;;      Locals:         4       0       0       0       0       0       0       0
  9406 ;;      Temps:          3       0       0       0       0       0       0       0
  9407 ;;      Totals:         8       0       0       0       0       0       0       0
  9408 ;;Total ram usage:        8 bytes
  9409 ;; Hardware stack levels used:    1
  9410 ;; Hardware stack levels required when called:    5
  9411 ;; This function calls:
  9412 ;;		_Sensor_isCalibrated
  9413 ;;		_Sensor_isCalibratingAcqTime
  9414 ;; This function is called by:
  9415 ;;		_Sensor_Acq_ExecutePacket
  9416 ;; This function uses a non-reentrant model
  9417 ;;
  9418                           
  9419                           
  9420                           ;psect for function _Sensor_loadADCSettings
  9421  0474                     _Sensor_loadADCSettings:	
  9422                           
  9423                           ;incstack = 0
  9424                           ; Regs used in _Sensor_loadADCSettings: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  9425                           ;Sensor_loadADCSettings@sensor stored from wreg
  9426  0474  00F9               	movwf	Sensor_loadADCSettings@sensor
  9427                           
  9428                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 420: static void Sensor_loadADCSettings(mto
      +                          uch_sensor_t* sensor, uint8_t adc_index);mcc_generated_files/mtouch/mtouch_sensor.c: 421
      +                          : {;mcc_generated_files/mtouch/mtouch_sensor.c: 422:     if (sensor == ((void*)0))
  9429  0475  0879               	movf	Sensor_loadADCSettings@sensor,w
  9430  0476  1903               	btfsc	3,2
  9431  0477  0008               	return
  9432                           
  9433                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 425:     uint8_t addressOffset = (adc_index
      +                          ) ? 0x80 : 0x00;
  9434  0478  0872               	movf	Sensor_loadADCSettings@adc_index,w
  9435  0479  1D03               	btfss	3,2
  9436  047A  2C7E               	goto	l3624
  9437  047B  01F6               	clrf	_Sensor_loadADCSettings$558
  9438  047C  01F7               	clrf	_Sensor_loadADCSettings$558+1
  9439  047D  2C82               	goto	l257
  9440  047E                     l3624:	
  9441  047E  3080               	movlw	128
  9442  047F  00F6               	movwf	_Sensor_loadADCSettings$558
  9443  0480  3000               	movlw	0
  9444  0481  00F7               	movwf	_Sensor_loadADCSettings$558+1
  9445  0482                     l257:	
  9446  0482  0876               	movf	_Sensor_loadADCSettings$558,w
  9447  0483  00F3               	movwf	??_Sensor_loadADCSettings
  9448  0484  0873               	movf	??_Sensor_loadADCSettings,w
  9449  0485  00F8               	movwf	Sensor_loadADCSettings@addressOffset
  9450                           
  9451                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 427:     *(&AD1CON0 + addressOffset) = (uin
      +                          t8_t) sensor->adcon0;
  9452  0486  0A79               	incf	Sensor_loadADCSettings@sensor,w
  9453  0487  0086               	movwf	6
  9454  0488  0187               	clrf	7
  9455  0489  0801               	movf	1,w
  9456  048A  00F3               	movwf	??_Sensor_loadADCSettings
  9457  048B  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  9458  048C  3E11               	addlw	17
  9459  048D  00F4               	movwf	??_Sensor_loadADCSettings+1
  9460  048E  01F5               	clrf	??_Sensor_loadADCSettings+2
  9461  048F  3007               	movlw	7
  9462  0490  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  9463  0491  0874               	movf	??_Sensor_loadADCSettings+1,w
  9464  0492  0086               	movwf	6
  9465  0493  0875               	movf	??_Sensor_loadADCSettings+2,w
  9466  0494  0087               	movwf	7
  9467  0495  0873               	movf	??_Sensor_loadADCSettings,w
  9468  0496  0081               	movwf	1
  9469                           
  9470                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 428:     *(&AAD1CAP + addressOffset) = (uin
      +                          t8_t) sensor->addcap;
  9471  0497  0879               	movf	Sensor_loadADCSettings@sensor,w
  9472  0498  3E05               	addlw	5
  9473  0499  0086               	movwf	6
  9474  049A  0187               	clrf	7
  9475  049B  0801               	movf	1,w
  9476  049C  00F3               	movwf	??_Sensor_loadADCSettings
  9477  049D  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  9478  049E  3E19               	addlw	25
  9479  049F  00F4               	movwf	??_Sensor_loadADCSettings+1
  9480  04A0  01F5               	clrf	??_Sensor_loadADCSettings+2
  9481  04A1  3007               	movlw	7
  9482  04A2  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  9483  04A3  0874               	movf	??_Sensor_loadADCSettings+1,w
  9484  04A4  0086               	movwf	6
  9485  04A5  0875               	movf	??_Sensor_loadADCSettings+2,w
  9486  04A6  0087               	movwf	7
  9487  04A7  0873               	movf	??_Sensor_loadADCSettings,w
  9488  04A8  0081               	movwf	1
  9489                           
  9490                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 429:     *(&AAD1CON2 + addressOffset) = (ui
      +                          nt8_t)(0b101<<4);
  9491  04A9  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  9492  04AA  3E13               	addlw	19
  9493  04AB  00F3               	movwf	??_Sensor_loadADCSettings
  9494  04AC  01F4               	clrf	??_Sensor_loadADCSettings+1
  9495  04AD  3007               	movlw	7
  9496  04AE  3DF4               	addwfc	??_Sensor_loadADCSettings+1,f
  9497  04AF  0873               	movf	??_Sensor_loadADCSettings,w
  9498  04B0  0086               	movwf	6
  9499  04B1  0874               	movf	??_Sensor_loadADCSettings+1,w
  9500  04B2  0087               	movwf	7
  9501  04B3  3050               	movlw	80
  9502  04B4  0081               	movwf	1
  9503                           
  9504                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 430:     *(&AAD1GRD + addressOffset) &= (ui
      +                          nt8_t) 0b11111110;
  9505  04B5  30FE               	movlw	254
  9506  04B6  00F3               	movwf	??_Sensor_loadADCSettings
  9507  04B7  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  9508  04B8  3E18               	addlw	24
  9509  04B9  0086               	movwf	6
  9510  04BA  0187               	clrf	7
  9511  04BB  3007               	movlw	7
  9512  04BC  3D87               	addwfc	7,f
  9513  04BD  0873               	movf	??_Sensor_loadADCSettings,w
  9514  04BE  0581               	andwf	1,f
  9515                           
  9516                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 432:     if (Sensor_isCalibrated(sensor))
  9517  04BF  0879               	movf	Sensor_loadADCSettings@sensor,w
  9518  04C0  3197  2743  3184   	fcall	_Sensor_isCalibrated
  9519  04C3  3A00               	xorlw	0
  9520  04C4  1903               	skipnz
  9521  04C5  2CD9               	goto	l3638
  9522                           
  9523                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 433:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 434:         *(&AD1PRECON + addressOffset) = (uint8_t) sensor->precharge_tim
      +                          e;
  9524  04C6  0879               	movf	Sensor_loadADCSettings@sensor,w
  9525  04C7  3E02               	addlw	2
  9526  04C8  0086               	movwf	6
  9527  04C9  0187               	clrf	7
  9528  04CA  0801               	movf	1,w
  9529  04CB  00F3               	movwf	??_Sensor_loadADCSettings
  9530  04CC  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  9531  04CD  3E16               	addlw	22
  9532  04CE  00F4               	movwf	??_Sensor_loadADCSettings+1
  9533  04CF  01F5               	clrf	??_Sensor_loadADCSettings+2
  9534  04D0  3007               	movlw	7
  9535  04D1  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  9536  04D2  0874               	movf	??_Sensor_loadADCSettings+1,w
  9537  04D3  0086               	movwf	6
  9538  04D4  0875               	movf	??_Sensor_loadADCSettings+2,w
  9539  04D5  0087               	movwf	7
  9540  04D6  0873               	movf	??_Sensor_loadADCSettings,w
  9541  04D7  0081               	movwf	1
  9542  04D8  2CEC               	goto	l3642
  9543  04D9                     l3638:	
  9544                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 436:     }
  9545                           
  9546                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 435:         *(&AD1ACQCON + addressOffset) 
      +                          = (uint8_t) sensor->acquisition_time;
  9547                           
  9548                           
  9549                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 438:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 439:         *(&AD1PRECON + addressOffset) = (mtouch_sensor_time_t)32;
  9550  04D9  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  9551  04DA  3E16               	addlw	22
  9552  04DB  00F3               	movwf	??_Sensor_loadADCSettings
  9553  04DC  01F4               	clrf	??_Sensor_loadADCSettings+1
  9554  04DD  3007               	movlw	7
  9555  04DE  3DF4               	addwfc	??_Sensor_loadADCSettings+1,f
  9556  04DF  0873               	movf	??_Sensor_loadADCSettings,w
  9557  04E0  0086               	movwf	6
  9558  04E1  0874               	movf	??_Sensor_loadADCSettings+1,w
  9559  04E2  0087               	movwf	7
  9560  04E3  3020               	movlw	32
  9561  04E4  0081               	movwf	1
  9562                           
  9563                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 440:         if (Sensor_isCalibratingAcqTim
      +                          e(sensor))
  9564  04E5  0879               	movf	Sensor_loadADCSettings@sensor,w
  9565  04E6  3197  2733  3184   	fcall	_Sensor_isCalibratingAcqTime
  9566  04E9  3A00               	xorlw	0
  9567  04EA  1903               	skipnz
  9568  04EB  2CFE               	goto	l3644
  9569  04EC                     l3642:	
  9570                           
  9571                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 441:             *(&AD1ACQCON + addressOffs
      +                          et) = (uint8_t) sensor->acquisition_time;
  9572  04EC  0879               	movf	Sensor_loadADCSettings@sensor,w
  9573  04ED  3E03               	addlw	3
  9574  04EE  0086               	movwf	6
  9575  04EF  0187               	clrf	7
  9576  04F0  0801               	movf	1,w
  9577  04F1  00F3               	movwf	??_Sensor_loadADCSettings
  9578  04F2  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  9579  04F3  3E17               	addlw	23
  9580  04F4  00F4               	movwf	??_Sensor_loadADCSettings+1
  9581  04F5  01F5               	clrf	??_Sensor_loadADCSettings+2
  9582  04F6  3007               	movlw	7
  9583  04F7  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  9584  04F8  0874               	movf	??_Sensor_loadADCSettings+1,w
  9585  04F9  0086               	movwf	6
  9586  04FA  0875               	movf	??_Sensor_loadADCSettings+2,w
  9587  04FB  0087               	movwf	7
  9588  04FC  0873               	movf	??_Sensor_loadADCSettings,w
  9589  04FD  2D09               	goto	L7
  9590  04FE                     l3644:	
  9591                           
  9592                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 443:             *(&AD1ACQCON + addressOffs
      +                          et) = (mtouch_sensor_time_t)32;
  9593  04FE  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  9594  04FF  3E17               	addlw	23
  9595  0500  00F3               	movwf	??_Sensor_loadADCSettings
  9596  0501  01F4               	clrf	??_Sensor_loadADCSettings+1
  9597  0502  3007               	movlw	7
  9598  0503  3DF4               	addwfc	??_Sensor_loadADCSettings+1,f
  9599  0504  0873               	movf	??_Sensor_loadADCSettings,w
  9600  0505  0086               	movwf	6
  9601  0506  0874               	movf	??_Sensor_loadADCSettings+1,w
  9602  0507  0087               	movwf	7
  9603  0508  3020               	movlw	32
  9604  0509                     L7:	
  9605  0509  0081               	movwf	1
  9606                           
  9607                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 446:     packet_sample[adc_index] = ((mtouc
      +                          h_sensor_packetsample_t)(sensor->oversampling)<<9);
  9608                           
  9609                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 444:     }
  9610  050A  0879               	movf	Sensor_loadADCSettings@sensor,w
  9611  050B  3E04               	addlw	4
  9612  050C  0086               	movwf	6
  9613  050D  0187               	clrf	7
  9614  050E  0801               	movf	1,w
  9615  050F  00F3               	movwf	??_Sensor_loadADCSettings
  9616  0510  01F4               	clrf	??_Sensor_loadADCSettings+1
  9617  0511  3009               	movlw	9
  9618  0512                     u2205:	
  9619  0512  35F3               	lslf	??_Sensor_loadADCSettings,f
  9620  0513  0DF4               	rlf	??_Sensor_loadADCSettings+1,f
  9621  0514  0B89               	decfsz	9,f
  9622  0515  2D12               	goto	u2205
  9623  0516  3572               	lslf	Sensor_loadADCSettings@adc_index,w
  9624  0517  3E53               	addlw	(low (_packet_sample| 0))& (0+255)
  9625  0518  0086               	movwf	6
  9626  0519  0187               	clrf	7
  9627  051A  0873               	movf	??_Sensor_loadADCSettings,w
  9628  051B  3FC0               	movwi [0]fsr1
  9629  051C  0874               	movf	??_Sensor_loadADCSettings+1,w
  9630  051D  3FC1               	movwi [1]fsr1
  9631  051E  0008               	return
  9632  051F                     __end_of_Sensor_loadADCSettings:	
  9633                           
  9634                           	psect	text53
  9635  1743                     __ptext53:	
  9636 ;; *************** function _Sensor_isCalibrated *****************
  9637 ;; Defined at:
  9638 ;;		line 903 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9639 ;; Parameters:    Size  Location     Type
  9640 ;;  sensor          1    wreg     PTR struct .
  9641 ;;		 -> NULL(0), mtouch_sensor(9), 
  9642 ;; Auto vars:     Size  Location     Type
  9643 ;;  sensor          1    1[COMMON] PTR struct .
  9644 ;;		 -> NULL(0), mtouch_sensor(9), 
  9645 ;; Return value:  Size  Location     Type
  9646 ;;                  1    wreg      _Bool 
  9647 ;; Registers used:
  9648 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9649 ;; Tracked objects:
  9650 ;;		On entry : 0/0
  9651 ;;		On exit  : 0/0
  9652 ;;		Unchanged: 0/0
  9653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9654 ;;      Params:         0       0       0       0       0       0       0       0
  9655 ;;      Locals:         1       0       0       0       0       0       0       0
  9656 ;;      Temps:          0       0       0       0       0       0       0       0
  9657 ;;      Totals:         1       0       0       0       0       0       0       0
  9658 ;;Total ram usage:        1 bytes
  9659 ;; Hardware stack levels used:    1
  9660 ;; Hardware stack levels required when called:    4
  9661 ;; This function calls:
  9662 ;;		Nothing
  9663 ;; This function is called by:
  9664 ;;		_Sensor_Acquisition
  9665 ;;		_Sensor_loadADCSettings
  9666 ;;		_Sensor_Acq_ExecutePacket
  9667 ;; This function uses a non-reentrant model
  9668 ;;
  9669                           
  9670                           
  9671                           ;psect for function _Sensor_isCalibrated
  9672  1743                     _Sensor_isCalibrated:	
  9673                           
  9674                           ;incstack = 0
  9675                           ; Regs used in _Sensor_isCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0]
  9676                           ;Sensor_isCalibrated@sensor stored from wreg
  9677  1743  00F1               	movwf	Sensor_isCalibrated@sensor
  9678                           
  9679                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 903: static __attribute__((inline)) _Bool S
      +                          ensor_isCalibrated(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          904: {;mcc_generated_files/mtouch/mtouch_sensor.c: 905:     return (_Bool)sensor->calibr
      +                          ated;
  9680  1744  0871               	movf	Sensor_isCalibrated@sensor,w
  9681  1745  3E08               	addlw	8
  9682  1746  0086               	movwf	6
  9683  1747  0187               	clrf	7
  9684  1748  0C01               	rrf	1,w
  9685  1749  0C89               	rrf	9,f
  9686  174A  3901               	andlw	1
  9687  174B  0008               	return
  9688  174C                     __end_of_Sensor_isCalibrated:	
  9689                           
  9690                           	psect	text54
  9691  17E0                     __ptext54:	
  9692 ;; *************** function _Sensor_isEnabled *****************
  9693 ;; Defined at:
  9694 ;;		line 838 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9695 ;; Parameters:    Size  Location     Type
  9696 ;;  sensor          1    wreg     PTR struct .
  9697 ;;		 -> NULL(0), mtouch_sensor(9), 
  9698 ;; Auto vars:     Size  Location     Type
  9699 ;;  sensor          1    2[COMMON] PTR struct .
  9700 ;;		 -> NULL(0), mtouch_sensor(9), 
  9701 ;; Return value:  Size  Location     Type
  9702 ;;                  1    wreg      _Bool 
  9703 ;; Registers used:
  9704 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9705 ;; Tracked objects:
  9706 ;;		On entry : 0/0
  9707 ;;		On exit  : 0/0
  9708 ;;		Unchanged: 0/0
  9709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9710 ;;      Params:         0       0       0       0       0       0       0       0
  9711 ;;      Locals:         1       0       0       0       0       0       0       0
  9712 ;;      Temps:          1       0       0       0       0       0       0       0
  9713 ;;      Totals:         2       0       0       0       0       0       0       0
  9714 ;;Total ram usage:        2 bytes
  9715 ;; Hardware stack levels used:    1
  9716 ;; Hardware stack levels required when called:    4
  9717 ;; This function calls:
  9718 ;;		Nothing
  9719 ;; This function is called by:
  9720 ;;		_Sensor_Service
  9721 ;;		_Sensor_postAcquisitionProcess
  9722 ;;		_Sensor_Acq_ExecutePacket
  9723 ;; This function uses a non-reentrant model
  9724 ;;
  9725                           
  9726                           
  9727                           ;psect for function _Sensor_isEnabled
  9728  17E0                     _Sensor_isEnabled:	
  9729                           
  9730                           ;incstack = 0
  9731                           ; Regs used in _Sensor_isEnabled: [wreg+fsr1l+fsr1h+status,2+status,0]
  9732                           ;Sensor_isEnabled@sensor stored from wreg
  9733  17E0  00F2               	movwf	Sensor_isEnabled@sensor
  9734                           
  9735                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 838: static _Bool Sensor_isEnabled(mtouch_s
      +                          ensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 839: {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 840:     if(sensor!=((void*)0))
  9736  17E1  0872               	movf	Sensor_isEnabled@sensor,w
  9737  17E2  1903               	btfsc	3,2
  9738  17E3  2FEE               	goto	l3602
  9739                           
  9740                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 841:         return (_Bool)sensor->enabled;
  9741  17E4  0872               	movf	Sensor_isEnabled@sensor,w
  9742  17E5  3E08               	addlw	8
  9743  17E6  0086               	movwf	6
  9744  17E7  0187               	clrf	7
  9745  17E8  0C01               	rrf	1,w
  9746  17E9  00F1               	movwf	??_Sensor_isEnabled
  9747  17EA  0CF1               	rrf	??_Sensor_isEnabled,f
  9748  17EB  0C71               	rrf	??_Sensor_isEnabled,w
  9749  17EC  3901               	andlw	1
  9750  17ED  0008               	return
  9751  17EE                     l3602:	
  9752                           
  9753                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 843:         return 0;
  9754  17EE  3000               	movlw	0
  9755  17EF  0008               	return
  9756  17F0                     __end_of_Sensor_isEnabled:	
  9757                           
  9758                           	psect	text55
  9759  177B                     __ptext55:	
  9760 ;; *************** function _Sensor_isActive *****************
  9761 ;; Defined at:
  9762 ;;		line 865 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9763 ;; Parameters:    Size  Location     Type
  9764 ;;  sensor          1    wreg     PTR struct .
  9765 ;;		 -> NULL(0), mtouch_sensor(9), 
  9766 ;; Auto vars:     Size  Location     Type
  9767 ;;  sensor          1    1[COMMON] PTR struct .
  9768 ;;		 -> NULL(0), mtouch_sensor(9), 
  9769 ;; Return value:  Size  Location     Type
  9770 ;;                  1    wreg      _Bool 
  9771 ;; Registers used:
  9772 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9773 ;; Tracked objects:
  9774 ;;		On entry : 0/0
  9775 ;;		On exit  : 0/0
  9776 ;;		Unchanged: 0/0
  9777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9778 ;;      Params:         0       0       0       0       0       0       0       0
  9779 ;;      Locals:         1       0       0       0       0       0       0       0
  9780 ;;      Temps:          0       0       0       0       0       0       0       0
  9781 ;;      Totals:         1       0       0       0       0       0       0       0
  9782 ;;Total ram usage:        1 bytes
  9783 ;; Hardware stack levels used:    1
  9784 ;; Hardware stack levels required when called:    4
  9785 ;; This function calls:
  9786 ;;		Nothing
  9787 ;; This function is called by:
  9788 ;;		_Sensor_Acquisition
  9789 ;;		_Sensor_Acq_ExecutePacket
  9790 ;; This function uses a non-reentrant model
  9791 ;;
  9792                           
  9793                           
  9794                           ;psect for function _Sensor_isActive
  9795  177B                     _Sensor_isActive:	
  9796                           
  9797                           ;incstack = 0
  9798                           ; Regs used in _Sensor_isActive: [wreg+fsr1l+fsr1h+status,2+status,0]
  9799                           ;Sensor_isActive@sensor stored from wreg
  9800  177B  00F1               	movwf	Sensor_isActive@sensor
  9801                           
  9802                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 865: static __attribute__((inline)) _Bool S
      +                          ensor_isActive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 866:
      +                           {;mcc_generated_files/mtouch/mtouch_sensor.c: 867:     if(sensor == ((void*)0))
  9803  177C  0871               	movf	Sensor_isActive@sensor,w
  9804  177D  1D03               	btfss	3,2
  9805  177E  2F81               	goto	l3612
  9806                           
  9807                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 868:         return 0;
  9808  177F  3000               	movlw	0
  9809  1780  0008               	return
  9810  1781                     l3612:	
  9811                           
  9812                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 870:     return (_Bool)sensor->active;
  9813  1781  0871               	movf	Sensor_isActive@sensor,w
  9814  1782  3E08               	addlw	8
  9815  1783  0086               	movwf	6
  9816  1784  0187               	clrf	7
  9817  1785  0C01               	rrf	1,w
  9818  1786  3901               	andlw	1
  9819  1787  0008               	return
  9820  1788                     __end_of_Sensor_isActive:	
  9821                           
  9822                           	psect	text56
  9823  06EF                     __ptext56:	
  9824 ;; *************** function _Sensor_autoCalibration *****************
  9825 ;; Defined at:
  9826 ;;		line 671 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9827 ;; Parameters:    Size  Location     Type
  9828 ;;  sensor          1    wreg     PTR struct .
  9829 ;;		 -> NULL(0), mtouch_sensor(9), 
  9830 ;; Auto vars:     Size  Location     Type
  9831 ;;  sensor          1   10[COMMON] PTR struct .
  9832 ;;		 -> NULL(0), mtouch_sensor(9), 
  9833 ;;  adcIndex        1    9[COMMON] unsigned char 
  9834 ;; Return value:  Size  Location     Type
  9835 ;;                  1    wreg      void 
  9836 ;; Registers used:
  9837 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9838 ;; Tracked objects:
  9839 ;;		On entry : 0/0
  9840 ;;		On exit  : 0/0
  9841 ;;		Unchanged: 0/0
  9842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9843 ;;      Params:         0       0       0       0       0       0       0       0
  9844 ;;      Locals:         2       0       0       0       0       0       0       0
  9845 ;;      Temps:          4       0       0       0       0       0       0       0
  9846 ;;      Totals:         6       0       0       0       0       0       0       0
  9847 ;;Total ram usage:        6 bytes
  9848 ;; Hardware stack levels used:    1
  9849 ;; Hardware stack levels required when called:    5
  9850 ;; This function calls:
  9851 ;;		_Sensor_getScanGroupIndex
  9852 ;;		_Sensor_isCalibratingAcqTime
  9853 ;;		_Sensor_setCalibratAcqTime
  9854 ;;		_Sensor_setCalibrated
  9855 ;;		_abs
  9856 ;; This function is called by:
  9857 ;;		_Sensor_Acq_ExecutePacket
  9858 ;; This function uses a non-reentrant model
  9859 ;;
  9860                           
  9861                           
  9862                           ;psect for function _Sensor_autoCalibration
  9863  06EF                     _Sensor_autoCalibration:	
  9864                           
  9865                           ;incstack = 0
  9866                           ; Regs used in _Sensor_autoCalibration: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9867                           ;Sensor_autoCalibration@sensor stored from wreg
  9868  06EF  00FA               	movwf	Sensor_autoCalibration@sensor
  9869                           
  9870                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 671: static void Sensor_autoCalibration(mto
      +                          uch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 672: {;mcc_generated_f
      +                          iles/mtouch/mtouch_sensor.c: 673:     uint8_t adcIndex = Sensor_getScanGroupIndex(sensor
      +                          );
  9871  06F0  087A               	movf	Sensor_autoCalibration@sensor,w
  9872  06F1  318B  2362  3186   	fcall	_Sensor_getScanGroupIndex
  9873  06F4  00F5               	movwf	??_Sensor_autoCalibration
  9874  06F5  0875               	movf	??_Sensor_autoCalibration,w
  9875  06F6  00F9               	movwf	Sensor_autoCalibration@adcIndex
  9876                           
  9877                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 675:     if(!Sensor_isCalibratingAcqTime(se
      +                          nsor))
  9878  06F7  087A               	movf	Sensor_autoCalibration@sensor,w
  9879  06F8  3197  2733  3186   	fcall	_Sensor_isCalibratingAcqTime
  9880  06FB  3A00               	xorlw	0
  9881  06FC  1D03               	skipz
  9882  06FD  2F2E               	goto	l3664
  9883                           
  9884                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 676:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 677:         if(packet_sample[adcIndex] > ((mtouch_sensor_packetsample_t)(se
      +                          nsor->oversampling)<<9))
  9885  06FE  3579               	lslf	Sensor_autoCalibration@adcIndex,w
  9886  06FF  3E53               	addlw	(low (_packet_sample| 0))& (0+255)
  9887  0700  0086               	movwf	6
  9888  0701  0187               	clrf	7
  9889  0702  3F40               	moviw [0]fsr1
  9890  0703  00F5               	movwf	??_Sensor_autoCalibration
  9891  0704  3F41               	moviw [1]fsr1
  9892  0705  00F6               	movwf	??_Sensor_autoCalibration+1
  9893  0706  087A               	movf	Sensor_autoCalibration@sensor,w
  9894  0707  3E04               	addlw	4
  9895  0708  0086               	movwf	6
  9896  0709  0187               	clrf	7
  9897  070A  0801               	movf	1,w
  9898  070B  00F7               	movwf	??_Sensor_autoCalibration+2
  9899  070C  01F8               	clrf	??_Sensor_autoCalibration+3
  9900  070D  3009               	movlw	9
  9901  070E                     u2225:	
  9902  070E  35F7               	lslf	??_Sensor_autoCalibration+2,f
  9903  070F  0DF8               	rlf	??_Sensor_autoCalibration+3,f
  9904  0710  0B89               	decfsz	9,f
  9905  0711  2F0E               	goto	u2225
  9906  0712  0876               	movf	??_Sensor_autoCalibration+1,w
  9907  0713  0278               	subwf	??_Sensor_autoCalibration+3,w
  9908  0714  1D03               	skipz
  9909  0715  2F18               	goto	u2235
  9910  0716  0875               	movf	??_Sensor_autoCalibration,w
  9911  0717  0277               	subwf	??_Sensor_autoCalibration+2,w
  9912  0718                     u2235:	
  9913  0718  1803               	skipnc
  9914  0719  2F2A               	goto	l3662
  9915                           
  9916                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 678:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 679:             if(++(sensor->addcap) >= (uint8_t)0x0F)
  9917  071A  3001               	movlw	1
  9918  071B  00F5               	movwf	??_Sensor_autoCalibration
  9919  071C  087A               	movf	Sensor_autoCalibration@sensor,w
  9920  071D  3E05               	addlw	5
  9921  071E  0086               	movwf	6
  9922  071F  0187               	clrf	7
  9923  0720  0875               	movf	??_Sensor_autoCalibration,w
  9924  0721  0781               	addwf	1,f
  9925  0722  300F               	movlw	15
  9926  0723  0201               	subwf	1,w
  9927  0724  1C03               	skipc
  9928  0725  0008               	return
  9929                           
  9930                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 680:                 Sensor_setCalibratAcqT
      +                          ime(sensor);
  9931  0726  087A               	movf	Sensor_autoCalibration@sensor,w
  9932  0727  3197  276E         	fcall	_Sensor_setCalibratAcqTime
  9933  0729  0008               	return
  9934  072A                     l3662:	
  9935                           
  9936                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 683:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 684:              Sensor_setCalibratAcqTime(sensor);
  9937  072A  087A               	movf	Sensor_autoCalibration@sensor,w
  9938  072B  3197  276E         	fcall	_Sensor_setCalibratAcqTime
  9939  072D  0008               	return
  9940  072E                     l3664:	
  9941                           
  9942                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 688:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 689:         if((mtouch_sensor_packetsample_t)abs(packet_sample[adcIndex] - 
      +                          sensor->rawSample) < ((mtouch_sensor_packetsample_t)(sensor->oversampling)<<1))
  9943  072E  087A               	movf	Sensor_autoCalibration@sensor,w
  9944  072F  3E04               	addlw	4
  9945  0730  0086               	movwf	6
  9946  0731  0187               	clrf	7
  9947  0732  0801               	movf	1,w
  9948  0733  00F5               	movwf	??_Sensor_autoCalibration
  9949  0734  01F6               	clrf	??_Sensor_autoCalibration+1
  9950  0735  35F5               	lslf	??_Sensor_autoCalibration,f
  9951  0736  0DF6               	rlf	??_Sensor_autoCalibration+1,f
  9952  0737  087A               	movf	Sensor_autoCalibration@sensor,w
  9953  0738  3E06               	addlw	6
  9954  0739  0086               	movwf	6
  9955  073A  0187               	clrf	7
  9956  073B  3579               	lslf	Sensor_autoCalibration@adcIndex,w
  9957  073C  3E53               	addlw	(low (_packet_sample| 0))& (0+255)
  9958  073D  0084               	movwf	4
  9959  073E  0185               	clrf	5
  9960  073F  3F40               	moviw [0]fsr1
  9961  0740  0200               	subwf	0,w
  9962  0741  00F1               	movwf	abs@a
  9963  0742  3101               	addfsr 0,1
  9964  0743  3F41               	moviw [1]fsr1
  9965  0744  3B00               	subwfb	0,w
  9966  0745  00F2               	movwf	abs@a+1
  9967  0746  3188  20DC  3186   	fcall	_abs
  9968  0749  0876               	movf	??_Sensor_autoCalibration+1,w
  9969  074A  0272               	subwf	?_abs+1,w
  9970  074B  1D03               	skipz
  9971  074C  2F4F               	goto	u2255
  9972  074D  0875               	movf	??_Sensor_autoCalibration,w
  9973  074E  0271               	subwf	?_abs,w
  9974  074F                     u2255:	
  9975  074F  1803               	skipnc
  9976  0750  2F5D               	goto	l3670
  9977                           
  9978                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 690:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 691:             sensor->precharge_time = (mtouch_sensor_time_t)32;
  9979  0751  3020               	movlw	32
  9980  0752  00F5               	movwf	??_Sensor_autoCalibration
  9981  0753  087A               	movf	Sensor_autoCalibration@sensor,w
  9982  0754  3E02               	addlw	2
  9983  0755  0086               	movwf	6
  9984  0756  0187               	clrf	7
  9985  0757  0875               	movf	??_Sensor_autoCalibration,w
  9986  0758  0081               	movwf	1
  9987                           
  9988                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 692:             Sensor_setCalibrated(senso
      +                          r);
  9989  0759  087A               	movf	Sensor_autoCalibration@sensor,w
  9990  075A  3197  2756         	fcall	_Sensor_setCalibrated
  9991                           
  9992                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 693:         }
  9993  075C  0008               	return
  9994  075D                     l3670:	
  9995                           
  9996                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 695:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 699:             sensor->acquisition_time += (uint8_t)2;
  9997  075D  3002               	movlw	2
  9998  075E  00F5               	movwf	??_Sensor_autoCalibration
  9999  075F  087A               	movf	Sensor_autoCalibration@sensor,w
 10000  0760  3E03               	addlw	3
 10001  0761  0086               	movwf	6
 10002  0762  0187               	clrf	7
 10003  0763  0875               	movf	??_Sensor_autoCalibration,w
 10004  0764  0781               	addwf	1,f
 10005                           
 10006                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 700:             if((sensor->acquisition_ti
      +                          me)>=(mtouch_sensor_time_t)32)
 10007  0765  087A               	movf	Sensor_autoCalibration@sensor,w
 10008  0766  3E03               	addlw	3
 10009  0767  0086               	movwf	6
 10010  0768  0187               	clrf	7
 10011  0769  3020               	movlw	32
 10012  076A  0201               	subwf	1,w
 10013  076B  1C03               	skipc
 10014  076C  0008               	return
 10015                           
 10016                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 701:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 702:                 sensor->precharge_time = (mtouch_sensor_time_t)
      +                          32;
 10017  076D  3020               	movlw	32
 10018  076E  00F5               	movwf	??_Sensor_autoCalibration
 10019  076F  087A               	movf	Sensor_autoCalibration@sensor,w
 10020  0770  3E02               	addlw	2
 10021  0771  0086               	movwf	6
 10022  0772  0187               	clrf	7
 10023  0773  0875               	movf	??_Sensor_autoCalibration,w
 10024  0774  0081               	movwf	1
 10025                           
 10026                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 703:                 Sensor_setCalibrated(s
      +                          ensor);
 10027  0775  087A               	movf	Sensor_autoCalibration@sensor,w
 10028  0776  3197  2756         	fcall	_Sensor_setCalibrated
 10029  0778  0008               	return
 10030  0779                     __end_of_Sensor_autoCalibration:	
 10031                           
 10032                           	psect	text57
 10033  08DC                     __ptext57:	
 10034 ;; *************** function _abs *****************
 10035 ;; Defined at:
 10036 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
 10037 ;; Parameters:    Size  Location     Type
 10038 ;;  a               2    1[COMMON] int 
 10039 ;; Auto vars:     Size  Location     Type
 10040 ;;		None
 10041 ;; Return value:  Size  Location     Type
 10042 ;;                  2    1[COMMON] int 
 10043 ;; Registers used:
 10044 ;;		wreg, status,2, status,0
 10045 ;; Tracked objects:
 10046 ;;		On entry : 0/0
 10047 ;;		On exit  : 0/0
 10048 ;;		Unchanged: 0/0
 10049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10050 ;;      Params:         2       0       0       0       0       0       0       0
 10051 ;;      Locals:         0       0       0       0       0       0       0       0
 10052 ;;      Temps:          2       0       0       0       0       0       0       0
 10053 ;;      Totals:         4       0       0       0       0       0       0       0
 10054 ;;Total ram usage:        4 bytes
 10055 ;; Hardware stack levels used:    1
 10056 ;; Hardware stack levels required when called:    4
 10057 ;; This function calls:
 10058 ;;		Nothing
 10059 ;; This function is called by:
 10060 ;;		_Sensor_postAcquisitionProcess
 10061 ;;		_Sensor_Acq_ExecutePacket
 10062 ;;		_Sensor_autoCalibration
 10063 ;; This function uses a non-reentrant model
 10064 ;;
 10065                           
 10066                           
 10067                           ;psect for function _abs
 10068  08DC                     _abs:	
 10069                           
 10070                           ;incstack = 0
 10071                           ; Regs used in _abs: [wreg+status,2+status,0]
 10072  08DC  0872               	movf	abs@a+1,w
 10073  08DD  3A80               	xorlw	128
 10074  08DE  00F3               	movwf	??_abs
 10075  08DF  3080               	movlw	128
 10076  08E0  0273               	subwf	??_abs,w
 10077  08E1  1D03               	skipz
 10078  08E2  28E5               	goto	u2095
 10079  08E3  3001               	movlw	1
 10080  08E4  0271               	subwf	abs@a,w
 10081  08E5                     u2095:	
 10082  08E5  1803               	skipnc
 10083  08E6  0008               	return
 10084  08E7  0971               	comf	abs@a,w
 10085  08E8  00F3               	movwf	??_abs
 10086  08E9  0972               	comf	abs@a+1,w
 10087  08EA  00F4               	movwf	??_abs+1
 10088  08EB  0AF3               	incf	??_abs,f
 10089  08EC  1903               	skipnz
 10090  08ED  0AF4               	incf	??_abs+1,f
 10091  08EE  0873               	movf	??_abs,w
 10092  08EF  00F1               	movwf	?_abs
 10093  08F0  0874               	movf	??_abs+1,w
 10094  08F1  00F2               	movwf	?_abs+1
 10095  08F2  0008               	return
 10096  08F3                     __end_of_abs:	
 10097                           
 10098                           	psect	text58
 10099  1756                     __ptext58:	
 10100 ;; *************** function _Sensor_setCalibrated *****************
 10101 ;; Defined at:
 10102 ;;		line 908 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10103 ;; Parameters:    Size  Location     Type
 10104 ;;  sensor          1    wreg     PTR struct .
 10105 ;;		 -> NULL(0), mtouch_sensor(9), 
 10106 ;; Auto vars:     Size  Location     Type
 10107 ;;  sensor          1    1[COMMON] PTR struct .
 10108 ;;		 -> NULL(0), mtouch_sensor(9), 
 10109 ;; Return value:  Size  Location     Type
 10110 ;;                  1    wreg      void 
 10111 ;; Registers used:
 10112 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10113 ;; Tracked objects:
 10114 ;;		On entry : 0/0
 10115 ;;		On exit  : 0/0
 10116 ;;		Unchanged: 0/0
 10117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10118 ;;      Params:         0       0       0       0       0       0       0       0
 10119 ;;      Locals:         1       0       0       0       0       0       0       0
 10120 ;;      Temps:          0       0       0       0       0       0       0       0
 10121 ;;      Totals:         1       0       0       0       0       0       0       0
 10122 ;;Total ram usage:        1 bytes
 10123 ;; Hardware stack levels used:    1
 10124 ;; Hardware stack levels required when called:    4
 10125 ;; This function calls:
 10126 ;;		Nothing
 10127 ;; This function is called by:
 10128 ;;		_Sensor_autoCalibration
 10129 ;; This function uses a non-reentrant model
 10130 ;;
 10131                           
 10132                           
 10133                           ;psect for function _Sensor_setCalibrated
 10134  1756                     _Sensor_setCalibrated:	
 10135                           
 10136                           ;incstack = 0
 10137                           ; Regs used in _Sensor_setCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0]
 10138                           ;Sensor_setCalibrated@sensor stored from wreg
 10139  1756  00F1               	movwf	Sensor_setCalibrated@sensor
 10140                           
 10141                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 908: static __attribute__((inline)) void Se
      +                          nsor_setCalibrated(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          909: {;mcc_generated_files/mtouch/mtouch_sensor.c: 910:     sensor->calibrated = 1;
 10142  1757  0871               	movf	Sensor_setCalibrated@sensor,w
 10143  1758  3E08               	addlw	8
 10144  1759  0086               	movwf	6
 10145  175A  0187               	clrf	7
 10146  175B  1501               	bsf	1,2
 10147                           
 10148                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 911:     sensor->acqTime_cal = 0;
 10149  175C  0871               	movf	Sensor_setCalibrated@sensor,w
 10150  175D  3E08               	addlw	8
 10151  175E  0086               	movwf	6
 10152  175F  0187               	clrf	7
 10153  1760  1201               	bcf	1,4
 10154  1761  0008               	return
 10155  1762                     __end_of_Sensor_setCalibrated:	
 10156                           
 10157                           	psect	text59
 10158  176E                     __ptext59:	
 10159 ;; *************** function _Sensor_setCalibratAcqTime *****************
 10160 ;; Defined at:
 10161 ;;		line 914 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10162 ;; Parameters:    Size  Location     Type
 10163 ;;  sensor          1    wreg     PTR struct .
 10164 ;;		 -> NULL(0), mtouch_sensor(9), 
 10165 ;; Auto vars:     Size  Location     Type
 10166 ;;  sensor          1    1[COMMON] PTR struct .
 10167 ;;		 -> NULL(0), mtouch_sensor(9), 
 10168 ;; Return value:  Size  Location     Type
 10169 ;;                  1    wreg      void 
 10170 ;; Registers used:
 10171 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10172 ;; Tracked objects:
 10173 ;;		On entry : 0/0
 10174 ;;		On exit  : 0/0
 10175 ;;		Unchanged: 0/0
 10176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10177 ;;      Params:         0       0       0       0       0       0       0       0
 10178 ;;      Locals:         1       0       0       0       0       0       0       0
 10179 ;;      Temps:          0       0       0       0       0       0       0       0
 10180 ;;      Totals:         1       0       0       0       0       0       0       0
 10181 ;;Total ram usage:        1 bytes
 10182 ;; Hardware stack levels used:    1
 10183 ;; Hardware stack levels required when called:    4
 10184 ;; This function calls:
 10185 ;;		Nothing
 10186 ;; This function is called by:
 10187 ;;		_Sensor_autoCalibration
 10188 ;; This function uses a non-reentrant model
 10189 ;;
 10190                           
 10191                           
 10192                           ;psect for function _Sensor_setCalibratAcqTime
 10193  176E                     _Sensor_setCalibratAcqTime:	
 10194                           
 10195                           ;incstack = 0
 10196                           ; Regs used in _Sensor_setCalibratAcqTime: [wreg+fsr1l+fsr1h+status,2+status,0]
 10197                           ;Sensor_setCalibratAcqTime@sensor stored from wreg
 10198  176E  00F1               	movwf	Sensor_setCalibratAcqTime@sensor
 10199                           
 10200                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 914: static __attribute__((inline)) void Se
      +                          nsor_setCalibratAcqTime(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_senso
      +                          r.c: 915: {;mcc_generated_files/mtouch/mtouch_sensor.c: 916:     sensor->acqTime_cal = 1
      +                          ;
 10201  176F  0871               	movf	Sensor_setCalibratAcqTime@sensor,w
 10202  1770  3E08               	addlw	8
 10203  1771  0086               	movwf	6
 10204  1772  0187               	clrf	7
 10205  1773  1601               	bsf	1,4
 10206                           
 10207                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 917:     sensor->acquisition_time = (mtouch
      +                          _sensor_time_t)1;
 10208  1774  0871               	movf	Sensor_setCalibratAcqTime@sensor,w
 10209  1775  3E03               	addlw	3
 10210  1776  0086               	movwf	6
 10211  1777  0187               	clrf	7
 10212  1778  0181               	clrf	1
 10213  1779  0A81               	incf	1,f
 10214  177A  0008               	return
 10215  177B                     __end_of_Sensor_setCalibratAcqTime:	
 10216                           
 10217                           	psect	text60
 10218  1733                     __ptext60:	
 10219 ;; *************** function _Sensor_isCalibratingAcqTime *****************
 10220 ;; Defined at:
 10221 ;;		line 920 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10222 ;; Parameters:    Size  Location     Type
 10223 ;;  sensor          1    wreg     PTR struct .
 10224 ;;		 -> NULL(0), mtouch_sensor(9), 
 10225 ;; Auto vars:     Size  Location     Type
 10226 ;;  sensor          1    1[COMMON] PTR struct .
 10227 ;;		 -> NULL(0), mtouch_sensor(9), 
 10228 ;; Return value:  Size  Location     Type
 10229 ;;                  1    wreg      _Bool 
 10230 ;; Registers used:
 10231 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10232 ;; Tracked objects:
 10233 ;;		On entry : 0/0
 10234 ;;		On exit  : 0/0
 10235 ;;		Unchanged: 0/0
 10236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10237 ;;      Params:         0       0       0       0       0       0       0       0
 10238 ;;      Locals:         1       0       0       0       0       0       0       0
 10239 ;;      Temps:          0       0       0       0       0       0       0       0
 10240 ;;      Totals:         1       0       0       0       0       0       0       0
 10241 ;;Total ram usage:        1 bytes
 10242 ;; Hardware stack levels used:    1
 10243 ;; Hardware stack levels required when called:    4
 10244 ;; This function calls:
 10245 ;;		Nothing
 10246 ;; This function is called by:
 10247 ;;		_Sensor_loadADCSettings
 10248 ;;		_Sensor_autoCalibration
 10249 ;; This function uses a non-reentrant model
 10250 ;;
 10251                           
 10252                           
 10253                           ;psect for function _Sensor_isCalibratingAcqTime
 10254  1733                     _Sensor_isCalibratingAcqTime:	
 10255                           
 10256                           ;incstack = 0
 10257                           ; Regs used in _Sensor_isCalibratingAcqTime: [wreg+fsr1l+fsr1h+status,2+status,0]
 10258                           ;Sensor_isCalibratingAcqTime@sensor stored from wreg
 10259  1733  00F1               	movwf	Sensor_isCalibratingAcqTime@sensor
 10260                           
 10261                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 920: static __attribute__((inline)) _Bool S
      +                          ensor_isCalibratingAcqTime(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_se
      +                          nsor.c: 921: {;mcc_generated_files/mtouch/mtouch_sensor.c: 922:     return (_Bool)sensor
      +                          ->acqTime_cal;
 10262  1734  0871               	movf	Sensor_isCalibratingAcqTime@sensor,w
 10263  1735  3E08               	addlw	8
 10264  1736  0086               	movwf	6
 10265  1737  0187               	clrf	7
 10266  1738  0E01               	swapf	1,w
 10267  1739  3901               	andlw	1
 10268  173A  0008               	return
 10269  173B                     __end_of_Sensor_isCalibratingAcqTime:	
 10270                           
 10271                           	psect	text61
 10272  0B62                     __ptext61:	
 10273 ;; *************** function _Sensor_getScanGroupIndex *****************
 10274 ;; Defined at:
 10275 ;;		line 337 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10276 ;; Parameters:    Size  Location     Type
 10277 ;;  sensor          1    wreg     PTR struct .
 10278 ;;		 -> NULL(0), mtouch_sensor(9), 
 10279 ;; Auto vars:     Size  Location     Type
 10280 ;;  sensor          1    3[COMMON] PTR struct .
 10281 ;;		 -> NULL(0), mtouch_sensor(9), 
 10282 ;;  sensorGroup     1    4[COMMON] unsigned char 
 10283 ;; Return value:  Size  Location     Type
 10284 ;;                  1    wreg      unsigned char 
 10285 ;; Registers used:
 10286 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 10287 ;; Tracked objects:
 10288 ;;		On entry : 0/0
 10289 ;;		On exit  : 0/0
 10290 ;;		Unchanged: 0/0
 10291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10292 ;;      Params:         0       0       0       0       0       0       0       0
 10293 ;;      Locals:         2       0       0       0       0       0       0       0
 10294 ;;      Temps:          2       0       0       0       0       0       0       0
 10295 ;;      Totals:         4       0       0       0       0       0       0       0
 10296 ;;Total ram usage:        4 bytes
 10297 ;; Hardware stack levels used:    1
 10298 ;; Hardware stack levels required when called:    4
 10299 ;; This function calls:
 10300 ;;		Nothing
 10301 ;; This function is called by:
 10302 ;;		_Sensor_postAcquisitionProcess
 10303 ;;		_Sensor_autoCalibration
 10304 ;;		_Sensor_RawSample_Update
 10305 ;; This function uses a non-reentrant model
 10306 ;;
 10307                           
 10308                           
 10309                           ;psect for function _Sensor_getScanGroupIndex
 10310  0B62                     _Sensor_getScanGroupIndex:	
 10311                           
 10312                           ;incstack = 0
 10313                           ; Regs used in _Sensor_getScanGroupIndex: [wreg-fsr0h+status,2+status,0+pclath]
 10314                           ;Sensor_getScanGroupIndex@sensor stored from wreg
 10315  0B62  00F3               	movwf	Sensor_getScanGroupIndex@sensor
 10316                           
 10317                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 337: static uint8_t Sensor_getScanGroupInde
      +                          x(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 338: {;mcc_genera
      +                          ted_files/mtouch/mtouch_sensor.c: 339:     uint8_t sensorGroup;;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 340:     for(sensorGroup = 0; sensorGroup < 1u; sensorGroup++)
 10318  0B63  01F4               	clrf	Sensor_getScanGroupIndex@sensorGroup
 10319  0B64                     l3534:	
 10320                           
 10321                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 341:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 342:         if(sensor_scan_group[sensorGroup].sensor_adc1 == sensor)
 10322  0B64  0874               	movf	Sensor_getScanGroupIndex@sensorGroup,w
 10323  0B65  00F1               	movwf	??_Sensor_getScanGroupIndex
 10324  0B66  01F2               	clrf	??_Sensor_getScanGroupIndex+1
 10325  0B67  35F1               	lslf	??_Sensor_getScanGroupIndex,f
 10326  0B68  0DF2               	rlf	??_Sensor_getScanGroupIndex+1,f
 10327  0B69  3021               	movlw	low (_sensor_scan_group| (0+32768))
 10328  0B6A  0771               	addwf	??_Sensor_getScanGroupIndex,w
 10329  0B6B  0084               	movwf	4
 10330  0B6C  3098               	movlw	high (_sensor_scan_group| (0+32768))
 10331  0B6D  3D72               	addwfc	??_Sensor_getScanGroupIndex+1,w
 10332  0B6E  0085               	movwf	5
 10333  0B6F  0800               	movf	0,w	;code access
 10334  0B70  0673               	xorwf	Sensor_getScanGroupIndex@sensor,w
 10335  0B71  1D03               	skipz
 10336  0B72  2B75               	goto	l3540
 10337  0B73                     l3536:	
 10338                           
 10339                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 343:             return 0;
 10340  0B73  3000               	movlw	0
 10341  0B74  0008               	return
 10342  0B75                     l3540:	
 10343                           
 10344                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 344:         if(sensor_scan_group[sensorGro
      +                          up].sensor_adc2 == sensor)
 10345  0B75  0874               	movf	Sensor_getScanGroupIndex@sensorGroup,w
 10346  0B76  00F1               	movwf	??_Sensor_getScanGroupIndex
 10347  0B77  01F2               	clrf	??_Sensor_getScanGroupIndex+1
 10348  0B78  35F1               	lslf	??_Sensor_getScanGroupIndex,f
 10349  0B79  0DF2               	rlf	??_Sensor_getScanGroupIndex+1,f
 10350  0B7A  3022               	movlw	low ((_sensor_scan_group+1)| (0+32768))
 10351  0B7B  0771               	addwf	??_Sensor_getScanGroupIndex,w
 10352  0B7C  0084               	movwf	4
 10353  0B7D  3098               	movlw	high ((_sensor_scan_group+1)| (0+32768))
 10354  0B7E  3D72               	addwfc	??_Sensor_getScanGroupIndex+1,w
 10355  0B7F  0085               	movwf	5
 10356  0B80  0800               	movf	0,w	;code access
 10357  0B81  0673               	xorwf	Sensor_getScanGroupIndex@sensor,w
 10358  0B82  1D03               	skipz
 10359  0B83  2B86               	goto	l3546
 10360                           
 10361                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 345:             return 1;
 10362  0B84  3001               	movlw	1
 10363  0B85  0008               	return
 10364  0B86                     l3546:	
 10365                           
 10366                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 346:     }
 10367  0B86  3001               	movlw	1
 10368  0B87  00F1               	movwf	??_Sensor_getScanGroupIndex
 10369  0B88  0871               	movf	??_Sensor_getScanGroupIndex,w
 10370  0B89  07F4               	addwf	Sensor_getScanGroupIndex@sensorGroup,f
 10371  0B8A  0874               	movf	Sensor_getScanGroupIndex@sensorGroup,w
 10372  0B8B  1D03               	btfss	3,2
 10373  0B8C  2B73               	goto	l3536
 10374  0B8D  2B64               	goto	l3534
 10375  0B8E                     __end_of_Sensor_getScanGroupIndex:	
 10376                           
 10377                           	psect	text62
 10378  17D0                     __ptext62:	
 10379 ;; *************** function _MTOUCH_Sensor_Scan_Initialize *****************
 10380 ;; Defined at:
 10381 ;;		line 222 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10382 ;; Parameters:    Size  Location     Type
 10383 ;;		None
 10384 ;; Auto vars:     Size  Location     Type
 10385 ;;		None
 10386 ;; Return value:  Size  Location     Type
 10387 ;;                  1    wreg      void 
 10388 ;; Registers used:
 10389 ;;		wreg, status,2, status,0
 10390 ;; Tracked objects:
 10391 ;;		On entry : 0/0
 10392 ;;		On exit  : 0/0
 10393 ;;		Unchanged: 0/0
 10394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10395 ;;      Params:         0       0       0       0       0       0       0       0
 10396 ;;      Locals:         0       0       0       0       0       0       0       0
 10397 ;;      Temps:          0       0       0       0       0       0       0       0
 10398 ;;      Totals:         0       0       0       0       0       0       0       0
 10399 ;;Total ram usage:        0 bytes
 10400 ;; Hardware stack levels used:    1
 10401 ;; Hardware stack levels required when called:    4
 10402 ;; This function calls:
 10403 ;;		Nothing
 10404 ;; This function is called by:
 10405 ;;		_MTOUCH_Initialize
 10406 ;;		_Sensor_Acq_ExecutePacket
 10407 ;; This function uses a non-reentrant model
 10408 ;;
 10409                           
 10410                           
 10411                           ;psect for function _MTOUCH_Sensor_Scan_Initialize
 10412  17D0                     _MTOUCH_Sensor_Scan_Initialize:	
 10413                           
 10414                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 224:     T2CONbits.T2CKPS = 0x0;
 10415                           
 10416                           ;incstack = 0
 10417                           ; Regs used in _MTOUCH_Sensor_Scan_Initialize: [wreg+status,2+status,0]
 10418  17D0  30FC               	movlw	-4
 10419  17D1  0020               	movlb	0	; select bank0
 10420  17D2  059C               	andwf	28,f	;volatile
 10421                           
 10422                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 226:     AD1CON0 = (uint8_t)0;
 10423  17D3  002E               	movlb	14	; select bank14
 10424  17D4  0191               	clrf	17	;volatile
 10425                           
 10426                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 227:     AD2CON0 = (uint8_t)0;
 10427  17D5  002F               	movlb	15	; select bank15
 10428  17D6  0191               	clrf	17	;volatile
 10429                           
 10430                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 228:     ADCOMCON = (uint8_t)( 0x1<<7 | 0x1
      +                          <<4 | 0x0 );
 10431  17D7  3090               	movlw	144
 10432  17D8  002E               	movlb	14	; select bank14
 10433  17D9  0092               	movwf	18	;volatile
 10434                           
 10435                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 229:     AD1CON3 = (uint8_t)0b01000000;
 10436  17DA  3040               	movlw	64
 10437  17DB  0094               	movwf	20	;volatile
 10438                           
 10439                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 230:     AD2CON3 = (uint8_t)0b01000000;
 10440  17DC  3040               	movlw	64
 10441  17DD  002F               	movlb	15	; select bank15
 10442  17DE  0094               	movwf	20	;volatile
 10443  17DF  0008               	return
 10444  17E0                     __end_of_MTOUCH_Sensor_Scan_Initialize:	
 10445                           
 10446                           	psect	text63
 10447  17B1                     __ptext63:	
 10448 ;; *************** function _MTOUCH_Button_ServiceAll *****************
 10449 ;; Defined at:
 10450 ;;		line 173 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10451 ;; Parameters:    Size  Location     Type
 10452 ;;		None
 10453 ;; Auto vars:     Size  Location     Type
 10454 ;;  button          1   14[BANK0 ] enum E3067
 10455 ;; Return value:  Size  Location     Type
 10456 ;;                  1    wreg      void 
 10457 ;; Registers used:
 10458 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10459 ;; Tracked objects:
 10460 ;;		On entry : 0/0
 10461 ;;		On exit  : 0/0
 10462 ;;		Unchanged: 0/0
 10463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10464 ;;      Params:         0       0       0       0       0       0       0       0
 10465 ;;      Locals:         0       1       0       0       0       0       0       0
 10466 ;;      Temps:          0       1       0       0       0       0       0       0
 10467 ;;      Totals:         0       2       0       0       0       0       0       0
 10468 ;;Total ram usage:        2 bytes
 10469 ;; Hardware stack levels used:    1
 10470 ;; Hardware stack levels required when called:    9
 10471 ;; This function calls:
 10472 ;;		_Button_Service
 10473 ;; This function is called by:
 10474 ;;		_MTOUCH_Service_Mainloop
 10475 ;; This function uses a non-reentrant model
 10476 ;;
 10477                           
 10478                           
 10479                           ;psect for function _MTOUCH_Button_ServiceAll
 10480  17B1                     _MTOUCH_Button_ServiceAll:	
 10481                           
 10482                           ;mcc_generated_files/mtouch/mtouch_button.c: 175:     enum mtouch_button_names button;;m
      +                          cc_generated_files/mtouch/mtouch_button.c: 178:     for (button = 0; button < 1u; button
      +                          ++)
 10483                           
 10484                           ;incstack = 0
 10485                           ; Regs used in _MTOUCH_Button_ServiceAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10486  17B1  0020               	movlb	0	; select bank0
 10487  17B2  01AE               	clrf	MTOUCH_Button_ServiceAll@button
 10488  17B3                     l5894:	
 10489                           
 10490                           ;mcc_generated_files/mtouch/mtouch_button.c: 179:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 180:         Button_Service(button);
 10491  17B3  082E               	movf	MTOUCH_Button_ServiceAll@button,w
 10492  17B4  318D  2554  3197   	fcall	_Button_Service
 10493                           
 10494                           ;mcc_generated_files/mtouch/mtouch_button.c: 181:     }
 10495  17B7  3001               	movlw	1
 10496  17B8  0020               	movlb	0	; select bank0
 10497  17B9  00AD               	movwf	??_MTOUCH_Button_ServiceAll
 10498  17BA  082D               	movf	??_MTOUCH_Button_ServiceAll,w
 10499  17BB  07AE               	addwf	MTOUCH_Button_ServiceAll@button,f
 10500  17BC  082E               	movf	MTOUCH_Button_ServiceAll@button,w
 10501  17BD  1D03               	btfss	3,2
 10502  17BE  0008               	return
 10503  17BF  2FB3               	goto	l5894
 10504  17C0                     __end_of_MTOUCH_Button_ServiceAll:	
 10505                           
 10506                           	psect	text64
 10507  0D54                     __ptext64:	
 10508 ;; *************** function _Button_Service *****************
 10509 ;; Defined at:
 10510 ;;		line 184 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10511 ;; Parameters:    Size  Location     Type
 10512 ;;  name            1    wreg     enum E3067
 10513 ;; Auto vars:     Size  Location     Type
 10514 ;;  name            1   11[BANK0 ] enum E3067
 10515 ;;  button          1   12[BANK0 ] PTR struct .
 10516 ;;		 -> mtouch_button(16), 
 10517 ;; Return value:  Size  Location     Type
 10518 ;;                  1    wreg      void 
 10519 ;; Registers used:
 10520 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10521 ;; Tracked objects:
 10522 ;;		On entry : 0/0
 10523 ;;		On exit  : 0/0
 10524 ;;		Unchanged: 0/0
 10525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10526 ;;      Params:         0       0       0       0       0       0       0       0
 10527 ;;      Locals:         0       2       0       0       0       0       0       0
 10528 ;;      Temps:          0       2       0       0       0       0       0       0
 10529 ;;      Totals:         0       4       0       0       0       0       0       0
 10530 ;;Total ram usage:        4 bytes
 10531 ;; Hardware stack levels used:    1
 10532 ;; Hardware stack levels required when called:    8
 10533 ;; This function calls:
 10534 ;;		_Button_Deviation_Update
 10535 ;;		_Button_Reading_Update
 10536 ;;		_Button_State_Initializing
 10537 ;;		_Button_State_NotPressed
 10538 ;;		_Button_State_Pressed
 10539 ;;		_MTOUCH_Button_Initialize
 10540 ;;		_MTOUCH_Sensor_isCalibrated
 10541 ;;		_MTOUCH_Sensor_wasSampled
 10542 ;; This function is called by:
 10543 ;;		_MTOUCH_Button_ServiceAll
 10544 ;; This function uses a non-reentrant model
 10545 ;;
 10546                           
 10547                           
 10548                           ;psect for function _Button_Service
 10549  0D54                     _Button_Service:	
 10550                           
 10551                           ;incstack = 0
 10552                           ; Regs used in _Button_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10553                           ;Button_Service@name stored from wreg
 10554  0D54  0020               	movlb	0	; select bank0
 10555  0D55  00AB               	movwf	Button_Service@name
 10556                           
 10557                           ;mcc_generated_files/mtouch/mtouch_button.c: 184: static void Button_Service(enum mtouch
      +                          _button_names name);mcc_generated_files/mtouch/mtouch_button.c: 185: {;mcc_generated_fil
      +                          es/mtouch/mtouch_button.c: 186:     mtouch_button_t* button = &mtouch_button[name];
 10558  0D56  082B               	movf	Button_Service@name,w
 10559  0D57  00A9               	movwf	??_Button_Service
 10560  0D58  3003               	movlw	3
 10561  0D59                     u4895:	
 10562  0D59  35A9               	lslf	??_Button_Service,f
 10563  0D5A  3EFF               	addlw	-1
 10564  0D5B  1D03               	skipz
 10565  0D5C  2D59               	goto	u4895
 10566  0D5D  3529               	lslf	??_Button_Service,w
 10567  0D5E  3EC4               	addlw	(low (_mtouch_button| 0))& (0+255)
 10568  0D5F  00AA               	movwf	??_Button_Service+1
 10569  0D60  082A               	movf	??_Button_Service+1,w
 10570  0D61  00AC               	movwf	Button_Service@button
 10571                           
 10572                           ;mcc_generated_files/mtouch/mtouch_button.c: 188:     if (MTOUCH_Sensor_wasSampled(butto
      +                          n->sensor) && MTOUCH_Sensor_isCalibrated(button->sensor))
 10573  0D62  0A2C               	incf	Button_Service@button,w
 10574  0D63  0086               	movwf	6
 10575  0D64  0187               	clrf	7
 10576  0D65  0801               	movf	1,w
 10577  0D66  3197  27A3  318D   	fcall	_MTOUCH_Sensor_wasSampled
 10578  0D69  3A00               	xorlw	0
 10579  0D6A  1903               	skipnz
 10580  0D6B  0008               	return
 10581  0D6C  0020               	movlb	0	; select bank0
 10582  0D6D  0A2C               	incf	Button_Service@button,w
 10583  0D6E  0086               	movwf	6
 10584  0D6F  0187               	clrf	7
 10585  0D70  0801               	movf	1,w
 10586  0D71  3188  2071  318D   	fcall	_MTOUCH_Sensor_isCalibrated
 10587  0D74  3A00               	xorlw	0
 10588  0D75  1903               	skipnz
 10589  0D76  0008               	return
 10590                           
 10591                           ;mcc_generated_files/mtouch/mtouch_button.c: 189:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 190:         Button_Reading_Update(button);
 10592  0D77  0020               	movlb	0	; select bank0
 10593  0D78  082C               	movf	Button_Service@button,w
 10594  0D79  3197  2795  318D   	fcall	_Button_Reading_Update
 10595                           
 10596                           ;mcc_generated_files/mtouch/mtouch_button.c: 191:         Button_Deviation_Update(button
      +                          );
 10597  0D7C  0020               	movlb	0	; select bank0
 10598  0D7D  082C               	movf	Button_Service@button,w
 10599  0D7E  318F  277D  318D   	fcall	_Button_Deviation_Update
 10600                           
 10601                           ;mcc_generated_files/mtouch/mtouch_button.c: 193:         if (button->state >= (uint8_t)
      +                          (sizeof(Button_StateMachine)/sizeof(button_statemachine_state_t)))
 10602  0D81  0020               	movlb	0	; select bank0
 10603  0D82  082C               	movf	Button_Service@button,w
 10604  0D83  3E02               	addlw	2
 10605  0D84  0086               	movwf	6
 10606  0D85  0187               	clrf	7
 10607  0D86  3003               	movlw	3
 10608  0D87  0201               	subwf	1,w
 10609  0D88  1C03               	skipc
 10610  0D89  2D91               	goto	l5848
 10611                           
 10612                           ;mcc_generated_files/mtouch/mtouch_button.c: 194:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 195:             MTOUCH_Button_Initialize(button->name);
 10613  0D8A  082C               	movf	Button_Service@button,w
 10614  0D8B  0086               	movwf	6
 10615  0D8C  0187               	clrf	7
 10616  0D8D  0801               	movf	1,w
 10617  0D8E  318B  23BD  318D   	fcall	_MTOUCH_Button_Initialize
 10618  0D91                     l5848:	
 10619                           
 10620                           ;mcc_generated_files/mtouch/mtouch_button.c: 197:         Button_StateMachine[(uint8_t)b
      +                          utton->state](button);
 10621  0D91  0020               	movlb	0	; select bank0
 10622  0D92  082C               	movf	Button_Service@button,w
 10623  0D93  00A9               	movwf	??_Button_Service
 10624  0D94  0829               	movf	??_Button_Service,w
 10625  0D95  00A4               	movwf	Button_State_Pressed@button
 10626  0D96  082C               	movf	Button_Service@button,w
 10627  0D97  3E02               	addlw	2
 10628  0D98  0086               	movwf	6
 10629  0D99  0187               	clrf	7
 10630  0D9A  3501               	lslf	1,w
 10631  0D9B  3ED4               	addlw	(low (_Button_StateMachine| 0))& (0+255)
 10632  0D9C  0086               	movwf	6
 10633  0D9D  0187               	clrf	7
 10634  0D9E  3F41               	moviw [1]fsr1
 10635  0D9F  008A               	movwf	10
 10636  0DA0  3F40               	moviw [0]fsr1
 10637  0DA1  000A               	callw
 10638  0DA2  318D               	pagesel	$
 10639  0DA3  0008               	return
 10640  0DA4                     __end_of_Button_Service:	
 10641                           
 10642                           	psect	text65
 10643  17A3                     __ptext65:	
 10644 ;; *************** function _MTOUCH_Sensor_wasSampled *****************
 10645 ;; Defined at:
 10646 ;;		line 942 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10647 ;; Parameters:    Size  Location     Type
 10648 ;;  sensor          1    wreg     enum E2854
 10649 ;; Auto vars:     Size  Location     Type
 10650 ;;  sensor          1    6[COMMON] enum E2854
 10651 ;; Return value:  Size  Location     Type
 10652 ;;                  1    wreg      _Bool 
 10653 ;; Registers used:
 10654 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10655 ;; Tracked objects:
 10656 ;;		On entry : 0/0
 10657 ;;		On exit  : 0/0
 10658 ;;		Unchanged: 0/0
 10659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10660 ;;      Params:         0       0       0       0       0       0       0       0
 10661 ;;      Locals:         1       0       0       0       0       0       0       0
 10662 ;;      Temps:          1       0       0       0       0       0       0       0
 10663 ;;      Totals:         2       0       0       0       0       0       0       0
 10664 ;;Total ram usage:        2 bytes
 10665 ;; Hardware stack levels used:    1
 10666 ;; Hardware stack levels required when called:    5
 10667 ;; This function calls:
 10668 ;;		___bmul
 10669 ;; This function is called by:
 10670 ;;		_Button_Service
 10671 ;; This function uses a non-reentrant model
 10672 ;;
 10673                           
 10674                           
 10675                           ;psect for function _MTOUCH_Sensor_wasSampled
 10676  17A3                     _MTOUCH_Sensor_wasSampled:	
 10677                           
 10678                           ;incstack = 0
 10679                           ; Regs used in _MTOUCH_Sensor_wasSampled: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 10680                           ;MTOUCH_Sensor_wasSampled@sensor stored from wreg
 10681  17A3  00F6               	movwf	MTOUCH_Sensor_wasSampled@sensor
 10682                           
 10683                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 942: _Bool MTOUCH_Sensor_wasSampled(enum mt
      +                          ouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 943: {;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 944:     return (_Bool)mtouch_sensor[sensor].sampled;
 10684  17A4  3009               	movlw	9
 10685  17A5  00F5               	movwf	??_MTOUCH_Sensor_wasSampled
 10686  17A6  0875               	movf	??_MTOUCH_Sensor_wasSampled,w
 10687  17A7  00F1               	movwf	___bmul@multiplicand
 10688  17A8  0876               	movf	MTOUCH_Sensor_wasSampled@sensor,w
 10689  17A9  3188  2003         	fcall	___bmul
 10690  17AB  3EE6               	addlw	(low ((_mtouch_sensor| 0+8)))& (0+255)
 10691  17AC  0086               	movwf	6
 10692  17AD  0187               	clrf	7
 10693  17AE  0801               	movf	1,w
 10694  17AF  3901               	andlw	1
 10695  17B0  0008               	return
 10696  17B1                     __end_of_MTOUCH_Sensor_wasSampled:	
 10697                           
 10698                           	psect	text66
 10699  0871                     __ptext66:	
 10700 ;; *************** function _MTOUCH_Sensor_isCalibrated *****************
 10701 ;; Defined at:
 10702 ;;		line 895 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10703 ;; Parameters:    Size  Location     Type
 10704 ;;  sensor          1    wreg     enum E2854
 10705 ;; Auto vars:     Size  Location     Type
 10706 ;;  sensor          1    6[COMMON] enum E2854
 10707 ;; Return value:  Size  Location     Type
 10708 ;;                  1    wreg      _Bool 
 10709 ;; Registers used:
 10710 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10711 ;; Tracked objects:
 10712 ;;		On entry : 0/0
 10713 ;;		On exit  : 0/0
 10714 ;;		Unchanged: 0/0
 10715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10716 ;;      Params:         0       0       0       0       0       0       0       0
 10717 ;;      Locals:         1       0       0       0       0       0       0       0
 10718 ;;      Temps:          1       0       0       0       0       0       0       0
 10719 ;;      Totals:         2       0       0       0       0       0       0       0
 10720 ;;Total ram usage:        2 bytes
 10721 ;; Hardware stack levels used:    1
 10722 ;; Hardware stack levels required when called:    5
 10723 ;; This function calls:
 10724 ;;		___bmul
 10725 ;; This function is called by:
 10726 ;;		_Button_Service
 10727 ;; This function uses a non-reentrant model
 10728 ;;
 10729                           
 10730                           
 10731                           ;psect for function _MTOUCH_Sensor_isCalibrated
 10732  0871                     _MTOUCH_Sensor_isCalibrated:	
 10733                           
 10734                           ;incstack = 0
 10735                           ; Regs used in _MTOUCH_Sensor_isCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 10736                           ;MTOUCH_Sensor_isCalibrated@sensor stored from wreg
 10737  0871  00F6               	movwf	MTOUCH_Sensor_isCalibrated@sensor
 10738                           
 10739                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 895: _Bool MTOUCH_Sensor_isCalibrated(enum 
      +                          mtouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 896: {;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 897:     if(sensor < 1u)
 10740  0872  0876               	movf	MTOUCH_Sensor_isCalibrated@sensor,w
 10741  0873  1D03               	btfss	3,2
 10742  0874  2883               	goto	l5656
 10743                           
 10744                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 898:         return (_Bool)mtouch_sensor[se
      +                          nsor].calibrated;
 10745  0875  3009               	movlw	9
 10746  0876  00F5               	movwf	??_MTOUCH_Sensor_isCalibrated
 10747  0877  0875               	movf	??_MTOUCH_Sensor_isCalibrated,w
 10748  0878  00F1               	movwf	___bmul@multiplicand
 10749  0879  0876               	movf	MTOUCH_Sensor_isCalibrated@sensor,w
 10750  087A  3188  2003         	fcall	___bmul
 10751  087C  3EE6               	addlw	(low ((_mtouch_sensor| 0+8)))& (0+255)
 10752  087D  0086               	movwf	6
 10753  087E  0187               	clrf	7
 10754  087F  0C01               	rrf	1,w
 10755  0880  0C89               	rrf	9,f
 10756  0881  3901               	andlw	1
 10757  0882  0008               	return
 10758  0883                     l5656:	
 10759                           
 10760                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 900:         return 0;
 10761  0883  3000               	movlw	0
 10762  0884  0008               	return
 10763  0885                     __end_of_MTOUCH_Sensor_isCalibrated:	
 10764                           
 10765                           	psect	text67
 10766  05C7                     __ptext67:	
 10767 ;; *************** function _Button_State_NotPressed *****************
 10768 ;; Defined at:
 10769 ;;		line 221 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10770 ;; Parameters:    Size  Location     Type
 10771 ;;  button          1    4[BANK0 ] PTR struct .
 10772 ;;		 -> mtouch_button(16), 
 10773 ;; Auto vars:     Size  Location     Type
 10774 ;;		None
 10775 ;; Return value:  Size  Location     Type
 10776 ;;                  1    wreg      void 
 10777 ;; Registers used:
 10778 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10779 ;; Tracked objects:
 10780 ;;		On entry : 0/0
 10781 ;;		On exit  : 0/0
 10782 ;;		Unchanged: 0/0
 10783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10784 ;;      Params:         0       1       0       0       0       0       0       0
 10785 ;;      Locals:         0       0       0       0       0       0       0       0
 10786 ;;      Temps:          0       2       0       0       0       0       0       0
 10787 ;;      Totals:         0       3       0       0       0       0       0       0
 10788 ;;Total ram usage:        3 bytes
 10789 ;; Hardware stack levels used:    1
 10790 ;; Hardware stack levels required when called:    7
 10791 ;; This function calls:
 10792 ;;		_Button_Baseline_Update
 10793 ;;		_Button_DefaultCallback
 10794 ;;		_MTOUCH_Button_Initialize
 10795 ;;		_myButtonPressedCallback
 10796 ;; This function is called by:
 10797 ;;		_Button_Service
 10798 ;; This function uses a non-reentrant model
 10799 ;;
 10800                           
 10801                           
 10802                           ;psect for function _Button_State_NotPressed
 10803  05C7                     _Button_State_NotPressed:	
 10804                           
 10805                           ;mcc_generated_files/mtouch/mtouch_button.c: 221: static void Button_State_NotPressed(mt
      +                          ouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 222: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 224:     if ((button->deviation) < (mtouch_button_deviatio
      +                          n_t)(-button->threshold))
 10806                           
 10807                           ;incstack = 0
 10808                           ; Regs used in _Button_State_NotPressed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10809  05C7  0020               	movlb	0	; select bank0
 10810  05C8  0824               	movf	Button_State_NotPressed@button,w
 10811  05C9  3E09               	addlw	9
 10812  05CA  0086               	movwf	6
 10813  05CB  0187               	clrf	7
 10814  05CC  0801               	movf	1,w
 10815  05CD  3A80               	xorlw	128
 10816  05CE  00A5               	movwf	??_Button_State_NotPressed
 10817  05CF  0824               	movf	Button_State_NotPressed@button,w
 10818  05D0  3E0E               	addlw	14
 10819  05D1  0086               	movwf	6
 10820  05D2  0187               	clrf	7
 10821  05D3  0301               	decf	1,w
 10822  05D4  3AFF               	xorlw	255
 10823  05D5  3A80               	xorlw	128
 10824  05D6  02A5               	subwf	??_Button_State_NotPressed,f
 10825  05D7  1803               	skipnc
 10826  05D8  2E00               	goto	l5706
 10827                           
 10828                           ;mcc_generated_files/mtouch/mtouch_button.c: 225:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 226:         (button->counter)++;
 10829  05D9  0824               	movf	Button_State_NotPressed@button,w
 10830  05DA  3E0A               	addlw	10
 10831  05DB  0086               	movwf	6
 10832  05DC  0187               	clrf	7
 10833  05DD  3001               	movlw	1
 10834  05DE  0781               	addwf	1,f
 10835  05DF  3141               	addfsr 1,1
 10836  05E0  1803               	skipnc
 10837  05E1  0A81               	incf	1,f
 10838                           
 10839                           ;mcc_generated_files/mtouch/mtouch_button.c: 227:         if ((button->counter) > (mtouc
      +                          h_button_statecounter_t)((mtouch_button_statecounter_t)64u))
 10840  05E2  0824               	movf	Button_State_NotPressed@button,w
 10841  05E3  3E0A               	addlw	10
 10842  05E4  0086               	movwf	6
 10843  05E5  0187               	clrf	7
 10844  05E6  3F40               	moviw [0]fsr1
 10845  05E7  00A5               	movwf	??_Button_State_NotPressed
 10846  05E8  3F41               	moviw [1]fsr1
 10847  05E9  00A6               	movwf	??_Button_State_NotPressed+1
 10848  05EA  3000               	movlw	0
 10849  05EB  0226               	subwf	??_Button_State_NotPressed+1,w
 10850  05EC  3041               	movlw	65
 10851  05ED  1903               	skipnz
 10852  05EE  0225               	subwf	??_Button_State_NotPressed,w
 10853  05EF  1C03               	skipc
 10854  05F0  2E3C               	goto	l522
 10855                           
 10856                           ;mcc_generated_files/mtouch/mtouch_button.c: 228:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 229:             button->counter = (mtouch_button_statecounter_t)0;
 10857  05F1  0824               	movf	Button_State_NotPressed@button,w
 10858  05F2  3E0A               	addlw	10
 10859  05F3  0086               	movwf	6
 10860  05F4  0187               	clrf	7
 10861  05F5  3000               	movlw	0
 10862  05F6  3FC0               	movwi [0]fsr1
 10863  05F7  3FC1               	movwi [1]fsr1
 10864                           
 10865                           ;mcc_generated_files/mtouch/mtouch_button.c: 230:             MTOUCH_Button_Initialize(b
      +                          utton->name);
 10866  05F8  0824               	movf	Button_State_NotPressed@button,w
 10867  05F9  0086               	movwf	6
 10868  05FA  0187               	clrf	7
 10869  05FB  0801               	movf	1,w
 10870  05FC  318B  23BD  3185   	fcall	_MTOUCH_Button_Initialize
 10871  05FF  2E3C               	goto	l522
 10872  0600                     l5706:	
 10873  0600  0824               	movf	Button_State_NotPressed@button,w
 10874  0601  3E09               	addlw	9
 10875  0602  0086               	movwf	6
 10876  0603  0187               	clrf	7
 10877  0604  0801               	movf	1,w
 10878  0605  00A5               	movwf	??_Button_State_NotPressed
 10879  0606  01A6               	clrf	??_Button_State_NotPressed+1
 10880  0607  1BA5               	btfsc	??_Button_State_NotPressed,7
 10881  0608  03A6               	decf	??_Button_State_NotPressed+1,f
 10882  0609  0824               	movf	Button_State_NotPressed@button,w
 10883  060A  3E0E               	addlw	14
 10884  060B  0086               	movwf	6
 10885  060C  0187               	clrf	7
 10886  060D  0826               	movf	??_Button_State_NotPressed+1,w
 10887  060E  3A80               	xorlw	128
 10888  060F  3C80               	sublw	128
 10889  0610  1D03               	skipz
 10890  0611  2E14               	goto	u4765
 10891  0612  0825               	movf	??_Button_State_NotPressed,w
 10892  0613  0201               	subwf	1,w
 10893  0614                     u4765:	
 10894  0614  1803               	skipnc
 10895  0615  2E34               	goto	l5712
 10896                           
 10897                           ;mcc_generated_files/mtouch/mtouch_button.c: 235:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 237:         button->state = MTOUCH_BUTTON_STATE_pressed;
 10898  0616  3002               	movlw	2
 10899  0617  0020               	movlb	0	; select bank0
 10900  0618  00A5               	movwf	??_Button_State_NotPressed
 10901  0619  0824               	movf	Button_State_NotPressed@button,w
 10902  061A  3E02               	addlw	2
 10903  061B  0086               	movwf	6
 10904  061C  0187               	clrf	7
 10905  061D  0825               	movf	??_Button_State_NotPressed,w
 10906  061E  0081               	movwf	1
 10907                           
 10908                           ;mcc_generated_files/mtouch/mtouch_button.c: 238:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
 10909  061F  0824               	movf	Button_State_NotPressed@button,w
 10910  0620  3E0A               	addlw	10
 10911  0621  0086               	movwf	6
 10912  0622  0187               	clrf	7
 10913  0623  3000               	movlw	0
 10914  0624  3FC0               	movwi [0]fsr1
 10915  0625  3FC1               	movwi [1]fsr1
 10916                           
 10917                           ;mcc_generated_files/mtouch/mtouch_button.c: 239:         callback_pressed(button->name)
      +                          ;
 10918  0626  0824               	movf	Button_State_NotPressed@button,w
 10919  0627  0086               	movwf	6
 10920  0628  0187               	clrf	7
 10921  0629  0801               	movf	1,w
 10922  062A  00A5               	movwf	??_Button_State_NotPressed
 10923  062B  0825               	movf	??_Button_State_NotPressed,w
 10924  062C  00F4               	movwf	myButtonPressedCallback@button
 10925  062D  0021               	movlb	1	; select bank1
 10926  062E  085B               	movf	(_callback_pressed+1)^(0+128),w
 10927  062F  008A               	movwf	10
 10928  0630  085A               	movf	_callback_pressed^(0+128),w
 10929  0631  000A               	callw
 10930  0632  3185               	pagesel	$
 10931                           
 10932                           ;mcc_generated_files/mtouch/mtouch_button.c: 240:     }
 10933  0633  2E3C               	goto	l522
 10934  0634                     l5712:	
 10935                           
 10936                           ;mcc_generated_files/mtouch/mtouch_button.c: 242:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 244:         button->counter = (mtouch_button_statecounter_t)0;
 10937  0634  0020               	movlb	0	; select bank0
 10938  0635  0824               	movf	Button_State_NotPressed@button,w
 10939  0636  3E0A               	addlw	10
 10940  0637  0086               	movwf	6
 10941  0638  0187               	clrf	7
 10942  0639  3000               	movlw	0
 10943  063A  3FC0               	movwi [0]fsr1
 10944  063B  3FC1               	movwi [1]fsr1
 10945  063C                     l522:	
 10946                           
 10947                           ;mcc_generated_files/mtouch/mtouch_button.c: 249:     (button->baseline_count)++;
 10948  063C  0020               	movlb	0	; select bank0
 10949  063D  0824               	movf	Button_State_NotPressed@button,w
 10950  063E  3E0C               	addlw	12
 10951  063F  0086               	movwf	6
 10952  0640  0187               	clrf	7
 10953  0641  3001               	movlw	1
 10954  0642  0781               	addwf	1,f
 10955  0643  3141               	addfsr 1,1
 10956  0644  1803               	skipnc
 10957  0645  0A81               	incf	1,f
 10958                           
 10959                           ;mcc_generated_files/mtouch/mtouch_button.c: 250:     if ((button->baseline_count) == ((
      +                          mtouch_button_baselinecounter_t)64u))
 10960  0646  0824               	movf	Button_State_NotPressed@button,w
 10961  0647  3E0C               	addlw	12
 10962  0648  0086               	movwf	6
 10963  0649  0187               	clrf	7
 10964  064A  0016               	moviw fsr1++
 10965  064B  3A40               	xorlw	64
 10966  064C  00A5               	movwf	??_Button_State_NotPressed
 10967  064D  0016               	moviw fsr1++
 10968  064E  04A5               	iorwf	??_Button_State_NotPressed,f
 10969  064F  1D03               	btfss	3,2
 10970  0650  0008               	return
 10971                           
 10972                           ;mcc_generated_files/mtouch/mtouch_button.c: 251:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 252:         button->baseline_count = (mtouch_button_baselinecounter_t)0;
 10973  0651  0824               	movf	Button_State_NotPressed@button,w
 10974  0652  3E0C               	addlw	12
 10975  0653  0086               	movwf	6
 10976  0654  0187               	clrf	7
 10977  0655  3000               	movlw	0
 10978  0656  3FC0               	movwi [0]fsr1
 10979  0657  3FC1               	movwi [1]fsr1
 10980                           
 10981                           ;mcc_generated_files/mtouch/mtouch_button.c: 253:         Button_Baseline_Update(button)
      +                          ;
 10982  0658  0824               	movf	Button_State_NotPressed@button,w
 10983  0659  3187  2779         	fcall	_Button_Baseline_Update
 10984  065B  0008               	return
 10985  065C                     __end_of_Button_State_NotPressed:	
 10986                           
 10987                           	psect	text68
 10988  0DF4                     __ptext68:	
 10989 ;; *************** function _Button_State_Initializing *****************
 10990 ;; Defined at:
 10991 ;;		line 201 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10992 ;; Parameters:    Size  Location     Type
 10993 ;;  button          1    4[BANK0 ] PTR struct .
 10994 ;;		 -> mtouch_button(16), 
 10995 ;; Auto vars:     Size  Location     Type
 10996 ;;		None
 10997 ;; Return value:  Size  Location     Type
 10998 ;;                  1    wreg      void 
 10999 ;; Registers used:
 11000 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11001 ;; Tracked objects:
 11002 ;;		On entry : 0/0
 11003 ;;		On exit  : 0/0
 11004 ;;		Unchanged: 0/0
 11005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11006 ;;      Params:         0       1       0       0       0       0       0       0
 11007 ;;      Locals:         0       0       0       0       0       0       0       0
 11008 ;;      Temps:          0       4       0       0       0       0       0       0
 11009 ;;      Totals:         0       5       0       0       0       0       0       0
 11010 ;;Total ram usage:        5 bytes
 11011 ;; Hardware stack levels used:    1
 11012 ;; Hardware stack levels required when called:    7
 11013 ;; This function calls:
 11014 ;;		_Button_Baseline_Initialize
 11015 ;;		_Button_Baseline_Update
 11016 ;; This function is called by:
 11017 ;;		_Button_Service
 11018 ;; This function uses a non-reentrant model
 11019 ;;
 11020                           
 11021                           
 11022                           ;psect for function _Button_State_Initializing
 11023  0DF4                     _Button_State_Initializing:	
 11024                           
 11025                           ;mcc_generated_files/mtouch/mtouch_button.c: 201: static void Button_State_Initializing(
      +                          mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 202: {;mcc_generate
      +                          d_files/mtouch/mtouch_button.c: 204:     if ((button->counter) <= (mtouch_button_stateco
      +                          unter_t)((mtouch_button_baselinecounter_t)16u)/2)
 11026                           
 11027                           ;incstack = 0
 11028                           ; Regs used in _Button_State_Initializing: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 11029  0DF4  0020               	movlb	0	; select bank0
 11030  0DF5  0824               	movf	Button_State_Initializing@button,w
 11031  0DF6  3E0A               	addlw	10
 11032  0DF7  0086               	movwf	6
 11033  0DF8  0187               	clrf	7
 11034  0DF9  3F40               	moviw [0]fsr1
 11035  0DFA  00A5               	movwf	??_Button_State_Initializing
 11036  0DFB  3F41               	moviw [1]fsr1
 11037  0DFC  00A6               	movwf	??_Button_State_Initializing+1
 11038  0DFD  3000               	movlw	0
 11039  0DFE  0226               	subwf	??_Button_State_Initializing+1,w
 11040  0DFF  3009               	movlw	9
 11041  0E00  1903               	skipnz
 11042  0E01  0225               	subwf	??_Button_State_Initializing,w
 11043  0E02  1803               	skipnc
 11044  0E03  2E09               	goto	l5690
 11045                           
 11046                           ;mcc_generated_files/mtouch/mtouch_button.c: 205:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 206:         Button_Baseline_Initialize(button);
 11047  0E04  0824               	movf	Button_State_Initializing@button,w
 11048  0E05  318B  2337  318D   	fcall	_Button_Baseline_Initialize
 11049                           
 11050                           ;mcc_generated_files/mtouch/mtouch_button.c: 207:     } else {
 11051  0E08  2E0D               	goto	l5692
 11052  0E09                     l5690:	
 11053                           
 11054                           ;mcc_generated_files/mtouch/mtouch_button.c: 208:         Button_Baseline_Update(button)
      +                          ;
 11055  0E09  0824               	movf	Button_State_Initializing@button,w
 11056  0E0A  3187  2779  318D   	fcall	_Button_Baseline_Update
 11057  0E0D                     l5692:	
 11058                           
 11059                           ;mcc_generated_files/mtouch/mtouch_button.c: 212:     (button->counter)++;
 11060  0E0D  0020               	movlb	0	; select bank0
 11061  0E0E  0824               	movf	Button_State_Initializing@button,w
 11062  0E0F  3E0A               	addlw	10
 11063  0E10  0086               	movwf	6
 11064  0E11  0187               	clrf	7
 11065  0E12  3001               	movlw	1
 11066  0E13  0781               	addwf	1,f
 11067  0E14  3141               	addfsr 1,1
 11068  0E15  1803               	skipnc
 11069  0E16  0A81               	incf	1,f
 11070                           
 11071                           ;mcc_generated_files/mtouch/mtouch_button.c: 213:     if ((button->counter) >= (mtouch_b
      +                          utton_statecounter_t)((mtouch_button_baselinecounter_t)16u))
 11072  0E17  0824               	movf	Button_State_Initializing@button,w
 11073  0E18  3E0A               	addlw	10
 11074  0E19  0086               	movwf	6
 11075  0E1A  0187               	clrf	7
 11076  0E1B  3F40               	moviw [0]fsr1
 11077  0E1C  00A5               	movwf	??_Button_State_Initializing
 11078  0E1D  3F41               	moviw [1]fsr1
 11079  0E1E  00A6               	movwf	??_Button_State_Initializing+1
 11080  0E1F  3000               	movlw	0
 11081  0E20  0226               	subwf	??_Button_State_Initializing+1,w
 11082  0E21  3010               	movlw	16
 11083  0E22  1903               	skipnz
 11084  0E23  0225               	subwf	??_Button_State_Initializing,w
 11085  0E24  1C03               	skipc
 11086  0E25  0008               	return
 11087                           
 11088                           ;mcc_generated_files/mtouch/mtouch_button.c: 214:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 215:         button->reading = (mtouch_button_reading_t)((button->baseline)>
      +                          >((uint8_t)4u));
 11089  0E26  0824               	movf	Button_State_Initializing@button,w
 11090  0E27  3E05               	addlw	5
 11091  0E28  0086               	movwf	6
 11092  0E29  0187               	clrf	7
 11093  0E2A  3F40               	moviw [0]fsr1
 11094  0E2B  00A5               	movwf	??_Button_State_Initializing
 11095  0E2C  3F41               	moviw [1]fsr1
 11096  0E2D  00A6               	movwf	??_Button_State_Initializing+1
 11097  0E2E  3F42               	moviw [2]fsr1
 11098  0E2F  00A7               	movwf	??_Button_State_Initializing+2
 11099  0E30  3F43               	moviw [3]fsr1
 11100  0E31  00A8               	movwf	??_Button_State_Initializing+3
 11101  0E32  3004               	movlw	4
 11102  0E33                     u4735:	
 11103  0E33  36A8               	lsrf	??_Button_State_Initializing+3,f
 11104  0E34  0CA7               	rrf	??_Button_State_Initializing+2,f
 11105  0E35  0CA6               	rrf	??_Button_State_Initializing+1,f
 11106  0E36  0CA5               	rrf	??_Button_State_Initializing,f
 11107  0E37  0B89               	decfsz	9,f
 11108  0E38  2E33               	goto	u4735
 11109  0E39  0824               	movf	Button_State_Initializing@button,w
 11110  0E3A  3E03               	addlw	3
 11111  0E3B  0086               	movwf	6
 11112  0E3C  0187               	clrf	7
 11113  0E3D  0825               	movf	??_Button_State_Initializing,w
 11114  0E3E  3FC0               	movwi [0]fsr1
 11115  0E3F  0826               	movf	??_Button_State_Initializing+1,w
 11116  0E40  3FC1               	movwi [1]fsr1
 11117                           
 11118                           ;mcc_generated_files/mtouch/mtouch_button.c: 216:         button->state = MTOUCH_BUTTON_
      +                          STATE_notPressed;
 11119  0E41  0824               	movf	Button_State_Initializing@button,w
 11120  0E42  3E02               	addlw	2
 11121  0E43  0086               	movwf	6
 11122  0E44  0187               	clrf	7
 11123  0E45  0181               	clrf	1
 11124  0E46  0A81               	incf	1,f
 11125                           
 11126                           ;mcc_generated_files/mtouch/mtouch_button.c: 217:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
 11127  0E47  0824               	movf	Button_State_Initializing@button,w
 11128  0E48  3E0A               	addlw	10
 11129  0E49  0086               	movwf	6
 11130  0E4A  0187               	clrf	7
 11131  0E4B  3000               	movlw	0
 11132  0E4C  3FC0               	movwi [0]fsr1
 11133  0E4D  3FC1               	movwi [1]fsr1
 11134  0E4E  0008               	return
 11135  0E4F                     __end_of_Button_State_Initializing:	
 11136                           
 11137                           	psect	text69
 11138  0E4F                     __ptext69:	
 11139 ;; *************** function _Button_State_Pressed *****************
 11140 ;; Defined at:
 11141 ;;		line 257 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11142 ;; Parameters:    Size  Location     Type
 11143 ;;  button          1    4[BANK0 ] PTR struct .
 11144 ;;		 -> mtouch_button(16), 
 11145 ;; Auto vars:     Size  Location     Type
 11146 ;;		None
 11147 ;; Return value:  Size  Location     Type
 11148 ;;                  1    wreg      void 
 11149 ;; Registers used:
 11150 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11151 ;; Tracked objects:
 11152 ;;		On entry : 0/0
 11153 ;;		On exit  : 0/0
 11154 ;;		Unchanged: 0/0
 11155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11156 ;;      Params:         0       1       0       0       0       0       0       0
 11157 ;;      Locals:         0       0       0       0       0       0       0       0
 11158 ;;      Temps:          0       2       0       0       0       0       0       0
 11159 ;;      Totals:         0       3       0       0       0       0       0       0
 11160 ;;Total ram usage:        3 bytes
 11161 ;; Hardware stack levels used:    1
 11162 ;; Hardware stack levels required when called:    7
 11163 ;; This function calls:
 11164 ;;		_Button_DefaultCallback
 11165 ;;		_MTOUCH_Button_Initialize
 11166 ;;		_myButtonReleasedCallback
 11167 ;; This function is called by:
 11168 ;;		_Button_Service
 11169 ;; This function uses a non-reentrant model
 11170 ;;
 11171                           
 11172                           
 11173                           ;psect for function _Button_State_Pressed
 11174  0E4F                     _Button_State_Pressed:	
 11175                           
 11176                           ;mcc_generated_files/mtouch/mtouch_button.c: 257: static void Button_State_Pressed(mtouc
      +                          h_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 258: {;mcc_generated_fil
      +                          es/mtouch/mtouch_button.c: 260:     if ((button->counter) >= ((mtouch_button_statecounte
      +                          r_t)2000u))
 11177                           
 11178                           ;incstack = 0
 11179                           ; Regs used in _Button_State_Pressed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11180  0E4F  0020               	movlb	0	; select bank0
 11181  0E50  0824               	movf	Button_State_Pressed@button,w
 11182  0E51  3E0A               	addlw	10
 11183  0E52  0086               	movwf	6
 11184  0E53  0187               	clrf	7
 11185  0E54  3F40               	moviw [0]fsr1
 11186  0E55  00A5               	movwf	??_Button_State_Pressed
 11187  0E56  3F41               	moviw [1]fsr1
 11188  0E57  00A6               	movwf	??_Button_State_Pressed+1
 11189  0E58  3007               	movlw	7
 11190  0E59  0226               	subwf	??_Button_State_Pressed+1,w
 11191  0E5A  30D0               	movlw	208
 11192  0E5B  1903               	skipnz
 11193  0E5C  0225               	subwf	??_Button_State_Pressed,w
 11194  0E5D  1C03               	skipc
 11195  0E5E  2E74               	goto	l5722
 11196                           
 11197                           ;mcc_generated_files/mtouch/mtouch_button.c: 261:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 262:         MTOUCH_Button_Initialize(button->name);
 11198  0E5F  0824               	movf	Button_State_Pressed@button,w
 11199  0E60  0086               	movwf	6
 11200  0E61  0187               	clrf	7
 11201  0E62  0801               	movf	1,w
 11202  0E63  318B  23BD  318E   	fcall	_MTOUCH_Button_Initialize
 11203                           
 11204                           ;mcc_generated_files/mtouch/mtouch_button.c: 263:         callback_notPressed(button->na
      +                          me);
 11205  0E66  0020               	movlb	0	; select bank0
 11206  0E67  0824               	movf	Button_State_Pressed@button,w
 11207  0E68  0086               	movwf	6
 11208  0E69  0187               	clrf	7
 11209  0E6A  0801               	movf	1,w
 11210  0E6B  00A5               	movwf	??_Button_State_Pressed
 11211  0E6C  0825               	movf	??_Button_State_Pressed,w
 11212  0E6D  00F4               	movwf	myButtonReleasedCallback@button
 11213  0E6E  086D               	movf	_callback_notPressed+1,w
 11214  0E6F  008A               	movwf	10
 11215  0E70  086C               	movf	_callback_notPressed,w
 11216  0E71  000A               	callw
 11217  0E72  318E               	pagesel	$
 11218                           
 11219                           ;mcc_generated_files/mtouch/mtouch_button.c: 264:     }
 11220  0E73  0008               	return
 11221  0E74                     l5722:	
 11222  0E74  0824               	movf	Button_State_Pressed@button,w
 11223  0E75  3E09               	addlw	9
 11224  0E76  0086               	movwf	6
 11225  0E77  0187               	clrf	7
 11226  0E78  0801               	movf	1,w
 11227  0E79  3A80               	xorlw	128
 11228  0E7A  00A5               	movwf	??_Button_State_Pressed
 11229  0E7B  0824               	movf	Button_State_Pressed@button,w
 11230  0E7C  3E0E               	addlw	14
 11231  0E7D  0086               	movwf	6
 11232  0E7E  0187               	clrf	7
 11233  0E7F  0824               	movf	Button_State_Pressed@button,w
 11234  0E80  3E0E               	addlw	14
 11235  0E81  0084               	movwf	4
 11236  0E82  0185               	clrf	5
 11237  0E83  3600               	lsrf	0,w
 11238  0E84  0201               	subwf	1,w
 11239  0E85  3A80               	xorlw	128
 11240  0E86  02A5               	subwf	??_Button_State_Pressed,f
 11241  0E87  1803               	skipnc
 11242  0E88  0008               	return
 11243                           
 11244                           ;mcc_generated_files/mtouch/mtouch_button.c: 268:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 269:         button->state = MTOUCH_BUTTON_STATE_notPressed;
 11245  0E89  0824               	movf	Button_State_Pressed@button,w
 11246  0E8A  3E02               	addlw	2
 11247  0E8B  0086               	movwf	6
 11248  0E8C  0187               	clrf	7
 11249  0E8D  0181               	clrf	1
 11250  0E8E  0A81               	incf	1,f
 11251                           
 11252                           ;mcc_generated_files/mtouch/mtouch_button.c: 270:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
 11253  0E8F  0824               	movf	Button_State_Pressed@button,w
 11254  0E90  3E0A               	addlw	10
 11255  0E91  0086               	movwf	6
 11256  0E92  0187               	clrf	7
 11257  0E93  3000               	movlw	0
 11258  0E94  3FC0               	movwi [0]fsr1
 11259  0E95  3FC1               	movwi [1]fsr1
 11260                           
 11261                           ;mcc_generated_files/mtouch/mtouch_button.c: 271:         button->baseline_count = (mtou
      +                          ch_button_baselinecounter_t)((0xffff))-((mtouch_button_baselinecounter_t)1024u);
 11262  0E96  0824               	movf	Button_State_Pressed@button,w
 11263  0E97  3E0C               	addlw	12
 11264  0E98  0086               	movwf	6
 11265  0E99  0187               	clrf	7
 11266  0E9A  30FF               	movlw	255
 11267  0E9B  3FC0               	movwi [0]fsr1
 11268  0E9C  30FB               	movlw	251
 11269  0E9D  3FC1               	movwi [1]fsr1
 11270                           
 11271                           ;mcc_generated_files/mtouch/mtouch_button.c: 272:         callback_notPressed(button->na
      +                          me);
 11272  0E9E  0824               	movf	Button_State_Pressed@button,w
 11273  0E9F  0086               	movwf	6
 11274  0EA0  0187               	clrf	7
 11275  0EA1  0801               	movf	1,w
 11276  0EA2  00A5               	movwf	??_Button_State_Pressed
 11277  0EA3  0825               	movf	??_Button_State_Pressed,w
 11278  0EA4  00F4               	movwf	myButtonReleasedCallback@button
 11279  0EA5  086D               	movf	_callback_notPressed+1,w
 11280  0EA6  008A               	movwf	10
 11281  0EA7  086C               	movf	_callback_notPressed,w
 11282  0EA8  000A               	callw
 11283  0EA9  318E               	pagesel	$
 11284  0EAA  0008               	return
 11285  0EAB                     __end_of_Button_State_Pressed:	
 11286                           
 11287                           	psect	text70
 11288  085D                     __ptext70:	
 11289 ;; *************** function _myButtonPressedCallback *****************
 11290 ;; Defined at:
 11291 ;;		line 185 in file "main.c"
 11292 ;; Parameters:    Size  Location     Type
 11293 ;;  button          1    4[COMMON] enum E2911
 11294 ;; Auto vars:     Size  Location     Type
 11295 ;;		None
 11296 ;; Return value:  Size  Location     Type
 11297 ;;                  1    wreg      void 
 11298 ;; Registers used:
 11299 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11300 ;; Tracked objects:
 11301 ;;		On entry : 0/0
 11302 ;;		On exit  : 0/0
 11303 ;;		Unchanged: 0/0
 11304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11305 ;;      Params:         1       0       0       0       0       0       0       0
 11306 ;;      Locals:         0       0       0       0       0       0       0       0
 11307 ;;      Temps:          0       0       0       0       0       0       0       0
 11308 ;;      Totals:         1       0       0       0       0       0       0       0
 11309 ;;Total ram usage:        1 bytes
 11310 ;; Hardware stack levels used:    1
 11311 ;; Hardware stack levels required when called:    6
 11312 ;; This function calls:
 11313 ;;		_LED_PROCESS
 11314 ;;		_RELAY_PROCESS
 11315 ;; This function is called by:
 11316 ;;		_main
 11317 ;;		_Button_State_NotPressed
 11318 ;; This function uses a non-reentrant model
 11319 ;;
 11320                           
 11321                           
 11322                           ;psect for function _myButtonPressedCallback
 11323  085D                     _myButtonPressedCallback:	
 11324                           
 11325                           ;main.c: 185: void myButtonPressedCallback(enum mtouch_button_names button);main.c: 186:
      +                           {;main.c: 187:     count_conf = 0;
 11326                           
 11327                           ;incstack = 0
 11328                           ; Regs used in _myButtonPressedCallback: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11329  085D  0021               	movlb	1	; select bank1
 11330  085E  01C2               	clrf	_count_conf^(0+128)
 11331  085F  01C3               	clrf	(_count_conf+1)^(0+128)
 11332                           
 11333                           ;main.c: 188:     if(config_status == 0)
 11334  0860  0020               	movlb	0	; select bank0
 11335  0861  0861               	movf	_config_status,w
 11336  0862  1D03               	btfss	3,2
 11337  0863  0008               	return
 11338                           
 11339                           ;main.c: 189:     {;main.c: 190:         last_touch_status.full_status ^= 0b00000001;
 11340  0864  3001               	movlw	1
 11341  0865  06D9               	xorwf	_last_touch_status,f
 11342  0866  3000               	movlw	0
 11343  0867  06DA               	xorwf	_last_touch_status+1,f
 11344                           
 11345                           ;main.c: 191:         LED_PROCESS(last_touch_status.full_status);
 11346  0868  0859               	movf	_last_touch_status,w
 11347  0869  3189  210B  3188   	fcall	_LED_PROCESS
 11348                           
 11349                           ;main.c: 192:         RELAY_PROCESS(last_touch_status.full_status);
 11350  086C  0020               	movlb	0	; select bank0
 11351  086D  0859               	movf	_last_touch_status,w
 11352  086E  3189  2124         	fcall	_RELAY_PROCESS
 11353  0870  0008               	return
 11354  0871                     __end_of_myButtonPressedCallback:	
 11355                           
 11356                           	psect	text71
 11357  16AC                     __ptext71:	
 11358 ;; *************** function _Button_DefaultCallback *****************
 11359 ;; Defined at:
 11360 ;;		line 507 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11361 ;; Parameters:    Size  Location     Type
 11362 ;;  button          1    4[COMMON] enum E3067
 11363 ;; Auto vars:     Size  Location     Type
 11364 ;;		None
 11365 ;; Return value:  Size  Location     Type
 11366 ;;                  1    wreg      void 
 11367 ;; Registers used:
 11368 ;;		None
 11369 ;; Tracked objects:
 11370 ;;		On entry : 0/0
 11371 ;;		On exit  : 0/0
 11372 ;;		Unchanged: 0/0
 11373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11374 ;;      Params:         1       0       0       0       0       0       0       0
 11375 ;;      Locals:         0       0       0       0       0       0       0       0
 11376 ;;      Temps:          0       0       0       0       0       0       0       0
 11377 ;;      Totals:         1       0       0       0       0       0       0       0
 11378 ;;Total ram usage:        1 bytes
 11379 ;; Hardware stack levels used:    1
 11380 ;; Hardware stack levels required when called:    4
 11381 ;; This function calls:
 11382 ;;		Nothing
 11383 ;; This function is called by:
 11384 ;;		_Button_State_NotPressed
 11385 ;;		_Button_State_Pressed
 11386 ;; This function uses a non-reentrant model
 11387 ;;
 11388                           
 11389                           
 11390                           ;psect for function _Button_DefaultCallback
 11391  16AC                     _Button_DefaultCallback:	
 11392                           
 11393                           ;incstack = 0
 11394                           ; Regs used in _Button_DefaultCallback: []
 11395  16AC  0008               	return
 11396  16AD                     __end_of_Button_DefaultCallback:	
 11397                           
 11398                           	psect	text72
 11399  174C                     __ptext72:	
 11400 ;; *************** function _myButtonReleasedCallback *****************
 11401 ;; Defined at:
 11402 ;;		line 195 in file "main.c"
 11403 ;; Parameters:    Size  Location     Type
 11404 ;;  button          1    4[COMMON] enum E2911
 11405 ;; Auto vars:     Size  Location     Type
 11406 ;;		None
 11407 ;; Return value:  Size  Location     Type
 11408 ;;                  1    wreg      void 
 11409 ;; Registers used:
 11410 ;;		wreg, status,2, status,0
 11411 ;; Tracked objects:
 11412 ;;		On entry : 0/0
 11413 ;;		On exit  : 0/0
 11414 ;;		Unchanged: 0/0
 11415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11416 ;;      Params:         1       0       0       0       0       0       0       0
 11417 ;;      Locals:         0       0       0       0       0       0       0       0
 11418 ;;      Temps:          0       0       0       0       0       0       0       0
 11419 ;;      Totals:         1       0       0       0       0       0       0       0
 11420 ;;Total ram usage:        1 bytes
 11421 ;; Hardware stack levels used:    1
 11422 ;; Hardware stack levels required when called:    4
 11423 ;; This function calls:
 11424 ;;		Nothing
 11425 ;; This function is called by:
 11426 ;;		_main
 11427 ;;		_Button_State_Pressed
 11428 ;; This function uses a non-reentrant model
 11429 ;;
 11430                           
 11431                           
 11432                           ;psect for function _myButtonReleasedCallback
 11433  174C                     _myButtonReleasedCallback:	
 11434                           
 11435                           ;main.c: 195: void myButtonReleasedCallback(enum mtouch_button_names button);main.c: 196
      +                          : {;main.c: 197:     count_conf = 0;
 11436                           
 11437                           ;incstack = 0
 11438                           ; Regs used in _myButtonReleasedCallback: [wreg+status,2+status,0]
 11439  174C  0021               	movlb	1	; select bank1
 11440  174D  01C2               	clrf	_count_conf^(0+128)
 11441  174E  01C3               	clrf	(_count_conf+1)^(0+128)
 11442                           
 11443                           ;main.c: 198:     if(config_status == 0)
 11444  174F  0020               	movlb	0	; select bank0
 11445  1750  0861               	movf	_config_status,w
 11446  1751  1D03               	btfss	3,2
 11447  1752  0008               	return
 11448                           
 11449                           ;main.c: 199:     {;main.c: 200:         update_state_flag = 1;
 11450  1753  01DD               	clrf	_update_state_flag
 11451  1754  0ADD               	incf	_update_state_flag,f
 11452  1755  0008               	return
 11453  1756                     __end_of_myButtonReleasedCallback:	
 11454                           
 11455                           	psect	text73
 11456  0BBD                     __ptext73:	
 11457 ;; *************** function _MTOUCH_Button_Initialize *****************
 11458 ;; Defined at:
 11459 ;;		line 143 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11460 ;; Parameters:    Size  Location     Type
 11461 ;;  name            1    wreg     enum E3067
 11462 ;; Auto vars:     Size  Location     Type
 11463 ;;  name            1    9[COMMON] enum E3067
 11464 ;;  button          1   10[COMMON] PTR struct .
 11465 ;;		 -> mtouch_button(16), 
 11466 ;; Return value:  Size  Location     Type
 11467 ;;                  1    wreg      void 
 11468 ;; Registers used:
 11469 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11470 ;; Tracked objects:
 11471 ;;		On entry : 0/0
 11472 ;;		On exit  : 0/0
 11473 ;;		Unchanged: 0/0
 11474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11475 ;;      Params:         0       0       0       0       0       0       0       0
 11476 ;;      Locals:         2       0       0       0       0       0       0       0
 11477 ;;      Temps:          2       0       0       0       0       0       0       0
 11478 ;;      Totals:         4       0       0       0       0       0       0       0
 11479 ;;Total ram usage:        4 bytes
 11480 ;; Hardware stack levels used:    1
 11481 ;; Hardware stack levels required when called:    6
 11482 ;; This function calls:
 11483 ;;		_MTOUCH_Sensor_Calibrate
 11484 ;; This function is called by:
 11485 ;;		_MTOUCH_Button_InitializeAll
 11486 ;;		_Button_Service
 11487 ;;		_Button_State_NotPressed
 11488 ;;		_Button_State_Pressed
 11489 ;; This function uses a non-reentrant model
 11490 ;;
 11491                           
 11492                           
 11493                           ;psect for function _MTOUCH_Button_Initialize
 11494  0BBD                     _MTOUCH_Button_Initialize:	
 11495                           
 11496                           ;incstack = 0
 11497                           ; Regs used in _MTOUCH_Button_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 11498                           ;MTOUCH_Button_Initialize@name stored from wreg
 11499  0BBD  00F9               	movwf	MTOUCH_Button_Initialize@name
 11500                           
 11501                           ;mcc_generated_files/mtouch/mtouch_button.c: 143: void MTOUCH_Button_Initialize(enum mto
      +                          uch_button_names name);mcc_generated_files/mtouch/mtouch_button.c: 144: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 145:     mtouch_button_t* button = &mtouch_button[name];
 11502  0BBE  0879               	movf	MTOUCH_Button_Initialize@name,w
 11503  0BBF  00F7               	movwf	??_MTOUCH_Button_Initialize
 11504  0BC0  3003               	movlw	3
 11505  0BC1                     u4545:	
 11506  0BC1  35F7               	lslf	??_MTOUCH_Button_Initialize,f
 11507  0BC2  3EFF               	addlw	-1
 11508  0BC3  1D03               	skipz
 11509  0BC4  2BC1               	goto	u4545
 11510  0BC5  3577               	lslf	??_MTOUCH_Button_Initialize,w
 11511  0BC6  3EC4               	addlw	(low (_mtouch_button| 0))& (0+255)
 11512  0BC7  00F8               	movwf	??_MTOUCH_Button_Initialize+1
 11513  0BC8  0878               	movf	??_MTOUCH_Button_Initialize+1,w
 11514  0BC9  00FA               	movwf	MTOUCH_Button_Initialize@button
 11515                           
 11516                           ;mcc_generated_files/mtouch/mtouch_button.c: 147:     button->state = MTOUCH_BUTTON_STAT
      +                          E_initializing;
 11517  0BCA  087A               	movf	MTOUCH_Button_Initialize@button,w
 11518  0BCB  3E02               	addlw	2
 11519  0BCC  0086               	movwf	6
 11520  0BCD  0187               	clrf	7
 11521  0BCE  0181               	clrf	1
 11522                           
 11523                           ;mcc_generated_files/mtouch/mtouch_button.c: 148:     button->baseline = (mtouch_button_
      +                          baseline_t)0;
 11524  0BCF  087A               	movf	MTOUCH_Button_Initialize@button,w
 11525  0BD0  3E05               	addlw	5
 11526  0BD1  0086               	movwf	6
 11527  0BD2  0187               	clrf	7
 11528  0BD3  3000               	movlw	0
 11529  0BD4  3FC0               	movwi [0]fsr1
 11530  0BD5  3000               	movlw	0
 11531  0BD6  3FC1               	movwi [1]fsr1
 11532  0BD7  3FC2               	movwi [2]fsr1
 11533  0BD8  3FC3               	movwi [3]fsr1
 11534                           
 11535                           ;mcc_generated_files/mtouch/mtouch_button.c: 149:     button->counter = (mtouch_button_s
      +                          tatecounter_t)0;
 11536  0BD9  087A               	movf	MTOUCH_Button_Initialize@button,w
 11537  0BDA  3E0A               	addlw	10
 11538  0BDB  0086               	movwf	6
 11539  0BDC  0187               	clrf	7
 11540  0BDD  3000               	movlw	0
 11541  0BDE  3FC0               	movwi [0]fsr1
 11542  0BDF  3FC1               	movwi [1]fsr1
 11543                           
 11544                           ;mcc_generated_files/mtouch/mtouch_button.c: 150:     button->baseline_count = (mtouch_b
      +                          utton_baselinecounter_t)0;
 11545  0BE0  087A               	movf	MTOUCH_Button_Initialize@button,w
 11546  0BE1  3E0C               	addlw	12
 11547  0BE2  0086               	movwf	6
 11548  0BE3  0187               	clrf	7
 11549  0BE4  3000               	movlw	0
 11550  0BE5  3FC0               	movwi [0]fsr1
 11551  0BE6  3FC1               	movwi [1]fsr1
 11552                           
 11553                           ;mcc_generated_files/mtouch/mtouch_button.c: 152:     MTOUCH_Sensor_Calibrate(button->se
      +                          nsor);
 11554  0BE7  0A7A               	incf	MTOUCH_Button_Initialize@button,w
 11555  0BE8  0086               	movwf	6
 11556  0BE9  0187               	clrf	7
 11557  0BEA  0801               	movf	1,w
 11558  0BEB  3197  27C0         	fcall	_MTOUCH_Sensor_Calibrate
 11559  0BED  0008               	return
 11560  0BEE                     __end_of_MTOUCH_Button_Initialize:	
 11561                           
 11562                           	psect	text74
 11563  17C0                     __ptext74:	
 11564 ;; *************** function _MTOUCH_Sensor_Calibrate *****************
 11565 ;; Defined at:
 11566 ;;		line 887 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11567 ;; Parameters:    Size  Location     Type
 11568 ;;  sensor          1    wreg     enum E2854
 11569 ;; Auto vars:     Size  Location     Type
 11570 ;;  sensor          1    6[COMMON] enum E2854
 11571 ;; Return value:  Size  Location     Type
 11572 ;;                  1    wreg      void 
 11573 ;; Registers used:
 11574 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11575 ;; Tracked objects:
 11576 ;;		On entry : 0/0
 11577 ;;		On exit  : 0/0
 11578 ;;		Unchanged: 0/0
 11579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11580 ;;      Params:         0       0       0       0       0       0       0       0
 11581 ;;      Locals:         1       0       0       0       0       0       0       0
 11582 ;;      Temps:          1       0       0       0       0       0       0       0
 11583 ;;      Totals:         2       0       0       0       0       0       0       0
 11584 ;;Total ram usage:        2 bytes
 11585 ;; Hardware stack levels used:    1
 11586 ;; Hardware stack levels required when called:    5
 11587 ;; This function calls:
 11588 ;;		___bmul
 11589 ;; This function is called by:
 11590 ;;		_MTOUCH_Sensor_Initialize
 11591 ;;		_MTOUCH_Button_Initialize
 11592 ;; This function uses a non-reentrant model
 11593 ;;
 11594                           
 11595                           
 11596                           ;psect for function _MTOUCH_Sensor_Calibrate
 11597  17C0                     _MTOUCH_Sensor_Calibrate:	
 11598                           
 11599                           ;incstack = 0
 11600                           ; Regs used in _MTOUCH_Sensor_Calibrate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 11601                           ;MTOUCH_Sensor_Calibrate@sensor stored from wreg
 11602  17C0  00F6               	movwf	MTOUCH_Sensor_Calibrate@sensor
 11603                           
 11604                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 887: void MTOUCH_Sensor_Calibrate(enum mtou
      +                          ch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 888: {;mcc_generated
      +                          _files/mtouch/mtouch_sensor.c: 889:     if(sensor < 1u)
 11605  17C1  0876               	movf	MTOUCH_Sensor_Calibrate@sensor,w
 11606  17C2  1D03               	btfss	3,2
 11607  17C3  0008               	return
 11608                           
 11609                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 890:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 891:         mtouch_sensor[sensor].calibrated = 0;
 11610  17C4  3009               	movlw	9
 11611  17C5  00F5               	movwf	??_MTOUCH_Sensor_Calibrate
 11612  17C6  0875               	movf	??_MTOUCH_Sensor_Calibrate,w
 11613  17C7  00F1               	movwf	___bmul@multiplicand
 11614  17C8  0876               	movf	MTOUCH_Sensor_Calibrate@sensor,w
 11615  17C9  3188  2003         	fcall	___bmul
 11616  17CB  3EE6               	addlw	(low ((_mtouch_sensor| 0+8)))& (0+255)
 11617  17CC  0086               	movwf	6
 11618  17CD  0187               	clrf	7
 11619  17CE  1101               	bcf	1,2
 11620  17CF  0008               	return
 11621  17D0                     __end_of_MTOUCH_Sensor_Calibrate:	
 11622                           
 11623                           	psect	text75
 11624  0779                     __ptext75:	
 11625 ;; *************** function _Button_Baseline_Update *****************
 11626 ;; Defined at:
 11627 ;;		line 461 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11628 ;; Parameters:    Size  Location     Type
 11629 ;;  button          1    wreg     PTR struct .
 11630 ;;		 -> mtouch_button(16), 
 11631 ;; Auto vars:     Size  Location     Type
 11632 ;;  button          1    7[COMMON] PTR struct .
 11633 ;;		 -> mtouch_button(16), 
 11634 ;; Return value:  Size  Location     Type
 11635 ;;                  1    wreg      void 
 11636 ;; Registers used:
 11637 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11638 ;; Tracked objects:
 11639 ;;		On entry : 0/0
 11640 ;;		On exit  : 0/0
 11641 ;;		Unchanged: 0/0
 11642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11643 ;;      Params:         0       0       0       0       0       0       0       0
 11644 ;;      Locals:         1       0       0       0       0       0       0       0
 11645 ;;      Temps:          6       0       0       0       0       0       0       0
 11646 ;;      Totals:         7       0       0       0       0       0       0       0
 11647 ;;Total ram usage:        7 bytes
 11648 ;; Hardware stack levels used:    1
 11649 ;; Hardware stack levels required when called:    4
 11650 ;; This function calls:
 11651 ;;		Nothing
 11652 ;; This function is called by:
 11653 ;;		_Button_State_Initializing
 11654 ;;		_Button_State_NotPressed
 11655 ;; This function uses a non-reentrant model
 11656 ;;
 11657                           
 11658                           
 11659                           ;psect for function _Button_Baseline_Update
 11660  0779                     _Button_Baseline_Update:	
 11661                           
 11662                           ;incstack = 0
 11663                           ; Regs used in _Button_Baseline_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
 11664                           ;Button_Baseline_Update@button stored from wreg
 11665  0779  00F7               	movwf	Button_Baseline_Update@button
 11666                           
 11667                           ;mcc_generated_files/mtouch/mtouch_button.c: 461: static void Button_Baseline_Update(mto
      +                          uch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 462: {;mcc_generated_f
      +                          iles/mtouch/mtouch_button.c: 463:     if (GIE == (uint8_t)1)
 11668  077A  1F8B               	btfss	11,7	;volatile
 11669  077B  2FBF               	goto	l4062
 11670                           
 11671                           ;mcc_generated_files/mtouch/mtouch_button.c: 464:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 465:         GIE = (uint8_t)0;
 11672  077C  138B               	bcf	11,7	;volatile
 11673                           
 11674                           ;mcc_generated_files/mtouch/mtouch_button.c: 466:         button->baseline -= (button->b
      +                          aseline) >> ((uint8_t)4u);
 11675  077D  0877               	movf	Button_Baseline_Update@button,w
 11676  077E  3E05               	addlw	5
 11677  077F  0086               	movwf	6
 11678  0780  0187               	clrf	7
 11679  0781  3F40               	moviw [0]fsr1
 11680  0782  00F1               	movwf	??_Button_Baseline_Update
 11681  0783  3F41               	moviw [1]fsr1
 11682  0784  00F2               	movwf	??_Button_Baseline_Update+1
 11683  0785  3F42               	moviw [2]fsr1
 11684  0786  00F3               	movwf	??_Button_Baseline_Update+2
 11685  0787  3F43               	moviw [3]fsr1
 11686  0788  00F4               	movwf	??_Button_Baseline_Update+3
 11687  0789  3004               	movlw	4
 11688  078A                     u2835:	
 11689  078A  36F4               	lsrf	??_Button_Baseline_Update+3,f
 11690  078B  0CF3               	rrf	??_Button_Baseline_Update+2,f
 11691  078C  0CF2               	rrf	??_Button_Baseline_Update+1,f
 11692  078D  0CF1               	rrf	??_Button_Baseline_Update,f
 11693  078E  0B89               	decfsz	9,f
 11694  078F  2F8A               	goto	u2835
 11695  0790  0877               	movf	Button_Baseline_Update@button,w
 11696  0791  3E05               	addlw	5
 11697  0792  0086               	movwf	6
 11698  0793  0187               	clrf	7
 11699  0794  0871               	movf	??_Button_Baseline_Update,w
 11700  0795  0281               	subwf	1,f
 11701  0796  3141               	addfsr 1,1
 11702  0797  0872               	movf	??_Button_Baseline_Update+1,w
 11703  0798  3B81               	subwfb	1,f
 11704  0799  3141               	addfsr 1,1
 11705  079A  0873               	movf	??_Button_Baseline_Update+2,w
 11706  079B  3B81               	subwfb	1,f
 11707  079C  3141               	addfsr 1,1
 11708  079D  0874               	movf	??_Button_Baseline_Update+3,w
 11709  079E  3B81               	subwfb	1,f
 11710  079F  317D               	addfsr 1,-3
 11711                           
 11712                           ;mcc_generated_files/mtouch/mtouch_button.c: 467:         button->baseline += button->re
      +                          ading;
 11713  07A0  0877               	movf	Button_Baseline_Update@button,w
 11714  07A1  3E03               	addlw	3
 11715  07A2  0086               	movwf	6
 11716  07A3  0187               	clrf	7
 11717  07A4  3F40               	moviw [0]fsr1
 11718  07A5  00F1               	movwf	??_Button_Baseline_Update
 11719  07A6  3F41               	moviw [1]fsr1
 11720  07A7  00F2               	movwf	??_Button_Baseline_Update+1
 11721  07A8  0871               	movf	??_Button_Baseline_Update,w
 11722  07A9  00F3               	movwf	??_Button_Baseline_Update+2
 11723  07AA  0872               	movf	??_Button_Baseline_Update+1,w
 11724  07AB  00F4               	movwf	??_Button_Baseline_Update+3
 11725  07AC  01F5               	clrf	??_Button_Baseline_Update+4
 11726  07AD  01F6               	clrf	??_Button_Baseline_Update+5
 11727  07AE  0877               	movf	Button_Baseline_Update@button,w
 11728  07AF  3E05               	addlw	5
 11729  07B0  0086               	movwf	6
 11730  07B1  0187               	clrf	7
 11731  07B2  0873               	movf	??_Button_Baseline_Update+2,w
 11732  07B3  0781               	addwf	1,f
 11733  07B4  3141               	addfsr 1,1
 11734  07B5  0874               	movf	??_Button_Baseline_Update+3,w
 11735  07B6  3D81               	addwfc	1,f
 11736  07B7  3141               	addfsr 1,1
 11737  07B8  0875               	movf	??_Button_Baseline_Update+4,w
 11738  07B9  3D81               	addwfc	1,f
 11739  07BA  3141               	addfsr 1,1
 11740  07BB  0876               	movf	??_Button_Baseline_Update+5,w
 11741  07BC  3D81               	addwfc	1,f
 11742                           
 11743                           ;mcc_generated_files/mtouch/mtouch_button.c: 468:         GIE = (uint8_t)1;
 11744  07BD  178B               	bsf	11,7	;volatile
 11745                           
 11746                           ;mcc_generated_files/mtouch/mtouch_button.c: 469:     }
 11747  07BE  0008               	return
 11748  07BF                     l4062:	
 11749                           
 11750                           ;mcc_generated_files/mtouch/mtouch_button.c: 471:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 472:         button->baseline -= (button->baseline) >> ((uint8_t)4u);
 11751  07BF  0877               	movf	Button_Baseline_Update@button,w
 11752  07C0  3E05               	addlw	5
 11753  07C1  0086               	movwf	6
 11754  07C2  0187               	clrf	7
 11755  07C3  3F40               	moviw [0]fsr1
 11756  07C4  00F1               	movwf	??_Button_Baseline_Update
 11757  07C5  3F41               	moviw [1]fsr1
 11758  07C6  00F2               	movwf	??_Button_Baseline_Update+1
 11759  07C7  3F42               	moviw [2]fsr1
 11760  07C8  00F3               	movwf	??_Button_Baseline_Update+2
 11761  07C9  3F43               	moviw [3]fsr1
 11762  07CA  00F4               	movwf	??_Button_Baseline_Update+3
 11763  07CB  3004               	movlw	4
 11764  07CC                     u2845:	
 11765  07CC  36F4               	lsrf	??_Button_Baseline_Update+3,f
 11766  07CD  0CF3               	rrf	??_Button_Baseline_Update+2,f
 11767  07CE  0CF2               	rrf	??_Button_Baseline_Update+1,f
 11768  07CF  0CF1               	rrf	??_Button_Baseline_Update,f
 11769  07D0  0B89               	decfsz	9,f
 11770  07D1  2FCC               	goto	u2845
 11771  07D2  0877               	movf	Button_Baseline_Update@button,w
 11772  07D3  3E05               	addlw	5
 11773  07D4  0086               	movwf	6
 11774  07D5  0187               	clrf	7
 11775  07D6  0871               	movf	??_Button_Baseline_Update,w
 11776  07D7  0281               	subwf	1,f
 11777  07D8  3141               	addfsr 1,1
 11778  07D9  0872               	movf	??_Button_Baseline_Update+1,w
 11779  07DA  3B81               	subwfb	1,f
 11780  07DB  3141               	addfsr 1,1
 11781  07DC  0873               	movf	??_Button_Baseline_Update+2,w
 11782  07DD  3B81               	subwfb	1,f
 11783  07DE  3141               	addfsr 1,1
 11784  07DF  0874               	movf	??_Button_Baseline_Update+3,w
 11785  07E0  3B81               	subwfb	1,f
 11786  07E1  317D               	addfsr 1,-3
 11787                           
 11788                           ;mcc_generated_files/mtouch/mtouch_button.c: 473:         button->baseline += button->re
      +                          ading;
 11789  07E2  0877               	movf	Button_Baseline_Update@button,w
 11790  07E3  3E03               	addlw	3
 11791  07E4  0086               	movwf	6
 11792  07E5  0187               	clrf	7
 11793  07E6  3F40               	moviw [0]fsr1
 11794  07E7  00F1               	movwf	??_Button_Baseline_Update
 11795  07E8  3F41               	moviw [1]fsr1
 11796  07E9  00F2               	movwf	??_Button_Baseline_Update+1
 11797  07EA  0871               	movf	??_Button_Baseline_Update,w
 11798  07EB  00F3               	movwf	??_Button_Baseline_Update+2
 11799  07EC  0872               	movf	??_Button_Baseline_Update+1,w
 11800  07ED  00F4               	movwf	??_Button_Baseline_Update+3
 11801  07EE  01F5               	clrf	??_Button_Baseline_Update+4
 11802  07EF  01F6               	clrf	??_Button_Baseline_Update+5
 11803  07F0  0877               	movf	Button_Baseline_Update@button,w
 11804  07F1  3E05               	addlw	5
 11805  07F2  0086               	movwf	6
 11806  07F3  0187               	clrf	7
 11807  07F4  0873               	movf	??_Button_Baseline_Update+2,w
 11808  07F5  0781               	addwf	1,f
 11809  07F6  3141               	addfsr 1,1
 11810  07F7  0874               	movf	??_Button_Baseline_Update+3,w
 11811  07F8  3D81               	addwfc	1,f
 11812  07F9  3141               	addfsr 1,1
 11813  07FA  0875               	movf	??_Button_Baseline_Update+4,w
 11814  07FB  3D81               	addwfc	1,f
 11815  07FC  3141               	addfsr 1,1
 11816  07FD  0876               	movf	??_Button_Baseline_Update+5,w
 11817  07FE  3D81               	addwfc	1,f
 11818  07FF  0008               	return
 11819  0800                     __end_of_Button_Baseline_Update:	
 11820                           
 11821                           	psect	text76
 11822  0B37                     __ptext76:	
 11823 ;; *************** function _Button_Baseline_Initialize *****************
 11824 ;; Defined at:
 11825 ;;		line 455 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11826 ;; Parameters:    Size  Location     Type
 11827 ;;  button          1    wreg     PTR struct .
 11828 ;;		 -> mtouch_button(16), 
 11829 ;; Auto vars:     Size  Location     Type
 11830 ;;  button          1    9[COMMON] PTR struct .
 11831 ;;		 -> mtouch_button(16), 
 11832 ;; Return value:  Size  Location     Type
 11833 ;;                  1    wreg      void 
 11834 ;; Registers used:
 11835 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11836 ;; Tracked objects:
 11837 ;;		On entry : 0/0
 11838 ;;		On exit  : 0/0
 11839 ;;		Unchanged: 0/0
 11840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11841 ;;      Params:         0       0       0       0       0       0       0       0
 11842 ;;      Locals:         1       0       0       0       0       0       0       0
 11843 ;;      Temps:          0       4       0       0       0       0       0       0
 11844 ;;      Totals:         1       4       0       0       0       0       0       0
 11845 ;;Total ram usage:        5 bytes
 11846 ;; Hardware stack levels used:    1
 11847 ;; Hardware stack levels required when called:    6
 11848 ;; This function calls:
 11849 ;;		_MTOUCH_Sensor_RawSample_Get
 11850 ;; This function is called by:
 11851 ;;		_Button_State_Initializing
 11852 ;; This function uses a non-reentrant model
 11853 ;;
 11854                           
 11855                           
 11856                           ;psect for function _Button_Baseline_Initialize
 11857  0B37                     _Button_Baseline_Initialize:	
 11858                           
 11859                           ;incstack = 0
 11860                           ; Regs used in _Button_Baseline_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 11861                           ;Button_Baseline_Initialize@button stored from wreg
 11862  0B37  00F9               	movwf	Button_Baseline_Initialize@button
 11863                           
 11864                           ;mcc_generated_files/mtouch/mtouch_button.c: 455: static void Button_Baseline_Initialize
      +                          (mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 456: {;mcc_generat
      +                          ed_files/mtouch/mtouch_button.c: 457:     button->baseline = MTOUCH_Sensor_RawSample_Get
      +                          (button->sensor);
 11865  0B38  0A79               	incf	Button_Baseline_Initialize@button,w
 11866  0B39  0086               	movwf	6
 11867  0B3A  0187               	clrf	7
 11868  0B3B  0801               	movf	1,w
 11869  0B3C  3188  20AF  318B   	fcall	_MTOUCH_Sensor_RawSample_Get
 11870  0B3F  0875               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 11871  0B40  0020               	movlb	0	; select bank0
 11872  0B41  00A0               	movwf	??_Button_Baseline_Initialize
 11873  0B42  0876               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 11874  0B43  00A1               	movwf	??_Button_Baseline_Initialize+1
 11875  0B44  01A2               	clrf	??_Button_Baseline_Initialize+2
 11876  0B45  01A3               	clrf	??_Button_Baseline_Initialize+3
 11877  0B46  0879               	movf	Button_Baseline_Initialize@button,w
 11878  0B47  3E05               	addlw	5
 11879  0B48  0086               	movwf	6
 11880  0B49  0187               	clrf	7
 11881  0B4A  0820               	movf	??_Button_Baseline_Initialize,w
 11882  0B4B  3FC0               	movwi [0]fsr1
 11883  0B4C  0821               	movf	??_Button_Baseline_Initialize+1,w
 11884  0B4D  3FC1               	movwi [1]fsr1
 11885  0B4E  0822               	movf	??_Button_Baseline_Initialize+2,w
 11886  0B4F  3FC2               	movwi [2]fsr1
 11887  0B50  0823               	movf	??_Button_Baseline_Initialize+3,w
 11888  0B51  3FC3               	movwi [3]fsr1
 11889                           
 11890                           ;mcc_generated_files/mtouch/mtouch_button.c: 458:     button->baseline <<= ((uint8_t)4u)
      +                          ;
 11891  0B52  0879               	movf	Button_Baseline_Initialize@button,w
 11892  0B53  3E05               	addlw	5
 11893  0B54  0086               	movwf	6
 11894  0B55  0187               	clrf	7
 11895  0B56  3004               	movlw	4
 11896  0B57                     u4555:	
 11897  0B57  3581               	lslf	1,f
 11898  0B58  3141               	addfsr 1,1
 11899  0B59  0D81               	rlf	1,f
 11900  0B5A  3141               	addfsr 1,1
 11901  0B5B  0D81               	rlf	1,f
 11902  0B5C  3141               	addfsr 1,1
 11903  0B5D  0D81               	rlf	1,f
 11904  0B5E  317D               	addfsr 1,-3
 11905  0B5F  0B89               	decfsz	9,f
 11906  0B60  2B57               	goto	u4555
 11907  0B61  0008               	return
 11908  0B62                     __end_of_Button_Baseline_Initialize:	
 11909                           
 11910                           	psect	text77
 11911  1795                     __ptext77:	
 11912 ;; *************** function _Button_Reading_Update *****************
 11913 ;; Defined at:
 11914 ;;		line 428 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11915 ;; Parameters:    Size  Location     Type
 11916 ;;  button          1    wreg     PTR struct .
 11917 ;;		 -> mtouch_button(16), 
 11918 ;; Auto vars:     Size  Location     Type
 11919 ;;  button          1    0[BANK0 ] PTR struct .
 11920 ;;		 -> mtouch_button(16), 
 11921 ;; Return value:  Size  Location     Type
 11922 ;;                  1    wreg      void 
 11923 ;; Registers used:
 11924 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11925 ;; Tracked objects:
 11926 ;;		On entry : 0/0
 11927 ;;		On exit  : 0/0
 11928 ;;		Unchanged: 0/0
 11929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11930 ;;      Params:         0       0       0       0       0       0       0       0
 11931 ;;      Locals:         0       1       0       0       0       0       0       0
 11932 ;;      Temps:          0       0       0       0       0       0       0       0
 11933 ;;      Totals:         0       1       0       0       0       0       0       0
 11934 ;;Total ram usage:        1 bytes
 11935 ;; Hardware stack levels used:    1
 11936 ;; Hardware stack levels required when called:    7
 11937 ;; This function calls:
 11938 ;;		_Button_Reading_Update_Helper
 11939 ;; This function is called by:
 11940 ;;		_Button_Service
 11941 ;; This function uses a non-reentrant model
 11942 ;;
 11943                           
 11944                           
 11945                           ;psect for function _Button_Reading_Update
 11946  1795                     _Button_Reading_Update:	
 11947                           
 11948                           ;incstack = 0
 11949                           ; Regs used in _Button_Reading_Update: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11950                           ;Button_Reading_Update@button stored from wreg
 11951  1795  0020               	movlb	0	; select bank0
 11952  1796  00A0               	movwf	Button_Reading_Update@button
 11953                           
 11954                           ;mcc_generated_files/mtouch/mtouch_button.c: 428: static void Button_Reading_Update(mtou
      +                          ch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 429: {;mcc_generated_fi
      +                          les/mtouch/mtouch_button.c: 430:     if (GIE == (uint8_t) 1)
 11955  1797  1F8B               	btfss	11,7	;volatile
 11956  1798  2F9F               	goto	l5684
 11957                           
 11958                           ;mcc_generated_files/mtouch/mtouch_button.c: 431:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 432:         GIE = (uint8_t) 0;
 11959  1799  138B               	bcf	11,7	;volatile
 11960                           
 11961                           ;mcc_generated_files/mtouch/mtouch_button.c: 433:         Button_Reading_Update_Helper(b
      +                          utton);
 11962  179A  0820               	movf	Button_Reading_Update@button,w
 11963  179B  318D  250E         	fcall	_Button_Reading_Update_Helper
 11964                           
 11965                           ;mcc_generated_files/mtouch/mtouch_button.c: 434:         GIE = (uint8_t) 1;
 11966  179D  178B               	bsf	11,7	;volatile
 11967                           
 11968                           ;mcc_generated_files/mtouch/mtouch_button.c: 435:     }
 11969  179E  0008               	return
 11970  179F                     l5684:	
 11971                           
 11972                           ;mcc_generated_files/mtouch/mtouch_button.c: 437:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 438:         Button_Reading_Update_Helper(button);
 11973  179F  0820               	movf	Button_Reading_Update@button,w
 11974  17A0  318D  250E         	fcall	_Button_Reading_Update_Helper
 11975  17A2  0008               	return
 11976  17A3                     __end_of_Button_Reading_Update:	
 11977                           
 11978                           	psect	text78
 11979  0D0E                     __ptext78:	
 11980 ;; *************** function _Button_Reading_Update_Helper *****************
 11981 ;; Defined at:
 11982 ;;		line 442 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11983 ;; Parameters:    Size  Location     Type
 11984 ;;  button          1    wreg     PTR struct .
 11985 ;;		 -> mtouch_button(16), 
 11986 ;; Auto vars:     Size  Location     Type
 11987 ;;  button          1   11[COMMON] PTR struct .
 11988 ;;		 -> mtouch_button(16), 
 11989 ;; Return value:  Size  Location     Type
 11990 ;;                  1    wreg      void 
 11991 ;; Registers used:
 11992 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11993 ;; Tracked objects:
 11994 ;;		On entry : 0/0
 11995 ;;		On exit  : 0/0
 11996 ;;		Unchanged: 0/0
 11997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11998 ;;      Params:         0       0       0       0       0       0       0       0
 11999 ;;      Locals:         1       0       0       0       0       0       0       0
 12000 ;;      Temps:          2       0       0       0       0       0       0       0
 12001 ;;      Totals:         3       0       0       0       0       0       0       0
 12002 ;;Total ram usage:        3 bytes
 12003 ;; Hardware stack levels used:    1
 12004 ;; Hardware stack levels required when called:    6
 12005 ;; This function calls:
 12006 ;;		_MTOUCH_Sensor_RawSample_Get
 12007 ;; This function is called by:
 12008 ;;		_Button_Reading_Update
 12009 ;; This function uses a non-reentrant model
 12010 ;;
 12011                           
 12012                           
 12013                           ;psect for function _Button_Reading_Update_Helper
 12014  0D0E                     _Button_Reading_Update_Helper:	
 12015                           
 12016                           ;incstack = 0
 12017                           ; Regs used in _Button_Reading_Update_Helper: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 12018                           ;Button_Reading_Update_Helper@button stored from wreg
 12019  0D0E  00FB               	movwf	Button_Reading_Update_Helper@button
 12020                           
 12021                           ;mcc_generated_files/mtouch/mtouch_button.c: 442: static void Button_Reading_Update_Help
      +                          er(mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 443: {;mcc_gener
      +                          ated_files/mtouch/mtouch_button.c: 444:     if (button->state != MTOUCH_BUTTON_STATE_ini
      +                          tializing)
 12022  0D0F  087B               	movf	Button_Reading_Update_Helper@button,w
 12023  0D10  3E02               	addlw	2
 12024  0D11  0086               	movwf	6
 12025  0D12  0187               	clrf	7
 12026  0D13  0801               	movf	1,w
 12027  0D14  1903               	btfsc	3,2
 12028  0D15  2D45               	goto	l5586
 12029                           
 12030                           ;mcc_generated_files/mtouch/mtouch_button.c: 445:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 446:         button->reading -= button->reading>>((uint8_t)2u);
 12031  0D16  087B               	movf	Button_Reading_Update_Helper@button,w
 12032  0D17  3E03               	addlw	3
 12033  0D18  0086               	movwf	6
 12034  0D19  0187               	clrf	7
 12035  0D1A  3F40               	moviw [0]fsr1
 12036  0D1B  00F9               	movwf	??_Button_Reading_Update_Helper
 12037  0D1C  3F41               	moviw [1]fsr1
 12038  0D1D  00FA               	movwf	??_Button_Reading_Update_Helper+1
 12039  0D1E  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
 12040  0D1F  0CF9               	rrf	??_Button_Reading_Update_Helper,f
 12041  0D20  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
 12042  0D21  0CF9               	rrf	??_Button_Reading_Update_Helper,f
 12043  0D22  087B               	movf	Button_Reading_Update_Helper@button,w
 12044  0D23  3E03               	addlw	3
 12045  0D24  0086               	movwf	6
 12046  0D25  0187               	clrf	7
 12047  0D26  0879               	movf	??_Button_Reading_Update_Helper,w
 12048  0D27  0281               	subwf	1,f
 12049  0D28  3141               	addfsr 1,1
 12050  0D29  087A               	movf	??_Button_Reading_Update_Helper+1,w
 12051  0D2A  3B81               	subwfb	1,f
 12052  0D2B  317F               	addfsr 1,-1
 12053                           
 12054                           ;mcc_generated_files/mtouch/mtouch_button.c: 447:         button->reading += MTOUCH_Sens
      +                          or_RawSample_Get(button->sensor) >> ((uint8_t)2u);
 12055  0D2C  0A7B               	incf	Button_Reading_Update_Helper@button,w
 12056  0D2D  0086               	movwf	6
 12057  0D2E  0187               	clrf	7
 12058  0D2F  0801               	movf	1,w
 12059  0D30  3188  20AF         	fcall	_MTOUCH_Sensor_RawSample_Get
 12060  0D32  0875               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 12061  0D33  00F9               	movwf	??_Button_Reading_Update_Helper
 12062  0D34  0876               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 12063  0D35  00FA               	movwf	??_Button_Reading_Update_Helper+1
 12064  0D36  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
 12065  0D37  0CF9               	rrf	??_Button_Reading_Update_Helper,f
 12066  0D38  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
 12067  0D39  0CF9               	rrf	??_Button_Reading_Update_Helper,f
 12068  0D3A  087B               	movf	Button_Reading_Update_Helper@button,w
 12069  0D3B  3E03               	addlw	3
 12070  0D3C  0086               	movwf	6
 12071  0D3D  0187               	clrf	7
 12072  0D3E  0879               	movf	??_Button_Reading_Update_Helper,w
 12073  0D3F  0781               	addwf	1,f
 12074  0D40  3141               	addfsr 1,1
 12075  0D41  087A               	movf	??_Button_Reading_Update_Helper+1,w
 12076  0D42  3D81               	addwfc	1,f
 12077  0D43  317F               	addfsr 1,-1
 12078                           
 12079                           ;mcc_generated_files/mtouch/mtouch_button.c: 448:     }
 12080  0D44  0008               	return
 12081  0D45                     l5586:	
 12082                           
 12083                           ;mcc_generated_files/mtouch/mtouch_button.c: 450:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 451:         button->reading = MTOUCH_Sensor_RawSample_Get(button->sensor);
 12084  0D45  0A7B               	incf	Button_Reading_Update_Helper@button,w
 12085  0D46  0086               	movwf	6
 12086  0D47  0187               	clrf	7
 12087  0D48  0801               	movf	1,w
 12088  0D49  3188  20AF         	fcall	_MTOUCH_Sensor_RawSample_Get
 12089  0D4B  087B               	movf	Button_Reading_Update_Helper@button,w
 12090  0D4C  3E03               	addlw	3
 12091  0D4D  0086               	movwf	6
 12092  0D4E  0187               	clrf	7
 12093  0D4F  0875               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 12094  0D50  3FC0               	movwi [0]fsr1
 12095  0D51  0876               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 12096  0D52  3FC1               	movwi [1]fsr1
 12097  0D53  0008               	return
 12098  0D54                     __end_of_Button_Reading_Update_Helper:	
 12099                           
 12100                           	psect	text79
 12101  08AF                     __ptext79:	
 12102 ;; *************** function _MTOUCH_Sensor_RawSample_Get *****************
 12103 ;; Defined at:
 12104 ;;		line 775 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 12105 ;; Parameters:    Size  Location     Type
 12106 ;;  name            1    wreg     enum E2854
 12107 ;; Auto vars:     Size  Location     Type
 12108 ;;  name            1    8[COMMON] enum E2854
 12109 ;; Return value:  Size  Location     Type
 12110 ;;                  2    5[COMMON] unsigned short 
 12111 ;; Registers used:
 12112 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12113 ;; Tracked objects:
 12114 ;;		On entry : 0/0
 12115 ;;		On exit  : 0/0
 12116 ;;		Unchanged: 0/0
 12117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12118 ;;      Params:         2       0       0       0       0       0       0       0
 12119 ;;      Locals:         1       0       0       0       0       0       0       0
 12120 ;;      Temps:          1       0       0       0       0       0       0       0
 12121 ;;      Totals:         4       0       0       0       0       0       0       0
 12122 ;;Total ram usage:        4 bytes
 12123 ;; Hardware stack levels used:    1
 12124 ;; Hardware stack levels required when called:    5
 12125 ;; This function calls:
 12126 ;;		___bmul
 12127 ;; This function is called by:
 12128 ;;		_Button_Reading_Update_Helper
 12129 ;;		_Button_Baseline_Initialize
 12130 ;; This function uses a non-reentrant model
 12131 ;;
 12132                           
 12133                           
 12134                           ;psect for function _MTOUCH_Sensor_RawSample_Get
 12135  08AF                     _MTOUCH_Sensor_RawSample_Get:	
 12136                           
 12137                           ;incstack = 0
 12138                           ; Regs used in _MTOUCH_Sensor_RawSample_Get: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12139                           ;MTOUCH_Sensor_RawSample_Get@name stored from wreg
 12140  08AF  00F8               	movwf	MTOUCH_Sensor_RawSample_Get@name
 12141                           
 12142                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 775: mtouch_sensor_sample_t MTOUCH_Sensor_R
      +                          awSample_Get(enum mtouch_sensor_names name);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          776: {;mcc_generated_files/mtouch/mtouch_sensor.c: 777:     if (name < 1u)
 12143  08B0  0878               	movf	MTOUCH_Sensor_RawSample_Get@name,w
 12144  08B1  1D03               	btfss	3,2
 12145  08B2  28C2               	goto	l5492
 12146                           
 12147                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 778:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 779:         return mtouch_sensor[name].rawSample;
 12148  08B3  3009               	movlw	9
 12149  08B4  00F7               	movwf	??_MTOUCH_Sensor_RawSample_Get
 12150  08B5  0877               	movf	??_MTOUCH_Sensor_RawSample_Get,w
 12151  08B6  00F1               	movwf	___bmul@multiplicand
 12152  08B7  0878               	movf	MTOUCH_Sensor_RawSample_Get@name,w
 12153  08B8  3188  2003         	fcall	___bmul
 12154  08BA  3EE4               	addlw	(low ((_mtouch_sensor| 0+6)))& (0+255)
 12155  08BB  0086               	movwf	6
 12156  08BC  0187               	clrf	7
 12157  08BD  3F40               	moviw [0]fsr1
 12158  08BE  00F5               	movwf	?_MTOUCH_Sensor_RawSample_Get
 12159  08BF  3F41               	moviw [1]fsr1
 12160  08C0  00F6               	movwf	?_MTOUCH_Sensor_RawSample_Get+1
 12161  08C1  0008               	return
 12162  08C2                     l5492:	
 12163                           
 12164                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 782:         return (mtouch_sensor_sample_t
      +                          )0;
 12165  08C2  01F5               	clrf	?_MTOUCH_Sensor_RawSample_Get
 12166  08C3  01F6               	clrf	?_MTOUCH_Sensor_RawSample_Get+1
 12167  08C4  0008               	return
 12168  08C5                     __end_of_MTOUCH_Sensor_RawSample_Get:	
 12169                           
 12170                           	psect	text80
 12171  0803                     __ptext80:	
 12172 ;; *************** function ___bmul *****************
 12173 ;; Defined at:
 12174 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul8.c"
 12175 ;; Parameters:    Size  Location     Type
 12176 ;;  multiplier      1    wreg     unsigned char 
 12177 ;;  multiplicand    1    1[COMMON] unsigned char 
 12178 ;; Auto vars:     Size  Location     Type
 12179 ;;  multiplier      1    4[COMMON] unsigned char 
 12180 ;;  product         1    3[COMMON] unsigned char 
 12181 ;; Return value:  Size  Location     Type
 12182 ;;                  1    wreg      unsigned char 
 12183 ;; Registers used:
 12184 ;;		wreg, status,2, status,0
 12185 ;; Tracked objects:
 12186 ;;		On entry : 0/0
 12187 ;;		On exit  : 0/0
 12188 ;;		Unchanged: 0/0
 12189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12190 ;;      Params:         1       0       0       0       0       0       0       0
 12191 ;;      Locals:         2       0       0       0       0       0       0       0
 12192 ;;      Temps:          1       0       0       0       0       0       0       0
 12193 ;;      Totals:         4       0       0       0       0       0       0       0
 12194 ;;Total ram usage:        4 bytes
 12195 ;; Hardware stack levels used:    1
 12196 ;; Hardware stack levels required when called:    4
 12197 ;; This function calls:
 12198 ;;		Nothing
 12199 ;; This function is called by:
 12200 ;;		_MTOUCH_Sensor_Initialize
 12201 ;;		_MTOUCH_Sensor_RawSample_Get
 12202 ;;		_MTOUCH_Sensor_Enable
 12203 ;;		_MTOUCH_Sensor_Calibrate
 12204 ;;		_MTOUCH_Sensor_isCalibrated
 12205 ;;		_MTOUCH_Sensor_wasSampled
 12206 ;;		_MTOUCH_Sensor_isAnySensorActive
 12207 ;;		_MTOUCH_Sensor_Disable
 12208 ;;		_MTOUCH_Sensor_isEnabled
 12209 ;;		_MTOUCH_Sensor_isActive
 12210 ;;		_MTOUCH_Sensor_AdditionalCap_Get
 12211 ;;		_MTOUCH_Sensor_AcquisitionTime_Get
 12212 ;;		_MTOUCH_Sensor_PreChargeTime_Get
 12213 ;;		_MTOUCH_Sensor_Oversampling_Get
 12214 ;;		_MTOUCH_Sensor_Oversampling_Set
 12215 ;; This function uses a non-reentrant model
 12216 ;;
 12217                           
 12218                           
 12219                           ;psect for function ___bmul
 12220  0803                     ___bmul:	
 12221                           
 12222                           ;incstack = 0
 12223                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 12224                           ;___bmul@multiplier stored from wreg
 12225  0803  00F4               	movwf	___bmul@multiplier
 12226  0804  01F3               	clrf	___bmul@product
 12227  0805                     l5266:	
 12228  0805  1C74               	btfss	___bmul@multiplier,0
 12229  0806  280B               	goto	l5270
 12230  0807  0871               	movf	___bmul@multiplicand,w
 12231  0808  00F2               	movwf	??___bmul
 12232  0809  0872               	movf	??___bmul,w
 12233  080A  07F3               	addwf	___bmul@product,f
 12234  080B                     l5270:	
 12235  080B  1003               	clrc
 12236  080C  0DF1               	rlf	___bmul@multiplicand,f
 12237  080D  1003               	clrc
 12238  080E  0CF4               	rrf	___bmul@multiplier,f
 12239  080F  0874               	movf	___bmul@multiplier,w
 12240  0810  1D03               	btfss	3,2
 12241  0811  2805               	goto	l5266
 12242  0812  0873               	movf	___bmul@product,w
 12243  0813  0008               	return
 12244  0814                     __end_of___bmul:	
 12245                           
 12246                           	psect	text81
 12247  0F7D                     __ptext81:	
 12248 ;; *************** function _Button_Deviation_Update *****************
 12249 ;; Defined at:
 12250 ;;		line 379 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12251 ;; Parameters:    Size  Location     Type
 12252 ;;  button          1    wreg     PTR struct .
 12253 ;;		 -> mtouch_button(16), 
 12254 ;; Auto vars:     Size  Location     Type
 12255 ;;  button          1    0[BANK0 ] PTR struct .
 12256 ;;		 -> mtouch_button(16), 
 12257 ;;  deviation       4    1[BANK0 ] long 
 12258 ;; Return value:  Size  Location     Type
 12259 ;;                  1    wreg      void 
 12260 ;; Registers used:
 12261 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12262 ;; Tracked objects:
 12263 ;;		On entry : 0/0
 12264 ;;		On exit  : 0/0
 12265 ;;		Unchanged: 0/0
 12266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12267 ;;      Params:         0       0       0       0       0       0       0       0
 12268 ;;      Locals:         0       5       0       0       0       0       0       0
 12269 ;;      Temps:         10       0       0       0       0       0       0       0
 12270 ;;      Totals:        10       5       0       0       0       0       0       0
 12271 ;;Total ram usage:       15 bytes
 12272 ;; Hardware stack levels used:    1
 12273 ;; Hardware stack levels required when called:    4
 12274 ;; This function calls:
 12275 ;;		Nothing
 12276 ;; This function is called by:
 12277 ;;		_Button_Service
 12278 ;; This function uses a non-reentrant model
 12279 ;;
 12280                           
 12281                           
 12282                           ;psect for function _Button_Deviation_Update
 12283  0F7D                     _Button_Deviation_Update:	
 12284                           
 12285                           ;incstack = 0
 12286                           ; Regs used in _Button_Deviation_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
 12287                           ;Button_Deviation_Update@button stored from wreg
 12288  0F7D  0020               	movlb	0	; select bank0
 12289  0F7E  00A0               	movwf	Button_Deviation_Update@button
 12290                           
 12291                           ;mcc_generated_files/mtouch/mtouch_button.c: 379: static void Button_Deviation_Update(mt
      +                          ouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 380: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 381:     int32_t deviation;;mcc_generated_files/mtouch/mto
      +                          uch_button.c: 383:     deviation = (int32_t)((int32_t)(button->reading) - (int32_t)((but
      +                          ton->baseline)>>((uint8_t)4u)));
 12292  0F7F  0820               	movf	Button_Deviation_Update@button,w
 12293  0F80  3E05               	addlw	5
 12294  0F81  0086               	movwf	6
 12295  0F82  0187               	clrf	7
 12296  0F83  3F40               	moviw [0]fsr1
 12297  0F84  00F1               	movwf	??_Button_Deviation_Update
 12298  0F85  3F41               	moviw [1]fsr1
 12299  0F86  00F2               	movwf	??_Button_Deviation_Update+1
 12300  0F87  3F42               	moviw [2]fsr1
 12301  0F88  00F3               	movwf	??_Button_Deviation_Update+2
 12302  0F89  3F43               	moviw [3]fsr1
 12303  0F8A  00F4               	movwf	??_Button_Deviation_Update+3
 12304  0F8B  3004               	movlw	4
 12305  0F8C                     u3035:	
 12306  0F8C  36F4               	lsrf	??_Button_Deviation_Update+3,f
 12307  0F8D  0CF3               	rrf	??_Button_Deviation_Update+2,f
 12308  0F8E  0CF2               	rrf	??_Button_Deviation_Update+1,f
 12309  0F8F  0CF1               	rrf	??_Button_Deviation_Update,f
 12310  0F90  0B89               	decfsz	9,f
 12311  0F91  2F8C               	goto	u3035
 12312  0F92  0820               	movf	Button_Deviation_Update@button,w
 12313  0F93  3E03               	addlw	3
 12314  0F94  0086               	movwf	6
 12315  0F95  0187               	clrf	7
 12316  0F96  3F40               	moviw [0]fsr1
 12317  0F97  00F5               	movwf	??_Button_Deviation_Update+4
 12318  0F98  3F41               	moviw [1]fsr1
 12319  0F99  00F6               	movwf	??_Button_Deviation_Update+5
 12320  0F9A  0875               	movf	??_Button_Deviation_Update+4,w
 12321  0F9B  00F7               	movwf	??_Button_Deviation_Update+6
 12322  0F9C  0876               	movf	??_Button_Deviation_Update+5,w
 12323  0F9D  00F8               	movwf	??_Button_Deviation_Update+7
 12324  0F9E  01F9               	clrf	??_Button_Deviation_Update+8
 12325  0F9F  01FA               	clrf	??_Button_Deviation_Update+9
 12326  0FA0  0871               	movf	??_Button_Deviation_Update,w
 12327  0FA1  02F7               	subwf	??_Button_Deviation_Update+6,f
 12328  0FA2  0872               	movf	??_Button_Deviation_Update+1,w
 12329  0FA3  3BF8               	subwfb	??_Button_Deviation_Update+7,f
 12330  0FA4  0873               	movf	??_Button_Deviation_Update+2,w
 12331  0FA5  3BF9               	subwfb	??_Button_Deviation_Update+8,f
 12332  0FA6  0874               	movf	??_Button_Deviation_Update+3,w
 12333  0FA7  3BFA               	subwfb	??_Button_Deviation_Update+9,f
 12334  0FA8  087A               	movf	??_Button_Deviation_Update+9,w
 12335  0FA9  00A4               	movwf	Button_Deviation_Update@deviation+3
 12336  0FAA  0879               	movf	??_Button_Deviation_Update+8,w
 12337  0FAB  00A3               	movwf	Button_Deviation_Update@deviation+2
 12338  0FAC  0878               	movf	??_Button_Deviation_Update+7,w
 12339  0FAD  00A2               	movwf	Button_Deviation_Update@deviation+1
 12340  0FAE  0877               	movf	??_Button_Deviation_Update+6,w
 12341  0FAF  00A1               	movwf	Button_Deviation_Update@deviation
 12342                           
 12343                           ;mcc_generated_files/mtouch/mtouch_button.c: 386:     deviation = deviation >> (button->
      +                          scaling);
 12344  0FB0  0821               	movf	Button_Deviation_Update@deviation,w
 12345  0FB1  00F1               	movwf	??_Button_Deviation_Update
 12346  0FB2  0822               	movf	Button_Deviation_Update@deviation+1,w
 12347  0FB3  00F2               	movwf	??_Button_Deviation_Update+1
 12348  0FB4  0823               	movf	Button_Deviation_Update@deviation+2,w
 12349  0FB5  00F3               	movwf	??_Button_Deviation_Update+2
 12350  0FB6  0824               	movf	Button_Deviation_Update@deviation+3,w
 12351  0FB7  00F4               	movwf	??_Button_Deviation_Update+3
 12352  0FB8  0820               	movf	Button_Deviation_Update@button,w
 12353  0FB9  3E0F               	addlw	15
 12354  0FBA  0086               	movwf	6
 12355  0FBB  0187               	clrf	7
 12356  0FBC  0A01               	incf	1,w
 12357  0FBD  2FC2               	goto	u3040
 12358  0FBE                     u3045:	
 12359  0FBE  37F4               	asrf	??_Button_Deviation_Update+3,f
 12360  0FBF  0CF3               	rrf	??_Button_Deviation_Update+2,f
 12361  0FC0  0CF2               	rrf	??_Button_Deviation_Update+1,f
 12362  0FC1  0CF1               	rrf	??_Button_Deviation_Update,f
 12363  0FC2                     u3040:	
 12364  0FC2  0B89               	decfsz	9,f
 12365  0FC3  2FBE               	goto	u3045
 12366  0FC4  0874               	movf	??_Button_Deviation_Update+3,w
 12367  0FC5  00A4               	movwf	Button_Deviation_Update@deviation+3
 12368  0FC6  0873               	movf	??_Button_Deviation_Update+2,w
 12369  0FC7  00A3               	movwf	Button_Deviation_Update@deviation+2
 12370  0FC8  0872               	movf	??_Button_Deviation_Update+1,w
 12371  0FC9  00A2               	movwf	Button_Deviation_Update@deviation+1
 12372  0FCA  0871               	movf	??_Button_Deviation_Update,w
 12373  0FCB  00A1               	movwf	Button_Deviation_Update@deviation
 12374                           
 12375                           ;mcc_generated_files/mtouch/mtouch_button.c: 389:     if (deviation > ((0x7f)))
 12376  0FCC  1BA4               	btfsc	Button_Deviation_Update@deviation+3,7
 12377  0FCD  2FE3               	goto	l4206
 12378  0FCE  0824               	movf	Button_Deviation_Update@deviation+3,w
 12379  0FCF  1D03               	btfss	3,2
 12380  0FD0  2FDB               	goto	l4204
 12381  0FD1  0823               	movf	Button_Deviation_Update@deviation+2,w
 12382  0FD2  1D03               	btfss	3,2
 12383  0FD3  2FDB               	goto	l4204
 12384  0FD4  0822               	movf	Button_Deviation_Update@deviation+1,w
 12385  0FD5  1D03               	btfss	3,2
 12386  0FD6  2FDB               	goto	l4204
 12387  0FD7  3080               	movlw	128
 12388  0FD8  0221               	subwf	Button_Deviation_Update@deviation,w
 12389  0FD9  1C03               	btfss	3,0
 12390  0FDA  2FE3               	goto	l4206
 12391  0FDB                     l4204:	
 12392                           
 12393                           ;mcc_generated_files/mtouch/mtouch_button.c: 390:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 391:         deviation = ((0x7f));
 12394  0FDB  3000               	movlw	0
 12395  0FDC  00A4               	movwf	Button_Deviation_Update@deviation+3
 12396  0FDD  3000               	movlw	0
 12397  0FDE  00A3               	movwf	Button_Deviation_Update@deviation+2
 12398  0FDF  3000               	movlw	0
 12399  0FE0  00A2               	movwf	Button_Deviation_Update@deviation+1
 12400  0FE1  307F               	movlw	127
 12401  0FE2  00A1               	movwf	Button_Deviation_Update@deviation
 12402  0FE3                     l4206:	
 12403                           
 12404                           ;mcc_generated_files/mtouch/mtouch_button.c: 393:     if (deviation < ((-1-0x7f)))
 12405  0FE3  1FA4               	btfss	Button_Deviation_Update@deviation+3,7
 12406  0FE4  2FF7               	goto	l4210
 12407  0FE5  3080               	movlw	128
 12408  0FE6  0221               	subwf	Button_Deviation_Update@deviation,w
 12409  0FE7  30FF               	movlw	255
 12410  0FE8  3B22               	subwfb	Button_Deviation_Update@deviation+1,w
 12411  0FE9  30FF               	movlw	255
 12412  0FEA  3B23               	subwfb	Button_Deviation_Update@deviation+2,w
 12413  0FEB  30FF               	movlw	255
 12414  0FEC  3B24               	subwfb	Button_Deviation_Update@deviation+3,w
 12415  0FED  1803               	btfsc	3,0
 12416  0FEE  2FF7               	goto	l4210
 12417                           
 12418                           ;mcc_generated_files/mtouch/mtouch_button.c: 394:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 395:         deviation = ((-1-0x7f));
 12419  0FEF  30FF               	movlw	255
 12420  0FF0  00A4               	movwf	Button_Deviation_Update@deviation+3
 12421  0FF1  30FF               	movlw	255
 12422  0FF2  00A3               	movwf	Button_Deviation_Update@deviation+2
 12423  0FF3  30FF               	movlw	255
 12424  0FF4  00A2               	movwf	Button_Deviation_Update@deviation+1
 12425  0FF5  3080               	movlw	128
 12426  0FF6  00A1               	movwf	Button_Deviation_Update@deviation
 12427  0FF7                     l4210:	
 12428                           
 12429                           ;mcc_generated_files/mtouch/mtouch_button.c: 398:     button->deviation = (mtouch_button
      +                          _deviation_t)deviation;
 12430  0FF7  0821               	movf	Button_Deviation_Update@deviation,w
 12431  0FF8  00F1               	movwf	??_Button_Deviation_Update
 12432  0FF9  0820               	movf	Button_Deviation_Update@button,w
 12433  0FFA  3E09               	addlw	9
 12434  0FFB  0086               	movwf	6
 12435  0FFC  0187               	clrf	7
 12436  0FFD  0871               	movf	??_Button_Deviation_Update,w
 12437  0FFE  0081               	movwf	1
 12438  0FFF  0008               	return
 12439  1000                     __end_of_Button_Deviation_Update:	
 12440                           
 12441                           	psect	text82
 12442  093D                     __ptext82:	
 12443 ;; *************** function _MTOUCH_Button_isPressed *****************
 12444 ;; Defined at:
 12445 ;;		line 354 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12446 ;; Parameters:    Size  Location     Type
 12447 ;;  name            1    wreg     enum E3067
 12448 ;; Auto vars:     Size  Location     Type
 12449 ;;  name            1    2[COMMON] enum E3067
 12450 ;; Return value:  Size  Location     Type
 12451 ;;                  1    wreg      _Bool 
 12452 ;; Registers used:
 12453 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12454 ;; Tracked objects:
 12455 ;;		On entry : 0/0
 12456 ;;		On exit  : 0/0
 12457 ;;		Unchanged: 0/0
 12458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12459 ;;      Params:         0       0       0       0       0       0       0       0
 12460 ;;      Locals:         1       0       0       0       0       0       0       0
 12461 ;;      Temps:          1       0       0       0       0       0       0       0
 12462 ;;      Totals:         2       0       0       0       0       0       0       0
 12463 ;;Total ram usage:        2 bytes
 12464 ;; Hardware stack levels used:    1
 12465 ;; Hardware stack levels required when called:    4
 12466 ;; This function calls:
 12467 ;;		Nothing
 12468 ;; This function is called by:
 12469 ;;		_main
 12470 ;;		_touch_example
 12471 ;;		_MTOUCH_Button_Buttonmask_Get
 12472 ;; This function uses a non-reentrant model
 12473 ;;
 12474                           
 12475                           
 12476                           ;psect for function _MTOUCH_Button_isPressed
 12477  093D                     _MTOUCH_Button_isPressed:	
 12478                           
 12479                           ;incstack = 0
 12480                           ; Regs used in _MTOUCH_Button_isPressed: [wreg+fsr1l+fsr1h+status,2+status,0]
 12481                           ;MTOUCH_Button_isPressed@name stored from wreg
 12482  093D  00F2               	movwf	MTOUCH_Button_isPressed@name
 12483                           
 12484                           ;mcc_generated_files/mtouch/mtouch_button.c: 354: _Bool MTOUCH_Button_isPressed(enum mto
      +                          uch_button_names name);mcc_generated_files/mtouch/mtouch_button.c: 355: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 356:     if(name < 1u)
 12485  093E  0872               	movf	MTOUCH_Button_isPressed@name,w
 12486  093F  1D03               	btfss	3,2
 12487  0940  2954               	goto	l4574
 12488                           
 12489                           ;mcc_generated_files/mtouch/mtouch_button.c: 357:         return (_Bool)((mtouch_button[
      +                          name].state == MTOUCH_BUTTON_STATE_pressed) ? 1 : 0);
 12490  0941  0872               	movf	MTOUCH_Button_isPressed@name,w
 12491  0942  00F1               	movwf	??_MTOUCH_Button_isPressed
 12492  0943  3003               	movlw	3
 12493  0944                     u3405:	
 12494  0944  35F1               	lslf	??_MTOUCH_Button_isPressed,f
 12495  0945  3EFF               	addlw	-1
 12496  0946  1D03               	skipz
 12497  0947  2944               	goto	u3405
 12498  0948  3571               	lslf	??_MTOUCH_Button_isPressed,w
 12499  0949  3EC6               	addlw	(low ((_mtouch_button| 0+2)))& (0+255)
 12500  094A  0086               	movwf	6
 12501  094B  0187               	clrf	7
 12502  094C  3002               	movlw	2
 12503  094D  0601               	xorwf	1,w
 12504  094E  1D03               	btfss	3,2
 12505  094F  2952               	goto	u3410
 12506  0950  3001               	movlw	1
 12507  0951  0008               	return
 12508  0952                     u3410:	
 12509  0952  3000               	movlw	0
 12510  0953  0008               	return
 12511  0954                     l4574:	
 12512                           
 12513                           ;mcc_generated_files/mtouch/mtouch_button.c: 359:         return 0;
 12514  0954  3000               	movlw	0
 12515  0955  0008               	return
 12516  0956                     __end_of_MTOUCH_Button_isPressed:	
 12517                           
 12518                           	psect	text83
 12519  16E1                     __ptext83:	
 12520 ;; *************** function _MTOUCH_Button_SetPressedCallback *****************
 12521 ;; Defined at:
 12522 ;;		line 508 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12523 ;; Parameters:    Size  Location     Type
 12524 ;;  callback        2    1[COMMON] PTR FTN(enum E3067,)void
 12525 ;;		 -> myButtonPressedCallback(1), 
 12526 ;; Auto vars:     Size  Location     Type
 12527 ;;		None
 12528 ;; Return value:  Size  Location     Type
 12529 ;;                  1    wreg      void 
 12530 ;; Registers used:
 12531 ;;		wreg
 12532 ;; Tracked objects:
 12533 ;;		On entry : 0/0
 12534 ;;		On exit  : 0/0
 12535 ;;		Unchanged: 0/0
 12536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12537 ;;      Params:         2       0       0       0       0       0       0       0
 12538 ;;      Locals:         0       0       0       0       0       0       0       0
 12539 ;;      Temps:          0       0       0       0       0       0       0       0
 12540 ;;      Totals:         2       0       0       0       0       0       0       0
 12541 ;;Total ram usage:        2 bytes
 12542 ;; Hardware stack levels used:    1
 12543 ;; Hardware stack levels required when called:    4
 12544 ;; This function calls:
 12545 ;;		Nothing
 12546 ;; This function is called by:
 12547 ;;		_main
 12548 ;; This function uses a non-reentrant model
 12549 ;;
 12550                           
 12551                           
 12552                           ;psect for function _MTOUCH_Button_SetPressedCallback
 12553  16E1                     _MTOUCH_Button_SetPressedCallback:	
 12554                           
 12555                           ;mcc_generated_files/mtouch/mtouch_button.c: 508: void MTOUCH_Button_SetPressedCallback(
      +                          void (*callback)(enum mtouch_button_names));mcc_generated_files/mtouch/mtouch_button.c: 
      +                          509: {;mcc_generated_files/mtouch/mtouch_button.c: 510:     callback_pressed = callback;
 12556                           
 12557                           ;incstack = 0
 12558                           ; Regs used in _MTOUCH_Button_SetPressedCallback: [wreg]
 12559  16E1  0872               	movf	MTOUCH_Button_SetPressedCallback@callback+1,w
 12560  16E2  0021               	movlb	1	; select bank1
 12561  16E3  00DB               	movwf	(_callback_pressed+1)^(0+128)
 12562  16E4  0871               	movf	MTOUCH_Button_SetPressedCallback@callback,w
 12563  16E5  00DA               	movwf	_callback_pressed^(0+128)
 12564  16E6  0008               	return
 12565  16E7                     __end_of_MTOUCH_Button_SetPressedCallback:	
 12566                           
 12567                           	psect	text84
 12568  16DB                     __ptext84:	
 12569 ;; *************** function _MTOUCH_Button_SetNotPressedCallback *****************
 12570 ;; Defined at:
 12571 ;;		line 512 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12572 ;; Parameters:    Size  Location     Type
 12573 ;;  callback        2    1[COMMON] PTR FTN(enum E3067,)void
 12574 ;;		 -> myButtonReleasedCallback(1), 
 12575 ;; Auto vars:     Size  Location     Type
 12576 ;;		None
 12577 ;; Return value:  Size  Location     Type
 12578 ;;                  1    wreg      void 
 12579 ;; Registers used:
 12580 ;;		wreg
 12581 ;; Tracked objects:
 12582 ;;		On entry : 0/0
 12583 ;;		On exit  : 0/0
 12584 ;;		Unchanged: 0/0
 12585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12586 ;;      Params:         2       0       0       0       0       0       0       0
 12587 ;;      Locals:         0       0       0       0       0       0       0       0
 12588 ;;      Temps:          0       0       0       0       0       0       0       0
 12589 ;;      Totals:         2       0       0       0       0       0       0       0
 12590 ;;Total ram usage:        2 bytes
 12591 ;; Hardware stack levels used:    1
 12592 ;; Hardware stack levels required when called:    4
 12593 ;; This function calls:
 12594 ;;		Nothing
 12595 ;; This function is called by:
 12596 ;;		_main
 12597 ;; This function uses a non-reentrant model
 12598 ;;
 12599                           
 12600                           
 12601                           ;psect for function _MTOUCH_Button_SetNotPressedCallback
 12602  16DB                     _MTOUCH_Button_SetNotPressedCallback:	
 12603                           
 12604                           ;mcc_generated_files/mtouch/mtouch_button.c: 512: void MTOUCH_Button_SetNotPressedCallba
      +                          ck(void (*callback)(enum mtouch_button_names));mcc_generated_files/mtouch/mtouch_button.
      +                          c: 513: {;mcc_generated_files/mtouch/mtouch_button.c: 514:     callback_notPressed = cal
      +                          lback;
 12605                           
 12606                           ;incstack = 0
 12607                           ; Regs used in _MTOUCH_Button_SetNotPressedCallback: [wreg]
 12608  16DB  0872               	movf	MTOUCH_Button_SetNotPressedCallback@callback+1,w
 12609  16DC  0020               	movlb	0	; select bank0
 12610  16DD  00ED               	movwf	_callback_notPressed+1
 12611  16DE  0871               	movf	MTOUCH_Button_SetNotPressedCallback@callback,w
 12612  16DF  00EC               	movwf	_callback_notPressed
 12613  16E0  0008               	return
 12614  16E1                     __end_of_MTOUCH_Button_SetNotPressedCallback:	
 12615                           
 12616                           	psect	text85
 12617  16B1                     __ptext85:	
 12618 ;; *************** function _EUSART_is_rx_ready *****************
 12619 ;; Defined at:
 12620 ;;		line 134 in file "mcc_generated_files/eusart.c"
 12621 ;; Parameters:    Size  Location     Type
 12622 ;;		None
 12623 ;; Auto vars:     Size  Location     Type
 12624 ;;		None
 12625 ;; Return value:  Size  Location     Type
 12626 ;;                  1    wreg      unsigned char 
 12627 ;; Registers used:
 12628 ;;		wreg
 12629 ;; Tracked objects:
 12630 ;;		On entry : 0/0
 12631 ;;		On exit  : 0/0
 12632 ;;		Unchanged: 0/0
 12633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12634 ;;      Params:         0       0       0       0       0       0       0       0
 12635 ;;      Locals:         0       0       0       0       0       0       0       0
 12636 ;;      Temps:          0       0       0       0       0       0       0       0
 12637 ;;      Totals:         0       0       0       0       0       0       0       0
 12638 ;;Total ram usage:        0 bytes
 12639 ;; Hardware stack levels used:    1
 12640 ;; Hardware stack levels required when called:    4
 12641 ;; This function calls:
 12642 ;;		Nothing
 12643 ;; This function is called by:
 12644 ;;		_main
 12645 ;; This function uses a non-reentrant model
 12646 ;;
 12647                           
 12648                           
 12649                           ;psect for function _EUSART_is_rx_ready
 12650  16B1                     _EUSART_is_rx_ready:	
 12651                           
 12652                           ;mcc_generated_files/eusart.c: 136:     return eusartRxCount;
 12653                           
 12654                           ;incstack = 0
 12655                           ; Regs used in _EUSART_is_rx_ready: [wreg]
 12656  16B1  0020               	movlb	0	; select bank0
 12657  16B2  0865               	movf	_eusartRxCount,w	;volatile
 12658  16B3  0008               	return
 12659  16B4                     __end_of_EUSART_is_rx_ready:	
 12660                           
 12661                           	psect	text86
 12662  0A4C                     __ptext86:	
 12663 ;; *************** function _EUSART_Read *****************
 12664 ;; Defined at:
 12665 ;;		line 148 in file "mcc_generated_files/eusart.c"
 12666 ;; Parameters:    Size  Location     Type
 12667 ;;		None
 12668 ;; Auto vars:     Size  Location     Type
 12669 ;;  readValue       1    2[COMMON] unsigned char 
 12670 ;; Return value:  Size  Location     Type
 12671 ;;                  1    wreg      unsigned char 
 12672 ;; Registers used:
 12673 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12674 ;; Tracked objects:
 12675 ;;		On entry : 0/0
 12676 ;;		On exit  : 0/0
 12677 ;;		Unchanged: 0/0
 12678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12679 ;;      Params:         0       0       0       0       0       0       0       0
 12680 ;;      Locals:         1       0       0       0       0       0       0       0
 12681 ;;      Temps:          1       0       0       0       0       0       0       0
 12682 ;;      Totals:         2       0       0       0       0       0       0       0
 12683 ;;Total ram usage:        2 bytes
 12684 ;; Hardware stack levels used:    1
 12685 ;; Hardware stack levels required when called:    4
 12686 ;; This function calls:
 12687 ;;		Nothing
 12688 ;; This function is called by:
 12689 ;;		_main
 12690 ;;		_getch
 12691 ;; This function uses a non-reentrant model
 12692 ;;
 12693                           
 12694                           
 12695                           ;psect for function _EUSART_Read
 12696  0A4C                     _EUSART_Read:	
 12697  0A4C                     l4604:	
 12698                           ;mcc_generated_files/eusart.c: 152:     while(0 == eusartRxCount)
 12699                           
 12700                           ;incstack = 0
 12701                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
 12702                           
 12703                           
 12704                           ;mcc_generated_files/eusart.c: 152:     while(0 == eusartRxCount)
 12705  0A4C  0020               	movlb	0	; select bank0
 12706  0A4D  0865               	movf	_eusartRxCount,w	;volatile
 12707  0A4E  1903               	btfsc	3,2
 12708  0A4F  2A4C               	goto	l4604
 12709                           
 12710                           ;mcc_generated_files/eusart.c: 156:     eusartRxLastError = eusartRxStatusBuffer[eusartR
      +                          xTail];
 12711  0A50  0866               	movf	_eusartRxTail,w	;volatile
 12712  0A51  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 12713  0A52  0086               	movwf	6
 12714  0A53  0187               	clrf	7
 12715  0A54  0801               	movf	1,w
 12716  0A55  00F1               	movwf	??_EUSART_Read
 12717  0A56  0871               	movf	??_EUSART_Read,w
 12718  0A57  00E4               	movwf	_eusartRxLastError	;volatile
 12719                           
 12720                           ;mcc_generated_files/eusart.c: 158:     readValue = eusartRxBuffer[eusartRxTail++];
 12721  0A58  0866               	movf	_eusartRxTail,w
 12722  0A59  3EA8               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 12723  0A5A  0086               	movwf	6
 12724  0A5B  0187               	clrf	7
 12725  0A5C  0801               	movf	1,w
 12726  0A5D  00F1               	movwf	??_EUSART_Read
 12727  0A5E  0871               	movf	??_EUSART_Read,w
 12728  0A5F  00F2               	movwf	EUSART_Read@readValue
 12729  0A60  3001               	movlw	1
 12730  0A61  00F1               	movwf	??_EUSART_Read
 12731  0A62  0871               	movf	??_EUSART_Read,w
 12732  0A63  07E6               	addwf	_eusartRxTail,f	;volatile
 12733                           
 12734                           ;mcc_generated_files/eusart.c: 159:     if(sizeof(eusartRxBuffer) <= eusartRxTail)
 12735  0A64  3008               	movlw	8
 12736  0A65  0266               	subwf	_eusartRxTail,w	;volatile
 12737  0A66  1803               	btfsc	3,0
 12738                           
 12739                           ;mcc_generated_files/eusart.c: 160:     {;mcc_generated_files/eusart.c: 161:         eus
      +                          artRxTail = 0;
 12740  0A67  01E6               	clrf	_eusartRxTail	;volatile
 12741                           
 12742                           ;mcc_generated_files/eusart.c: 163:     PIE1bits.RCIE = 0;
 12743  0A68  0021               	movlb	1	; select bank1
 12744  0A69  1291               	bcf	17,5	;volatile
 12745                           
 12746                           ;mcc_generated_files/eusart.c: 164:     eusartRxCount--;
 12747  0A6A  3001               	movlw	1
 12748  0A6B  0020               	movlb	0	; select bank0
 12749  0A6C  02E5               	subwf	_eusartRxCount,f	;volatile
 12750                           
 12751                           ;mcc_generated_files/eusart.c: 165:     PIE1bits.RCIE = 1;
 12752  0A6D  0021               	movlb	1	; select bank1
 12753  0A6E  1691               	bsf	17,5	;volatile
 12754                           
 12755                           ;mcc_generated_files/eusart.c: 167:     return readValue;
 12756  0A6F  0872               	movf	EUSART_Read@readValue,w
 12757  0A70  0008               	return
 12758  0A71                     __end_of_EUSART_Read:	
 12759                           
 12760                           	psect	text87
 12761  0C8C                     __ptext87:	
 12762 ;; *************** function _DATA_PROCESS *****************
 12763 ;; Defined at:
 12764 ;;		line 211 in file "main.c"
 12765 ;; Parameters:    Size  Location     Type
 12766 ;;  x               1    wreg     unsigned char 
 12767 ;; Auto vars:     Size  Location     Type
 12768 ;;  x               1    6[COMMON] unsigned char 
 12769 ;; Return value:  Size  Location     Type
 12770 ;;                  1    wreg      void 
 12771 ;; Registers used:
 12772 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12773 ;; Tracked objects:
 12774 ;;		On entry : 0/0
 12775 ;;		On exit  : 0/0
 12776 ;;		Unchanged: 0/0
 12777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12778 ;;      Params:         0       0       0       0       0       0       0       0
 12779 ;;      Locals:         1       0       0       0       0       0       0       0
 12780 ;;      Temps:          2       0       0       0       0       0       0       0
 12781 ;;      Totals:         3       0       0       0       0       0       0       0
 12782 ;;Total ram usage:        3 bytes
 12783 ;; Hardware stack levels used:    1
 12784 ;; Hardware stack levels required when called:    6
 12785 ;; This function calls:
 12786 ;;		_LED_PROCESS
 12787 ;;		_RELAY_PROCESS
 12788 ;; This function is called by:
 12789 ;;		_main
 12790 ;; This function uses a non-reentrant model
 12791 ;;
 12792                           
 12793                           
 12794                           ;psect for function _DATA_PROCESS
 12795  0C8C                     _DATA_PROCESS:	
 12796                           
 12797                           ;incstack = 0
 12798                           ; Regs used in _DATA_PROCESS: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12799                           ;DATA_PROCESS@x stored from wreg
 12800  0C8C  00F6               	movwf	DATA_PROCESS@x
 12801                           
 12802                           ;main.c: 211: void DATA_PROCESS(char x);main.c: 212: {;main.c: 213:     timeout_count = 
      +                          0;
 12803  0C8D  3000               	movlw	0
 12804  0C8E  0021               	movlb	1	; select bank1
 12805  0C8F  00BB               	movwf	(_timeout_count+3)^(0+128)
 12806  0C90  3000               	movlw	0
 12807  0C91  00BA               	movwf	(_timeout_count+2)^(0+128)
 12808  0C92  3000               	movlw	0
 12809  0C93  00B9               	movwf	(_timeout_count+1)^(0+128)
 12810  0C94  3000               	movlw	0
 12811  0C95  00B8               	movwf	_timeout_count^(0+128)
 12812                           
 12813                           ;main.c: 214:     switch(x)
 12814  0C96  2CB9               	goto	l4750
 12815  0C97                     l4730:	
 12816                           
 12817                           ;main.c: 217:         {;main.c: 218:             LED_PROCESS(0);
 12818  0C97  3000               	movlw	0
 12819  0C98  3189  210B  318C   	fcall	_LED_PROCESS
 12820                           
 12821                           ;main.c: 219:             RELAY_PROCESS(0);
 12822  0C9B  3000               	movlw	0
 12823  0C9C  3189  2124         	fcall	_RELAY_PROCESS
 12824                           
 12825                           ;main.c: 220:             check_request = 0;
 12826  0C9E  0020               	movlb	0	; select bank0
 12827  0C9F  01E0               	clrf	_check_request
 12828                           
 12829                           ;main.c: 221:             last_touch_status.full_status = 0;
 12830  0CA0  01D9               	clrf	_last_touch_status
 12831  0CA1  01DA               	clrf	_last_touch_status+1
 12832                           
 12833                           ;main.c: 222:             break;
 12834  0CA2  0008               	return
 12835  0CA3                     l4736:	
 12836                           
 12837                           ;main.c: 225:         {;main.c: 226:             LED_PROCESS(1);
 12838  0CA3  3001               	movlw	1
 12839  0CA4  3189  210B  318C   	fcall	_LED_PROCESS
 12840                           
 12841                           ;main.c: 227:             RELAY_PROCESS(1);
 12842  0CA7  3001               	movlw	1
 12843  0CA8  3189  2124         	fcall	_RELAY_PROCESS
 12844                           
 12845                           ;main.c: 228:             check_request = 0;
 12846  0CAA  0020               	movlb	0	; select bank0
 12847  0CAB  01E0               	clrf	_check_request
 12848                           
 12849                           ;main.c: 229:             last_touch_status.full_status = 1;
 12850  0CAC  3001               	movlw	1
 12851  0CAD  00D9               	movwf	_last_touch_status
 12852  0CAE  3000               	movlw	0
 12853  0CAF  00DA               	movwf	_last_touch_status+1
 12854                           
 12855                           ;main.c: 230:             break;
 12856  0CB0  0008               	return
 12857  0CB1                     l4742:	
 12858                           
 12859                           ;main.c: 233:         {;main.c: 234:             check_request = 0;
 12860  0CB1  0020               	movlb	0	; select bank0
 12861  0CB2  01E0               	clrf	_check_request
 12862                           
 12863                           ;main.c: 235:             update_state_flag = 1;
 12864  0CB3  01DD               	clrf	_update_state_flag
 12865  0CB4  0ADD               	incf	_update_state_flag,f
 12866                           
 12867                           ;main.c: 236:             break;
 12868  0CB5  0008               	return
 12869  0CB6                     l4746:	
 12870                           
 12871                           ;main.c: 239:         {;main.c: 240:             check_request = 0;
 12872  0CB6  0020               	movlb	0	; select bank0
 12873  0CB7  01E0               	clrf	_check_request
 12874                           
 12875                           ;main.c: 241:             break;
 12876  0CB8  0008               	return
 12877  0CB9                     l4750:	
 12878  0CB9  0876               	movf	DATA_PROCESS@x,w
 12879  0CBA  00F4               	movwf	??_DATA_PROCESS
 12880  0CBB  01F5               	clrf	??_DATA_PROCESS+1
 12881                           
 12882                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12883                           ; Switch size 1, requested type "simple"
 12884                           ; Number of cases is 1, Range of values is 0 to 0
 12885                           ; switch strategies available:
 12886                           ; Name         Instructions Cycles
 12887                           ; simple_byte            4     3 (average)
 12888                           ; direct_byte            8     6 (fixed)
 12889                           ; jumptable            260     6 (fixed)
 12890                           ;	Chosen strategy is simple_byte
 12891  0CBC  0875               	movf	??_DATA_PROCESS+1,w
 12892  0CBD  3A00               	xorlw	0	; case 0
 12893  0CBE  1903               	skipnz
 12894  0CBF  2CC1               	goto	l6436
 12895  0CC0  2CB6               	goto	l4746
 12896  0CC1                     l6436:	
 12897                           
 12898                           ; Switch size 1, requested type "simple"
 12899                           ; Number of cases is 3, Range of values is 48 to 85
 12900                           ; switch strategies available:
 12901                           ; Name         Instructions Cycles
 12902                           ; simple_byte           10     6 (average)
 12903                           ; direct_byte           85     9 (fixed)
 12904                           ; jumptable            263     9 (fixed)
 12905                           ;	Chosen strategy is simple_byte
 12906  0CC1  0874               	movf	??_DATA_PROCESS,w
 12907  0CC2  3A30               	xorlw	48	; case 48
 12908  0CC3  1903               	skipnz
 12909  0CC4  2C97               	goto	l4730
 12910  0CC5  3A01               	xorlw	1	; case 49
 12911  0CC6  1903               	skipnz
 12912  0CC7  2CA3               	goto	l4736
 12913  0CC8  3A64               	xorlw	100	; case 85
 12914  0CC9  1903               	skipnz
 12915  0CCA  2CB1               	goto	l4742
 12916  0CCB  2CB6               	goto	l4746
 12917  0CCC  0008               	return
 12918  0CCD                     __end_of_DATA_PROCESS:	
 12919                           
 12920                           	psect	text88
 12921  0924                     __ptext88:	
 12922 ;; *************** function _RELAY_PROCESS *****************
 12923 ;; Defined at:
 12924 ;;		line 5 in file "relay.c"
 12925 ;; Parameters:    Size  Location     Type
 12926 ;;  x               1    wreg     unsigned char 
 12927 ;; Auto vars:     Size  Location     Type
 12928 ;;  x               1    3[COMMON] unsigned char 
 12929 ;; Return value:  Size  Location     Type
 12930 ;;                  1    wreg      void 
 12931 ;; Registers used:
 12932 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12933 ;; Tracked objects:
 12934 ;;		On entry : 0/0
 12935 ;;		On exit  : 0/0
 12936 ;;		Unchanged: 0/0
 12937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12938 ;;      Params:         0       0       0       0       0       0       0       0
 12939 ;;      Locals:         1       0       0       0       0       0       0       0
 12940 ;;      Temps:          2       0       0       0       0       0       0       0
 12941 ;;      Totals:         3       0       0       0       0       0       0       0
 12942 ;;Total ram usage:        3 bytes
 12943 ;; Hardware stack levels used:    1
 12944 ;; Hardware stack levels required when called:    4
 12945 ;; This function calls:
 12946 ;;		Nothing
 12947 ;; This function is called by:
 12948 ;;		_main
 12949 ;;		_myButtonPressedCallback
 12950 ;;		_DATA_PROCESS
 12951 ;; This function uses a non-reentrant model
 12952 ;;
 12953                           
 12954                           
 12955                           ;psect for function _RELAY_PROCESS
 12956  0924                     _RELAY_PROCESS:	
 12957                           
 12958                           ;incstack = 0
 12959                           ; Regs used in _RELAY_PROCESS: [wreg-fsr0h+status,2+status,0]
 12960                           ;RELAY_PROCESS@x stored from wreg
 12961  0924  00F3               	movwf	RELAY_PROCESS@x
 12962                           
 12963                           ;relay.c: 5: void RELAY_PROCESS(uint8_t x);relay.c: 6: {;relay.c: 7:     switch(x)
 12964  0925  292C               	goto	l3948
 12965  0926                     l1099:	
 12966                           ;relay.c: 10:         {;relay.c: 11:             do { LATAbits.LATA5 = 1; } while(0);
 12967                           
 12968  0926  0022               	movlb	2	; select bank2
 12969  0927  168C               	bsf	12,5	;volatile
 12970  0928  0008               	return
 12971  0929                     l1103:	
 12972                           ;relay.c: 15:         {;relay.c: 16:             do { LATAbits.LATA5 = 0; } while(0);
 12973                           
 12974  0929  0022               	movlb	2	; select bank2
 12975  092A  128C               	bcf	12,5	;volatile
 12976  092B  0008               	return
 12977  092C                     l3948:	
 12978  092C  0873               	movf	RELAY_PROCESS@x,w
 12979  092D  00F1               	movwf	??_RELAY_PROCESS
 12980  092E  01F2               	clrf	??_RELAY_PROCESS+1
 12981                           
 12982                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12983                           ; Switch size 1, requested type "simple"
 12984                           ; Number of cases is 1, Range of values is 0 to 0
 12985                           ; switch strategies available:
 12986                           ; Name         Instructions Cycles
 12987                           ; simple_byte            4     3 (average)
 12988                           ; direct_byte            8     6 (fixed)
 12989                           ; jumptable            260     6 (fixed)
 12990                           ;	Chosen strategy is simple_byte
 12991  092F  0872               	movf	??_RELAY_PROCESS+1,w
 12992  0930  3A00               	xorlw	0	; case 0
 12993  0931  1903               	skipnz
 12994  0932  2934               	goto	l6438
 12995  0933  293C               	goto	l1105
 12996  0934                     l6438:	
 12997                           
 12998                           ; Switch size 1, requested type "simple"
 12999                           ; Number of cases is 2, Range of values is 0 to 1
 13000                           ; switch strategies available:
 13001                           ; Name         Instructions Cycles
 13002                           ; simple_byte            7     4 (average)
 13003                           ; direct_byte           10     6 (fixed)
 13004                           ; jumptable            260     6 (fixed)
 13005                           ;	Chosen strategy is simple_byte
 13006  0934  0871               	movf	??_RELAY_PROCESS,w
 13007  0935  3A00               	xorlw	0	; case 0
 13008  0936  1903               	skipnz
 13009  0937  2926               	goto	l1099
 13010  0938  3A01               	xorlw	1	; case 1
 13011  0939  1903               	skipnz
 13012  093A  2929               	goto	l1103
 13013  093B  293C               	goto	l1105
 13014  093C                     l1105:	
 13015  093C  0008               	return
 13016  093D                     __end_of_RELAY_PROCESS:	
 13017                           
 13018                           	psect	text89
 13019  090B                     __ptext89:	
 13020 ;; *************** function _LED_PROCESS *****************
 13021 ;; Defined at:
 13022 ;;		line 22 in file "led.c"
 13023 ;; Parameters:    Size  Location     Type
 13024 ;;  x               1    wreg     unsigned char 
 13025 ;; Auto vars:     Size  Location     Type
 13026 ;;  x               1    3[COMMON] unsigned char 
 13027 ;; Return value:  Size  Location     Type
 13028 ;;                  1    wreg      void 
 13029 ;; Registers used:
 13030 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13031 ;; Tracked objects:
 13032 ;;		On entry : 0/0
 13033 ;;		On exit  : 0/0
 13034 ;;		Unchanged: 0/0
 13035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13036 ;;      Params:         0       0       0       0       0       0       0       0
 13037 ;;      Locals:         1       0       0       0       0       0       0       0
 13038 ;;      Temps:          2       0       0       0       0       0       0       0
 13039 ;;      Totals:         3       0       0       0       0       0       0       0
 13040 ;;Total ram usage:        3 bytes
 13041 ;; Hardware stack levels used:    1
 13042 ;; Hardware stack levels required when called:    5
 13043 ;; This function calls:
 13044 ;;		_LED_1_SetHigh
 13045 ;;		_LED_1_SetLow
 13046 ;; This function is called by:
 13047 ;;		_main
 13048 ;;		_myButtonPressedCallback
 13049 ;;		_DATA_PROCESS
 13050 ;; This function uses a non-reentrant model
 13051 ;;
 13052                           
 13053                           
 13054                           ;psect for function _LED_PROCESS
 13055  090B                     _LED_PROCESS:	
 13056                           
 13057                           ;incstack = 0
 13058                           ; Regs used in _LED_PROCESS: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13059                           ;LED_PROCESS@x stored from wreg
 13060  090B  00F3               	movwf	LED_PROCESS@x
 13061                           
 13062                           ;led.c: 22: void LED_PROCESS(uint8_t x);led.c: 23: {;led.c: 24:     switch(x)
 13063  090C  2913               	goto	l3938
 13064  090D                     l3932:	
 13065                           
 13066                           ;led.c: 27:         {;led.c: 28:             LED_1_SetHigh();
 13067  090D  3196  26C1         	fcall	_LED_1_SetHigh
 13068                           
 13069                           ;led.c: 29:             break;
 13070  090F  0008               	return
 13071  0910                     l3934:	
 13072                           
 13073                           ;led.c: 32:         {;led.c: 33:             LED_1_SetLow();
 13074  0910  3196  26C5         	fcall	_LED_1_SetLow
 13075                           
 13076                           ;led.c: 34:             break;
 13077  0912  0008               	return
 13078  0913                     l3938:	
 13079  0913  0873               	movf	LED_PROCESS@x,w
 13080  0914  00F1               	movwf	??_LED_PROCESS
 13081  0915  01F2               	clrf	??_LED_PROCESS+1
 13082                           
 13083                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13084                           ; Switch size 1, requested type "simple"
 13085                           ; Number of cases is 1, Range of values is 0 to 0
 13086                           ; switch strategies available:
 13087                           ; Name         Instructions Cycles
 13088                           ; simple_byte            4     3 (average)
 13089                           ; direct_byte            8     6 (fixed)
 13090                           ; jumptable            260     6 (fixed)
 13091                           ;	Chosen strategy is simple_byte
 13092  0916  0872               	movf	??_LED_PROCESS+1,w
 13093  0917  3A00               	xorlw	0	; case 0
 13094  0918  1903               	skipnz
 13095  0919  291B               	goto	l6440
 13096  091A  2923               	goto	l1092
 13097  091B                     l6440:	
 13098                           
 13099                           ; Switch size 1, requested type "simple"
 13100                           ; Number of cases is 2, Range of values is 0 to 1
 13101                           ; switch strategies available:
 13102                           ; Name         Instructions Cycles
 13103                           ; simple_byte            7     4 (average)
 13104                           ; direct_byte           10     6 (fixed)
 13105                           ; jumptable            260     6 (fixed)
 13106                           ;	Chosen strategy is simple_byte
 13107  091B  0871               	movf	??_LED_PROCESS,w
 13108  091C  3A00               	xorlw	0	; case 0
 13109  091D  1903               	skipnz
 13110  091E  290D               	goto	l3932
 13111  091F  3A01               	xorlw	1	; case 1
 13112  0920  1903               	skipnz
 13113  0921  2910               	goto	l3934
 13114  0922  2923               	goto	l1092
 13115  0923                     l1092:	
 13116  0923  0008               	return
 13117  0924                     __end_of_LED_PROCESS:	
 13118                           
 13119                           	psect	text90
 13120  16C5                     __ptext90:	
 13121 ;; *************** function _LED_1_SetLow *****************
 13122 ;; Defined at:
 13123 ;;		line 17 in file "led.c"
 13124 ;; Parameters:    Size  Location     Type
 13125 ;;		None
 13126 ;; Auto vars:     Size  Location     Type
 13127 ;;		None
 13128 ;; Return value:  Size  Location     Type
 13129 ;;                  1    wreg      void 
 13130 ;; Registers used:
 13131 ;;		None
 13132 ;; Tracked objects:
 13133 ;;		On entry : 0/0
 13134 ;;		On exit  : 0/0
 13135 ;;		Unchanged: 0/0
 13136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13137 ;;      Params:         0       0       0       0       0       0       0       0
 13138 ;;      Locals:         0       0       0       0       0       0       0       0
 13139 ;;      Temps:          0       0       0       0       0       0       0       0
 13140 ;;      Totals:         0       0       0       0       0       0       0       0
 13141 ;;Total ram usage:        0 bytes
 13142 ;; Hardware stack levels used:    1
 13143 ;; Hardware stack levels required when called:    4
 13144 ;; This function calls:
 13145 ;;		Nothing
 13146 ;; This function is called by:
 13147 ;;		_LED_PROCESS
 13148 ;; This function uses a non-reentrant model
 13149 ;;
 13150                           
 13151                           
 13152                           ;psect for function _LED_1_SetLow
 13153  16C5                     _LED_1_SetLow:	
 13154                           
 13155                           ;incstack = 0
 13156                           ; Regs used in _LED_1_SetLow: []
 13157                           ;led.c: 19:     do { LATCbits.LATC7 = 1; } while(0);
 13158  16C5  0022               	movlb	2	; select bank2
 13159  16C6  178E               	bsf	14,7	;volatile
 13160                           
 13161                           ;led.c: 20:     do { LATCbits.LATC5 = 0; } while(0);
 13162  16C7  128E               	bcf	14,5	;volatile
 13163  16C8  0008               	return
 13164  16C9                     __end_of_LED_1_SetLow:	
 13165                           
 13166                           	psect	text91
 13167  16C1                     __ptext91:	
 13168 ;; *************** function _LED_1_SetHigh *****************
 13169 ;; Defined at:
 13170 ;;		line 12 in file "led.c"
 13171 ;; Parameters:    Size  Location     Type
 13172 ;;		None
 13173 ;; Auto vars:     Size  Location     Type
 13174 ;;		None
 13175 ;; Return value:  Size  Location     Type
 13176 ;;                  1    wreg      void 
 13177 ;; Registers used:
 13178 ;;		None
 13179 ;; Tracked objects:
 13180 ;;		On entry : 0/0
 13181 ;;		On exit  : 0/0
 13182 ;;		Unchanged: 0/0
 13183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13184 ;;      Params:         0       0       0       0       0       0       0       0
 13185 ;;      Locals:         0       0       0       0       0       0       0       0
 13186 ;;      Temps:          0       0       0       0       0       0       0       0
 13187 ;;      Totals:         0       0       0       0       0       0       0       0
 13188 ;;Total ram usage:        0 bytes
 13189 ;; Hardware stack levels used:    1
 13190 ;; Hardware stack levels required when called:    4
 13191 ;; This function calls:
 13192 ;;		Nothing
 13193 ;; This function is called by:
 13194 ;;		_LED_PROCESS
 13195 ;; This function uses a non-reentrant model
 13196 ;;
 13197                           
 13198                           
 13199                           ;psect for function _LED_1_SetHigh
 13200  16C1                     _LED_1_SetHigh:	
 13201                           
 13202                           ;incstack = 0
 13203                           ; Regs used in _LED_1_SetHigh: []
 13204                           ;led.c: 14:     do { LATCbits.LATC5 = 1; } while(0);
 13205  16C1  0022               	movlb	2	; select bank2
 13206  16C2  168E               	bsf	14,5	;volatile
 13207                           
 13208                           ;led.c: 15:     do { LATCbits.LATC7 = 0; } while(0);
 13209  16C3  138E               	bcf	14,7	;volatile
 13210  16C4  0008               	return
 13211  16C5                     __end_of_LED_1_SetHigh:	
 13212                           
 13213                           	psect	intentry
 13214  0004                     __pintentry:	
 13215 ;; *************** function _INTERRUPT_InterruptManager *****************
 13216 ;; Defined at:
 13217 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 13218 ;; Parameters:    Size  Location     Type
 13219 ;;		None
 13220 ;; Auto vars:     Size  Location     Type
 13221 ;;		None
 13222 ;; Return value:  Size  Location     Type
 13223 ;;                  1    wreg      void 
 13224 ;; Registers used:
 13225 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13226 ;; Tracked objects:
 13227 ;;		On entry : 0/0
 13228 ;;		On exit  : 0/0
 13229 ;;		Unchanged: 0/0
 13230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13231 ;;      Params:         0       0       0       0       0       0       0       0
 13232 ;;      Locals:         0       0       0       0       0       0       0       0
 13233 ;;      Temps:          0       0       0       0       0       0       0       0
 13234 ;;      Totals:         0       0       0       0       0       0       0       0
 13235 ;;Total ram usage:        0 bytes
 13236 ;; Hardware stack levels used:    1
 13237 ;; Hardware stack levels required when called:    3
 13238 ;; This function calls:
 13239 ;;		Absolute function
 13240 ;;		_EUSART_Receive_ISR
 13241 ;;		_EUSART_Transmit_ISR
 13242 ;; This function is called by:
 13243 ;;		Interrupt level 1
 13244 ;; This function uses a non-reentrant model
 13245 ;;
 13246                           
 13247  0004                     _INTERRUPT_InterruptManager:	
 13248                           
 13249                           ;incstack = 0
 13250  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 13251                           
 13252                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 13253  0005  3180               	pagesel	$
 13254                           
 13255                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.PEIE == 1)
 13256  0006  1F0B               	btfss	11,6	;volatile
 13257  0007  2821               	goto	i1l843
 13258                           
 13259                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         if(PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1)
 13260  0008  0021               	movlb	1	; select bank1
 13261  0009  1E11               	btfss	17,4	;volatile
 13262  000A  2815               	goto	i1l838
 13263  000B  0020               	movlb	0	; select bank0
 13264  000C  1E11               	btfss	17,4	;volatile
 13265  000D  2815               	goto	i1l838
 13266                           
 13267                           ;mcc_generated_files/interrupt_manager.c: 58:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 59:             EUSART_TxDefaultInterruptHandler();
 13268  000E  0021               	movlb	1	; select bank1
 13269  000F  086E               	movf	(_EUSART_TxDefaultInterruptHandler+1)^(0+128),w
 13270  0010  008A               	movwf	10
 13271  0011  086D               	movf	_EUSART_TxDefaultInterruptHandler^(0+128),w
 13272  0012  000A               	callw
 13273  0013  3180               	pagesel	$
 13274                           
 13275                           ;mcc_generated_files/interrupt_manager.c: 60:         }
 13276  0014  2821               	goto	i1l843
 13277  0015                     i1l838:	
 13278                           ;mcc_generated_files/interrupt_manager.c: 61:         else if(PIE1bits.RCIE == 1 && PIR1
      +                          bits.RCIF == 1)
 13279                           
 13280  0015  0021               	movlb	1	; select bank1
 13281  0016  1E91               	btfss	17,5	;volatile
 13282  0017  2821               	goto	i1l843
 13283  0018  0020               	movlb	0	; select bank0
 13284  0019  1E91               	btfss	17,5	;volatile
 13285  001A  2821               	goto	i1l843
 13286                           
 13287                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             EUSART_RxDefaultInterruptHandler();
 13288  001B  0021               	movlb	1	; select bank1
 13289  001C  086C               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128),w
 13290  001D  008A               	movwf	10
 13291  001E  086B               	movf	_EUSART_RxDefaultInterruptHandler^(0+128),w
 13292  001F  000A               	callw
 13293  0020  3180               	pagesel	$
 13294  0021                     i1l843:	
 13295                           ;mcc_generated_files/interrupt_manager.c: 69:     }
 13296                           
 13297                           ;mcc_generated_files/interrupt_manager.c: 64:         }
 13298                           
 13299  0021  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 13300  0022  0009               	retfie
 13301  0023                     __end_of_INTERRUPT_InterruptManager:	
 13302                           
 13303                           	psect	text93
 13304  09AA                     __ptext93:	
 13305 ;; *************** function _EUSART_Transmit_ISR *****************
 13306 ;; Defined at:
 13307 ;;		line 203 in file "mcc_generated_files/eusart.c"
 13308 ;; Parameters:    Size  Location     Type
 13309 ;;		None
 13310 ;; Auto vars:     Size  Location     Type
 13311 ;;		None
 13312 ;; Return value:  Size  Location     Type
 13313 ;;                  1    wreg      void 
 13314 ;; Registers used:
 13315 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13316 ;; Tracked objects:
 13317 ;;		On entry : 0/0
 13318 ;;		On exit  : 0/0
 13319 ;;		Unchanged: 0/0
 13320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13321 ;;      Params:         0       0       0       0       0       0       0       0
 13322 ;;      Locals:         0       0       0       0       0       0       0       0
 13323 ;;      Temps:          1       0       0       0       0       0       0       0
 13324 ;;      Totals:         1       0       0       0       0       0       0       0
 13325 ;;Total ram usage:        1 bytes
 13326 ;; Hardware stack levels used:    1
 13327 ;; This function calls:
 13328 ;;		Nothing
 13329 ;; This function is called by:
 13330 ;;		_EUSART_Initialize
 13331 ;;		_INTERRUPT_InterruptManager
 13332 ;; This function uses a non-reentrant model
 13333 ;;
 13334                           
 13335                           
 13336                           ;psect for function _EUSART_Transmit_ISR
 13337  09AA                     _EUSART_Transmit_ISR:	
 13338                           
 13339                           ;mcc_generated_files/eusart.c: 207:     if(sizeof(eusartTxBuffer) > eusartTxBufferRemain
      +                          ing)
 13340                           
 13341                           ;incstack = 0
 13342                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 13343  09AA  3008               	movlw	8
 13344  09AB  0021               	movlb	1	; select bank1
 13345  09AC  026F               	subwf	_eusartTxBufferRemaining^(0+128),w	;volatile
 13346  09AD  1803               	skipnc
 13347  09AE  29C6               	goto	i1l752
 13348                           
 13349                           ;mcc_generated_files/eusart.c: 208:     {;mcc_generated_files/eusart.c: 209:         TXR
      +                          EG = eusartTxBuffer[eusartTxTail++];
 13350  09AF  0020               	movlb	0	; select bank0
 13351  09B0  0867               	movf	_eusartTxTail,w
 13352  09B1  3EB0               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
 13353  09B2  0086               	movwf	6
 13354  09B3  0187               	clrf	7
 13355  09B4  0801               	movf	1,w
 13356  09B5  0023               	movlb	3	; select bank3
 13357  09B6  009A               	movwf	26	;volatile
 13358  09B7  3001               	movlw	1
 13359  09B8  00F0               	movwf	??_EUSART_Transmit_ISR
 13360  09B9  0870               	movf	??_EUSART_Transmit_ISR,w
 13361  09BA  0020               	movlb	0	; select bank0
 13362  09BB  07E7               	addwf	_eusartTxTail,f	;volatile
 13363                           
 13364                           ;mcc_generated_files/eusart.c: 210:         if(sizeof(eusartTxBuffer) <= eusartTxTail)
 13365  09BC  3008               	movlw	8
 13366  09BD  0267               	subwf	_eusartTxTail,w	;volatile
 13367  09BE  1803               	btfsc	3,0
 13368                           
 13369                           ;mcc_generated_files/eusart.c: 211:         {;mcc_generated_files/eusart.c: 212:        
      +                               eusartTxTail = 0;
 13370  09BF  01E7               	clrf	_eusartTxTail	;volatile
 13371                           
 13372                           ;mcc_generated_files/eusart.c: 214:         eusartTxBufferRemaining++;
 13373  09C0  3001               	movlw	1
 13374  09C1  00F0               	movwf	??_EUSART_Transmit_ISR
 13375  09C2  0870               	movf	??_EUSART_Transmit_ISR,w
 13376  09C3  0021               	movlb	1	; select bank1
 13377  09C4  07EF               	addwf	_eusartTxBufferRemaining^(0+128),f	;volatile
 13378                           
 13379                           ;mcc_generated_files/eusart.c: 215:     }
 13380  09C5  0008               	return
 13381  09C6                     i1l752:	
 13382                           ;mcc_generated_files/eusart.c: 216:     else
 13383                           
 13384                           
 13385                           ;mcc_generated_files/eusart.c: 217:     {;mcc_generated_files/eusart.c: 218:         PIE
      +                          1bits.TXIE = 0;
 13386  09C6  1211               	bcf	17,4	;volatile
 13387  09C7  0008               	return
 13388  09C8                     __end_of_EUSART_Transmit_ISR:	
 13389                           
 13390                           	psect	text94
 13391  0BEE                     __ptext94:	
 13392 ;; *************** function _EUSART_Receive_ISR *****************
 13393 ;; Defined at:
 13394 ;;		line 222 in file "mcc_generated_files/eusart.c"
 13395 ;; Parameters:    Size  Location     Type
 13396 ;;		None
 13397 ;; Auto vars:     Size  Location     Type
 13398 ;;		None
 13399 ;; Return value:  Size  Location     Type
 13400 ;;                  1    wreg      void 
 13401 ;; Registers used:
 13402 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13403 ;; Tracked objects:
 13404 ;;		On entry : 0/0
 13405 ;;		On exit  : 0/0
 13406 ;;		Unchanged: 0/0
 13407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13408 ;;      Params:         0       0       0       0       0       0       0       0
 13409 ;;      Locals:         0       0       0       0       0       0       0       0
 13410 ;;      Temps:          0       0       0       0       0       0       0       0
 13411 ;;      Totals:         0       0       0       0       0       0       0       0
 13412 ;;Total ram usage:        0 bytes
 13413 ;; Hardware stack levels used:    1
 13414 ;; Hardware stack levels required when called:    2
 13415 ;; This function calls:
 13416 ;;		Absolute function
 13417 ;;		_EUSART_DefaultErrorHandler
 13418 ;;		_EUSART_DefaultFramingErrorHandler
 13419 ;;		_EUSART_DefaultOverrunErrorHandler
 13420 ;;		_EUSART_RxDataHandler
 13421 ;; This function is called by:
 13422 ;;		_EUSART_Initialize
 13423 ;;		_INTERRUPT_InterruptManager
 13424 ;; This function uses a non-reentrant model
 13425 ;;
 13426                           
 13427                           
 13428                           ;psect for function _EUSART_Receive_ISR
 13429  0BEE                     _EUSART_Receive_ISR:	
 13430                           
 13431                           ;mcc_generated_files/eusart.c: 225:     eusartRxStatusBuffer[eusartRxHead].status = 0;
 13432                           
 13433                           ;incstack = 0
 13434                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13435  0BEE  087C               	movf	_eusartRxHead,w	;volatile
 13436  0BEF  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 13437  0BF0  0086               	movwf	6
 13438  0BF1  0187               	clrf	7
 13439  0BF2  0181               	clrf	1
 13440                           
 13441                           ;mcc_generated_files/eusart.c: 227:     if(RCSTAbits.FERR){
 13442  0BF3  0023               	movlb	3	; select bank3
 13443  0BF4  1D1D               	btfss	29,2	;volatile
 13444  0BF5  2C01               	goto	i1l4644
 13445                           
 13446                           ;mcc_generated_files/eusart.c: 228:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
 13447  0BF6  087C               	movf	_eusartRxHead,w	;volatile
 13448  0BF7  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 13449  0BF8  0086               	movwf	6
 13450  0BF9  0187               	clrf	7
 13451  0BFA  1481               	bsf	1,1
 13452                           
 13453                           ;mcc_generated_files/eusart.c: 229:         EUSART_FramingErrorHandler();
 13454  0BFB  0021               	movlb	1	; select bank1
 13455  0BFC  086A               	movf	(_EUSART_FramingErrorHandler+1)^(0+128),w
 13456  0BFD  008A               	movwf	10
 13457  0BFE  0869               	movf	_EUSART_FramingErrorHandler^(0+128),w
 13458  0BFF  000A               	callw
 13459  0C00  318B               	pagesel	$
 13460  0C01                     i1l4644:	
 13461                           
 13462                           ;mcc_generated_files/eusart.c: 232:     if(RCSTAbits.OERR){
 13463  0C01  0023               	movlb	3	; select bank3
 13464  0C02  1C9D               	btfss	29,1	;volatile
 13465  0C03  2C0F               	goto	i1l4650
 13466                           
 13467                           ;mcc_generated_files/eusart.c: 233:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
 13468  0C04  087C               	movf	_eusartRxHead,w	;volatile
 13469  0C05  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 13470  0C06  0086               	movwf	6
 13471  0C07  0187               	clrf	7
 13472  0C08  1501               	bsf	1,2
 13473                           
 13474                           ;mcc_generated_files/eusart.c: 234:         EUSART_OverrunErrorHandler();
 13475  0C09  0021               	movlb	1	; select bank1
 13476  0C0A  0868               	movf	(_EUSART_OverrunErrorHandler+1)^(0+128),w
 13477  0C0B  008A               	movwf	10
 13478  0C0C  0867               	movf	_EUSART_OverrunErrorHandler^(0+128),w
 13479  0C0D  000A               	callw
 13480  0C0E  318B               	pagesel	$
 13481  0C0F                     i1l4650:	
 13482                           
 13483                           ;mcc_generated_files/eusart.c: 237:     if(eusartRxStatusBuffer[eusartRxHead].status){
 13484  0C0F  087C               	movf	_eusartRxHead,w	;volatile
 13485  0C10  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 13486  0C11  0086               	movwf	6
 13487  0C12  0187               	clrf	7
 13488  0C13  0801               	movf	1,w
 13489  0C14  1903               	btfsc	3,2
 13490  0C15  2C1D               	goto	i1l4654
 13491                           
 13492                           ;mcc_generated_files/eusart.c: 238:         EUSART_ErrorHandler();
 13493  0C16  0022               	movlb	2	; select bank2
 13494  0C17  0841               	movf	(_EUSART_ErrorHandler+1)^(0+256),w
 13495  0C18  008A               	movwf	10
 13496  0C19  0840               	movf	_EUSART_ErrorHandler^(0+256),w
 13497  0C1A  000A               	callw
 13498  0C1B  318B               	pagesel	$
 13499                           
 13500                           ;mcc_generated_files/eusart.c: 239:     } else {
 13501  0C1C  0008               	return
 13502  0C1D                     i1l4654:	
 13503                           
 13504                           ;mcc_generated_files/eusart.c: 240:         EUSART_RxDataHandler();
 13505  0C1D  3188  20C5         	fcall	_EUSART_RxDataHandler
 13506  0C1F  0008               	return
 13507  0C20                     __end_of_EUSART_Receive_ISR:	
 13508                           
 13509                           	psect	text95
 13510  16BD                     __ptext95:	
 13511 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
 13512 ;; Defined at:
 13513 ;;		line 258 in file "mcc_generated_files/eusart.c"
 13514 ;; Parameters:    Size  Location     Type
 13515 ;;		None
 13516 ;; Auto vars:     Size  Location     Type
 13517 ;;		None
 13518 ;; Return value:  Size  Location     Type
 13519 ;;                  1    wreg      void 
 13520 ;; Registers used:
 13521 ;;		None
 13522 ;; Tracked objects:
 13523 ;;		On entry : 0/0
 13524 ;;		On exit  : 0/0
 13525 ;;		Unchanged: 0/0
 13526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13527 ;;      Params:         0       0       0       0       0       0       0       0
 13528 ;;      Locals:         0       0       0       0       0       0       0       0
 13529 ;;      Temps:          0       0       0       0       0       0       0       0
 13530 ;;      Totals:         0       0       0       0       0       0       0       0
 13531 ;;Total ram usage:        0 bytes
 13532 ;; Hardware stack levels used:    1
 13533 ;; This function calls:
 13534 ;;		Nothing
 13535 ;; This function is called by:
 13536 ;;		_EUSART_Initialize
 13537 ;;		_EUSART_Receive_ISR
 13538 ;; This function uses a non-reentrant model
 13539 ;;
 13540                           
 13541                           
 13542                           ;psect for function _EUSART_DefaultOverrunErrorHandler
 13543  16BD                     _EUSART_DefaultOverrunErrorHandler:	
 13544                           
 13545                           ;mcc_generated_files/eusart.c: 261:     RCSTAbits.CREN = 0;
 13546                           
 13547                           ;incstack = 0
 13548                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
 13549  16BD  0023               	movlb	3	; select bank3
 13550  16BE  121D               	bcf	29,4	;volatile
 13551                           
 13552                           ;mcc_generated_files/eusart.c: 262:     RCSTAbits.CREN = 1;
 13553  16BF  161D               	bsf	29,4	;volatile
 13554  16C0  0008               	return
 13555  16C1                     __end_of_EUSART_DefaultOverrunErrorHandler:	
 13556                           
 13557                           	psect	text96
 13558  16AB                     __ptext96:	
 13559 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
 13560 ;; Defined at:
 13561 ;;		line 256 in file "mcc_generated_files/eusart.c"
 13562 ;; Parameters:    Size  Location     Type
 13563 ;;		None
 13564 ;; Auto vars:     Size  Location     Type
 13565 ;;		None
 13566 ;; Return value:  Size  Location     Type
 13567 ;;                  1    wreg      void 
 13568 ;; Registers used:
 13569 ;;		None
 13570 ;; Tracked objects:
 13571 ;;		On entry : 0/0
 13572 ;;		On exit  : 0/0
 13573 ;;		Unchanged: 0/0
 13574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13575 ;;      Params:         0       0       0       0       0       0       0       0
 13576 ;;      Locals:         0       0       0       0       0       0       0       0
 13577 ;;      Temps:          0       0       0       0       0       0       0       0
 13578 ;;      Totals:         0       0       0       0       0       0       0       0
 13579 ;;Total ram usage:        0 bytes
 13580 ;; Hardware stack levels used:    1
 13581 ;; This function calls:
 13582 ;;		Nothing
 13583 ;; This function is called by:
 13584 ;;		_EUSART_Initialize
 13585 ;;		_EUSART_Receive_ISR
 13586 ;; This function uses a non-reentrant model
 13587 ;;
 13588                           
 13589                           
 13590                           ;psect for function _EUSART_DefaultFramingErrorHandler
 13591  16AB                     _EUSART_DefaultFramingErrorHandler:	
 13592                           
 13593                           ;incstack = 0
 13594                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 13595  16AB  0008               	return
 13596  16AC                     __end_of_EUSART_DefaultFramingErrorHandler:	
 13597                           
 13598                           	psect	text97
 13599  16AE                     __ptext97:	
 13600 ;; *************** function _EUSART_DefaultErrorHandler *****************
 13601 ;; Defined at:
 13602 ;;		line 266 in file "mcc_generated_files/eusart.c"
 13603 ;; Parameters:    Size  Location     Type
 13604 ;;		None
 13605 ;; Auto vars:     Size  Location     Type
 13606 ;;		None
 13607 ;; Return value:  Size  Location     Type
 13608 ;;                  1    wreg      void 
 13609 ;; Registers used:
 13610 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13611 ;; Tracked objects:
 13612 ;;		On entry : 0/0
 13613 ;;		On exit  : 0/0
 13614 ;;		Unchanged: 0/0
 13615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13616 ;;      Params:         0       0       0       0       0       0       0       0
 13617 ;;      Locals:         0       0       0       0       0       0       0       0
 13618 ;;      Temps:          0       0       0       0       0       0       0       0
 13619 ;;      Totals:         0       0       0       0       0       0       0       0
 13620 ;;Total ram usage:        0 bytes
 13621 ;; Hardware stack levels used:    1
 13622 ;; Hardware stack levels required when called:    1
 13623 ;; This function calls:
 13624 ;;		_EUSART_RxDataHandler
 13625 ;; This function is called by:
 13626 ;;		_EUSART_Initialize
 13627 ;;		_EUSART_Receive_ISR
 13628 ;; This function uses a non-reentrant model
 13629 ;;
 13630                           
 13631                           
 13632                           ;psect for function _EUSART_DefaultErrorHandler
 13633  16AE                     _EUSART_DefaultErrorHandler:	
 13634                           
 13635                           ;mcc_generated_files/eusart.c: 267:     EUSART_RxDataHandler();
 13636                           
 13637                           ;incstack = 0
 13638                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 13639  16AE  3188  20C5         	fcall	_EUSART_RxDataHandler
 13640  16B0  0008               	return
 13641  16B1                     __end_of_EUSART_DefaultErrorHandler:	
 13642                           
 13643                           	psect	text98
 13644  08C5                     __ptext98:	
 13645 ;; *************** function _EUSART_RxDataHandler *****************
 13646 ;; Defined at:
 13647 ;;		line 246 in file "mcc_generated_files/eusart.c"
 13648 ;; Parameters:    Size  Location     Type
 13649 ;;		None
 13650 ;; Auto vars:     Size  Location     Type
 13651 ;;		None
 13652 ;; Return value:  Size  Location     Type
 13653 ;;                  1    wreg      void 
 13654 ;; Registers used:
 13655 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13656 ;; Tracked objects:
 13657 ;;		On entry : 0/0
 13658 ;;		On exit  : 0/0
 13659 ;;		Unchanged: 0/0
 13660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13661 ;;      Params:         0       0       0       0       0       0       0       0
 13662 ;;      Locals:         0       0       0       0       0       0       0       0
 13663 ;;      Temps:          1       0       0       0       0       0       0       0
 13664 ;;      Totals:         1       0       0       0       0       0       0       0
 13665 ;;Total ram usage:        1 bytes
 13666 ;; Hardware stack levels used:    1
 13667 ;; This function calls:
 13668 ;;		Nothing
 13669 ;; This function is called by:
 13670 ;;		_EUSART_Receive_ISR
 13671 ;;		_EUSART_DefaultErrorHandler
 13672 ;; This function uses a non-reentrant model
 13673 ;;
 13674                           
 13675                           
 13676                           ;psect for function _EUSART_RxDataHandler
 13677  08C5                     _EUSART_RxDataHandler:	
 13678                           
 13679                           ;mcc_generated_files/eusart.c: 248:     eusartRxBuffer[eusartRxHead++] = RCREG;
 13680                           
 13681                           ;incstack = 0
 13682                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 13683  08C5  0023               	movlb	3	; select bank3
 13684  08C6  0819               	movf	25,w	;volatile
 13685  08C7  00F0               	movwf	??_EUSART_RxDataHandler
 13686  08C8  087C               	movf	_eusartRxHead,w
 13687  08C9  3EA8               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 13688  08CA  0086               	movwf	6
 13689  08CB  0187               	clrf	7
 13690  08CC  0870               	movf	??_EUSART_RxDataHandler,w
 13691  08CD  0081               	movwf	1
 13692  08CE  3001               	movlw	1
 13693  08CF  00F0               	movwf	??_EUSART_RxDataHandler
 13694  08D0  0870               	movf	??_EUSART_RxDataHandler,w
 13695  08D1  07FC               	addwf	_eusartRxHead,f	;volatile
 13696                           
 13697                           ;mcc_generated_files/eusart.c: 249:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
 13698  08D2  3008               	movlw	8
 13699  08D3  027C               	subwf	_eusartRxHead,w	;volatile
 13700  08D4  1803               	btfsc	3,0
 13701                           
 13702                           ;mcc_generated_files/eusart.c: 250:     {;mcc_generated_files/eusart.c: 251:         eus
      +                          artRxHead = 0;
 13703  08D5  01FC               	clrf	_eusartRxHead	;volatile
 13704                           
 13705                           ;mcc_generated_files/eusart.c: 253:     eusartRxCount++;
 13706  08D6  3001               	movlw	1
 13707  08D7  00F0               	movwf	??_EUSART_RxDataHandler
 13708  08D8  0870               	movf	??_EUSART_RxDataHandler,w
 13709  08D9  0020               	movlb	0	; select bank0
 13710  08DA  07E5               	addwf	_eusartRxCount,f	;volatile
 13711  08DB  0008               	return
 13712  08DC                     __end_of_EUSART_RxDataHandler:	
 13713  007E                     btemp	set	126	;btemp
 13714  007E                     int$flags	set	126
 13715  007E                     wtemp0	set	126


Data Sizes:
    Strings     28
    Constant    23
    Data        22
    BSS         110
    Persistent  43
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     51      79
    BANK1            80      0      80
    BANK2            80      2      36
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    Button_Service$2541$0	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    Button_Service$2541	PTR FTN(PTR struct .,)void  size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    Button_StateMachine$0	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK2[32]), 

    strlen@a	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK2[32]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_5(CODE[3]), STR_4(CODE[5]), STR_3(CODE[5]), STR_2(CODE[6]), 
		 -> STR_1(CODE[9]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK2[32]), 

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S2227_IO_FILE$buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp.buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    memcpy@d1	PTR void  size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    memcpy@s1	PTR const void  size(2) Largest target is 16
		 -> mtouch_button_init(CODE[16]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 16
		 -> mtouch_button_init(CODE[16]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_5(CODE[3]), STR_4(CODE[5]), STR_3(CODE[5]), STR_2(CODE[6]), 
		 -> STR_1(CODE[9]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 9
		 -> STR_5(CODE[3]), STR_4(CODE[5]), STR_3(CODE[5]), STR_2(CODE[6]), 
		 -> STR_1(CODE[9]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    ctoa@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK2[32]), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_Transmit_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultFramingErrorHandler(), 

    MTOUCH_Button_SetNotPressedCallback@callback	PTR FTN(enum E3067,)void  size(2) Largest target is 1
		 -> myButtonReleasedCallback(), 

    MTOUCH_Button_SetPressedCallback@callback	PTR FTN(enum E3067,)void  size(2) Largest target is 1
		 -> myButtonPressedCallback(), 

    Button_Baseline_Update@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    Button_Baseline_Initialize@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    Button_Reading_Update_Helper@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    Button_Reading_Update@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    Button_Deviation_Update@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    Button_Tick_helper@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    Button_State_Pressed@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    Button_State_NotPressed@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    Button_State_Initializing@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    Button_Service@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    sp__memcpy	PTR void  size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    MTOUCH_Button_Initialize@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    Button_StateMachine	PTR FTN(PTR struct .,)void [3] size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    callback_notPressed	PTR FTN(enum E3067,)void  size(2) Largest target is 1
		 -> myButtonReleasedCallback(), Button_DefaultCallback(), 

    callback_pressed	PTR FTN(enum E3067,)void  size(2) Largest target is 1
		 -> myButtonPressedCallback(), Button_DefaultCallback(), 

    Sensor_setSampled@sensor	PTR struct . size(1) Largest target is 9
		 -> NULL(NULL[0]), mtouch_sensor(BANK1[9]), 

    Sensor_Sampled_Reset@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK1[9]), 

    MTOUCH_Sensor_Sampled_ResetAll@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK1[9]), 

    Sensor_isCalibratingAcqTime@sensor	PTR struct . size(1) Largest target is 9
		 -> NULL(NULL[0]), mtouch_sensor(BANK1[9]), 

    Sensor_setCalibratAcqTime@sensor	PTR struct . size(1) Largest target is 9
		 -> NULL(NULL[0]), mtouch_sensor(BANK1[9]), 

    Sensor_setCalibrated@sensor	PTR struct . size(1) Largest target is 9
		 -> NULL(NULL[0]), mtouch_sensor(BANK1[9]), 

    Sensor_isCalibrated@sensor	PTR struct . size(1) Largest target is 9
		 -> NULL(NULL[0]), mtouch_sensor(BANK1[9]), 

    Sensor_isActive@sensor	PTR struct . size(1) Largest target is 9
		 -> NULL(NULL[0]), mtouch_sensor(BANK1[9]), 

    Sensor_setInactive@sensor	PTR struct . size(1) Largest target is 9
		 -> NULL(NULL[0]), mtouch_sensor(BANK1[9]), 

    Sensor_setActive@sensor	PTR struct . size(1) Largest target is 9
		 -> NULL(NULL[0]), mtouch_sensor(BANK1[9]), 

    Sensor_isEnabled@sensor	PTR struct . size(1) Largest target is 9
		 -> NULL(NULL[0]), mtouch_sensor(BANK1[9]), 

    Sensor_RawSample_Update@sensor	PTR struct . size(1) Largest target is 9
		 -> NULL(NULL[0]), mtouch_sensor(BANK1[9]), 

    Sensor_Scanfrequency_Evaluation@sensor_adc2	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK1[9]), 

    Sensor_Scanfrequency_Evaluation@sensor_adc1	PTR struct . size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sensor_autoCalibration@sensor	PTR struct . size(1) Largest target is 9
		 -> NULL(NULL[0]), mtouch_sensor(BANK1[9]), 

    Sensor_Acq_ExecutePacket@sensor_adc2	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK1[9]), 

    Sensor_Acq_ExecutePacket@sensor_adc1	PTR struct . size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sensor_loadADCSettings@sensor	PTR struct . size(1) Largest target is 9
		 -> NULL(NULL[0]), mtouch_sensor(BANK1[9]), 

    Sensor_postAcquisitionProcess@sensor	PTR struct . size(1) Largest target is 9
		 -> NULL(NULL[0]), mtouch_sensor(BANK1[9]), 

    Sensor_Acquisition@sensor_adc2	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK1[9]), 

    Sensor_Acquisition@sensor_adc1	PTR struct . size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sensor_getScanGroupIndex@sensor	PTR struct . size(1) Largest target is 9
		 -> NULL(NULL[0]), mtouch_sensor(BANK1[9]), 

    Sensor_Service@sensor_adc2	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK1[9]), 

    Sensor_Service@sensor_adc1	PTR struct . size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S109$sensor_adc2	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK1[9]), 

    sensor_scan_group.sensor_adc2	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK1[9]), 

    S109$sensor_adc1	PTR struct . size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    sensor_scan_group.sensor_adc1	PTR struct . size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    callback_sampled	PTR FTN(enum E2854,)void  size(2) Largest target is 1
		 -> Sensor_DefaultCallback(), 


Critical Paths under _main in COMMON

    _vfpfcnvrt->_fputc
    _pad->_fputc
    _fputs->_fputc
    _fputc->_putch
    _putch->_EUSART_Write
    _MTOUCH_Initialize->_MTOUCH_Button_InitializeAll
    _MTOUCH_Sensor_InitializeAll->_MTOUCH_Sensor_Initialize
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Calibrate
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Enable
    _MTOUCH_Sensor_Enable->___bmul
    _MTOUCH_Button_InitializeAll->_MTOUCH_Button_Initialize
    _MTOUCH_Button_InitializeAll->_memcpy
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _MTOUCH_Button_Tick->_Button_Tick_helper
    _MTOUCH_Sensor_Sampled_ResetAll->_Sensor_Sampled_Reset
    _Sensor_RawSample_Update->_Sensor_getScanGroupIndex
    _Sensor_Acquisition->_Sensor_Acq_ExecutePacket
    _Sensor_postAcquisitionProcess->_Sensor_getScanGroupIndex
    _Sensor_postAcquisitionProcess->_abs
    _Sensor_Scanfrequency_Evaluation->_Sensor_Acq_ExecutePacket
    _Sensor_Acq_ExecutePacket->_Sensor_autoCalibration
    _Sensor_loadADCSettings->_Sensor_isCalibrated
    _Sensor_loadADCSettings->_Sensor_isCalibratingAcqTime
    _Sensor_autoCalibration->_Sensor_getScanGroupIndex
    _Sensor_autoCalibration->_abs
    _MTOUCH_Sensor_wasSampled->___bmul
    _MTOUCH_Sensor_isCalibrated->___bmul
    _Button_State_Pressed->_MTOUCH_Button_Initialize
    _Button_State_NotPressed->_MTOUCH_Button_Initialize
    _myButtonPressedCallback->_LED_PROCESS
    _myButtonPressedCallback->_RELAY_PROCESS
    _MTOUCH_Button_Initialize->_MTOUCH_Sensor_Calibrate
    _MTOUCH_Sensor_Calibrate->___bmul
    _Button_Baseline_Initialize->_MTOUCH_Sensor_RawSample_Get
    _Button_Reading_Update->_Button_Reading_Update_Helper
    _Button_Reading_Update_Helper->_MTOUCH_Sensor_RawSample_Get
    _MTOUCH_Sensor_RawSample_Get->___bmul
    _DATA_PROCESS->_LED_PROCESS
    _DATA_PROCESS->_RELAY_PROCESS

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_EUSART_Transmit_ISR
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    _main->_check_message
    _update_state->_printf
    _check_message->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_ctoa
    _ctoa->_pad
    _pad->_fputs
    _MTOUCH_Initialize->_MTOUCH_Button_InitializeAll
    _MTOUCH_Service_Mainloop->_MTOUCH_Sensor_SampleAll
    _MTOUCH_Sensor_SampleAll->_Sensor_Service
    _Sensor_Service->_Sensor_Acquisition
    _Sensor_Acquisition->_Sensor_Scanfrequency_Evaluation
    _Sensor_Scanfrequency_Evaluation->_Sensor_Acq_ExecutePacket
    _MTOUCH_Button_ServiceAll->_Button_Service
    _Button_Service->_Button_State_Initializing
    _Button_State_Initializing->_Button_Baseline_Initialize

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   44917
                                              0 BANK2      2     2      0
                       _DATA_PROCESS
                        _EUSART_Read
                 _EUSART_is_rx_ready
                        _LED_PROCESS
_MTOUCH_Button_SetNotPressedCallback
   _MTOUCH_Button_SetPressedCallback
            _MTOUCH_Button_isPressed
            _MTOUCH_Service_Mainloop
                      _RELAY_PROCESS
                  _SYSTEM_Initialize
                         _check_data
                      _check_message
                             _printf
                       _update_state
 ---------------------------------------------------------------------------------
 (1) _update_state                                         0     0      0    5487
                             _printf
 ---------------------------------------------------------------------------------
 (1) _check_message                                        3     3      0    5549
                                             48 BANK0      3     3      0
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                               8     4      4    5487
                                             40 BANK0      8     4      4
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             8     5      3    4956
                                             32 BANK0      8     5      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           40    38      2    4521
                                             23 BANK0      9     7      2
                               _ctoa
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _ctoa                                                 8     6      2    3015
                                             17 BANK0      6     4      2
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                  9     6      3    2771
                                              8 BANK0      9     6      3
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (7) _strlen                                               5     3      2     123
                                              1 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (7) _fputs                                                8     7      1    1226
                                              0 BANK0      8     7      1
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                8     5      3     834
                                              4 COMMON     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0      66
                                              3 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (7) _EUSART_Write                                         2     2      0      44
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _check_data                                           3     3      0      22
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    4468
                  _EUSART_Initialize
                  _MTOUCH_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Initialize                                    0     0      0    3978
        _MTOUCH_Button_InitializeAll
        _MTOUCH_Sensor_InitializeAll
     _MTOUCH_Sensor_Sampled_ResetAll
      _MTOUCH_Sensor_Scan_Initialize
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_InitializeAll                          2     2      0    2387
                                              9 COMMON     2     2      0
           _MTOUCH_Sensor_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_Initialize                             2     2      0    2288
                                              7 COMMON     2     2      0
            _MTOUCH_Sensor_Calibrate
               _MTOUCH_Sensor_Enable
               _Sensor_Sampled_Reset
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Enable                                 2     2      0     723
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_InitializeAll                          2     2      0    1435
                                             11 COMMON     1     1      0
                                              0 BANK0      1     1      0
           _MTOUCH_Button_Initialize
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _memcpy                                              10     6      4     424
                                              1 COMMON    10     6      4
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0     490
                                              3 COMMON     1     1      0
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Service_Mainloop                              1     1      0   23530
                                             40 BANK0      1     1      0
           _MTOUCH_Button_ServiceAll
            _MTOUCH_Sensor_SampleAll
     _MTOUCH_Sensor_Sampled_ResetAll
                        _MTOUCH_Tick
                 _MTOUCH_needReburst
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_needReburst                                   1     1      0      23
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Tick                                          0     0      0     121
                 _MTOUCH_Button_Tick
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_Tick                                   0     0      0     121
                 _Button_Tick_helper
 ---------------------------------------------------------------------------------
 (4) _Button_Tick_helper                                   3     3      0     121
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Sampled_ResetAll                       2     2      0     156
                                              2 COMMON     2     2      0
               _Sensor_Sampled_Reset
 ---------------------------------------------------------------------------------
 (4) _Sensor_Sampled_Reset                                 1     1      0      88
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Sensor_SampleAll                              2     2      0   14640
                                             38 BANK0      2     2      0
                     _Sensor_Service
 ---------------------------------------------------------------------------------
 (3) _Sensor_Service                                       7     7      0   14541
                                             31 BANK0      7     7      0
                 _Sensor_Acquisition
             _Sensor_DefaultCallback
            _Sensor_RawSample_Update
                   _Sensor_isEnabled
                  _Sensor_setSampled
 ---------------------------------------------------------------------------------
 (4) _Sensor_setSampled                                    1     1      0      88
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_RawSample_Update                              3     3      0     410
                                              5 COMMON     3     3      0
           _Sensor_getScanGroupIndex
 ---------------------------------------------------------------------------------
 (4) _Sensor_DefaultCallback                               1     0      1     106
                                              1 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (4) _Sensor_Acquisition                                   4     3      1   13285
                                             27 BANK0      4     3      1
           _Sensor_Acq_ExecutePacket
    _Sensor_Scanfrequency_Evaluation
                    _Sensor_isActive
                _Sensor_isCalibrated
      _Sensor_postAcquisitionProcess
 ---------------------------------------------------------------------------------
 (5) _Sensor_postAcquisitionProcess                        5     5      0    1297
                                              5 COMMON     5     5      0
           _Sensor_getScanGroupIndex
                   _Sensor_isEnabled
                   _Sensor_setActive
                 _Sensor_setInactive
                                _abs
 ---------------------------------------------------------------------------------
 (6) _Sensor_setInactive                                   1     1      0      55
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _Sensor_setActive                                     1     1      0      55
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_Scanfrequency_Evaluation                     13    12      1    5802
                                             14 BANK0     13    12      1
           _Sensor_Acq_ExecutePacket
 ---------------------------------------------------------------------------------
 (6) _Sensor_Acq_ExecutePacket                            15    14      1    5240
                                             11 COMMON     1     0      1
                                              0 BANK0     14    14      0
      _MTOUCH_Sensor_Scan_Initialize
             _Sensor_autoCalibration
                    _Sensor_isActive
                _Sensor_isCalibrated
                   _Sensor_isEnabled
             _Sensor_loadADCSettings
            _TMR2_LoadPeriodRegister
                    _TMR2_StartTimer
                     _TMR2_StopTimer
                                _abs
 ---------------------------------------------------------------------------------
 (7) _TMR2_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR2_LoadPeriodRegister                              1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Sensor_loadADCSettings                               8     7      1     958
                                              2 COMMON     8     7      1
                _Sensor_isCalibrated
        _Sensor_isCalibratingAcqTime
 ---------------------------------------------------------------------------------
 (5) _Sensor_isCalibrated                                  1     1      0     187
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_isEnabled                                     2     2      0     209
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_isActive                                      1     1      0     143
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Sensor_autoCalibration                               6     6      0    1482
                                              5 COMMON     6     6      0
           _Sensor_getScanGroupIndex
        _Sensor_isCalibratingAcqTime
          _Sensor_setCalibratAcqTime
               _Sensor_setCalibrated
                                _abs
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     522
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (8) _Sensor_setCalibrated                                 1     1      0     110
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _Sensor_setCalibratAcqTime                            1     1      0     110
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _Sensor_isCalibratingAcqTime                          1     1      0      88
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_getScanGroupIndex                             4     4      0     233
                                              1 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Scan_Initialize                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Button_ServiceAll                             2     2      0    8590
                                             13 BANK0      2     2      0
                     _Button_Service
 ---------------------------------------------------------------------------------
 (3) _Button_Service                                       4     4      0    8491
                                              9 BANK0      4     4      0
            _Button_Deviation_Update
              _Button_Reading_Update
          _Button_State_Initializing *
            _Button_State_NotPressed *
               _Button_State_Pressed *
           _MTOUCH_Button_Initialize
         _MTOUCH_Sensor_isCalibrated
           _MTOUCH_Sensor_wasSampled
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_wasSampled                             2     2      0     692
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_isCalibrated                           2     2      0     723
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _Button_State_Pressed                                 3     2      1    1393
                                              4 BANK0      3     2      1
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
           _myButtonReleasedCallback *
 ---------------------------------------------------------------------------------
 (5) _myButtonReleasedCallback                             1     0      1     106
                                              4 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (4) _Button_State_NotPressed                              3     2      1    1765
                                              4 BANK0      3     2      1
             _Button_Baseline_Update
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
            _myButtonPressedCallback *
 ---------------------------------------------------------------------------------
 (5) _myButtonPressedCallback                              1     0      1      97
                                              4 COMMON     1     0      1
                        _LED_PROCESS
                      _RELAY_PROCESS
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Button_Initialize                             4     4      0     912
                                              7 COMMON     4     4      0
            _MTOUCH_Sensor_Calibrate
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Calibrate                              2     2      0     723
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _Button_DefaultCallback                               1     0      1       0
                                              4 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (4) _Button_State_Initializing                            5     4      1    1401
                                              4 BANK0      5     4      1
         _Button_Baseline_Initialize
             _Button_Baseline_Update
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Update                               7     7      0     260
                                              1 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Initialize                           5     5      0     862
                                              9 COMMON     1     1      0
                                              0 BANK0      4     4      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (4) _Button_Reading_Update                                1     1      0    1110
                                              0 BANK0      1     1      0
       _Button_Reading_Update_Helper
 ---------------------------------------------------------------------------------
 (5) _Button_Reading_Update_Helper                         3     3      0    1012
                                              9 COMMON     3     3      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Sensor_RawSample_Get                          4     2      2     723
                                              5 COMMON     4     2      2
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1     661
                                              1 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (4) _Button_Deviation_Update                             15    15      0     213
                                              1 COMMON    10    10      0
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_isPressed                              2     2      0      44
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_SetPressedCallback                     2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_SetNotPressedCallback                  2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _EUSART_is_rx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Read                                          2     2      0      24
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DATA_PROCESS                                         3     3      0      66
                                              4 COMMON     3     3      0
                        _LED_PROCESS
                      _RELAY_PROCESS
 ---------------------------------------------------------------------------------
 (1) _RELAY_PROCESS                                        3     3      0      22
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (6) _LED_PROCESS                                          3     3      0      22
                                              1 COMMON     3     3      0
                      _LED_1_SetHigh
                       _LED_1_SetLow
 ---------------------------------------------------------------------------------
 (7) _LED_1_SetLow                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _LED_1_SetHigh                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _INTERRUPT_InterruptManager                          0     0      0       0
                   Absolute function *
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
 ---------------------------------------------------------------------------------
 (12) _EUSART_Transmit_ISR                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _EUSART_Receive_ISR                                  0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (13) _EUSART_DefaultOverrunErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _EUSART_DefaultFramingErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _EUSART_DefaultErrorHandler                          0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (13) _EUSART_RxDataHandler                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DATA_PROCESS
     _LED_PROCESS
       _LED_1_SetHigh
       _LED_1_SetLow
     _RELAY_PROCESS
   _EUSART_Read
   _EUSART_is_rx_ready
   _LED_PROCESS
     _LED_1_SetHigh
     _LED_1_SetLow
   _MTOUCH_Button_SetNotPressedCallback
   _MTOUCH_Button_SetPressedCallback
   _MTOUCH_Button_isPressed
   _MTOUCH_Service_Mainloop
     _MTOUCH_Button_ServiceAll
       _Button_Service
         _Button_Deviation_Update
         _Button_Reading_Update
           _Button_Reading_Update_Helper
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
         _Button_State_Initializing *
           _Button_Baseline_Initialize
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
           _Button_Baseline_Update
         _Button_State_NotPressed *
           _Button_Baseline_Update
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
               ___bmul
           _myButtonPressedCallback *
             _LED_PROCESS
               _LED_1_SetHigh
               _LED_1_SetLow
             _RELAY_PROCESS
         _Button_State_Pressed *
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
               ___bmul
           _myButtonReleasedCallback *
         _MTOUCH_Button_Initialize *
           _MTOUCH_Sensor_Calibrate
             ___bmul
         _MTOUCH_Sensor_isCalibrated *
           ___bmul
         _MTOUCH_Sensor_wasSampled *
           ___bmul
     _MTOUCH_Sensor_SampleAll
       _Sensor_Service
         _Sensor_Acquisition
           _Sensor_Acq_ExecutePacket
             _MTOUCH_Sensor_Scan_Initialize
             _Sensor_autoCalibration
               _Sensor_getScanGroupIndex
               _Sensor_isCalibratingAcqTime
               _Sensor_setCalibratAcqTime
               _Sensor_setCalibrated
               _abs
             _Sensor_isActive
             _Sensor_isCalibrated
             _Sensor_isEnabled
             _Sensor_loadADCSettings
               _Sensor_isCalibrated
               _Sensor_isCalibratingAcqTime
             _TMR2_LoadPeriodRegister
             _TMR2_StartTimer
             _TMR2_StopTimer
             _abs
           _Sensor_Scanfrequency_Evaluation
             _Sensor_Acq_ExecutePacket
               _MTOUCH_Sensor_Scan_Initialize
               _Sensor_autoCalibration
                 _Sensor_getScanGroupIndex
                 _Sensor_isCalibratingAcqTime
                 _Sensor_setCalibratAcqTime
                 _Sensor_setCalibrated
                 _abs
               _Sensor_isActive
               _Sensor_isCalibrated
               _Sensor_isEnabled
               _Sensor_loadADCSettings
                 _Sensor_isCalibrated
                 _Sensor_isCalibratingAcqTime
               _TMR2_LoadPeriodRegister
               _TMR2_StartTimer
               _TMR2_StopTimer
               _abs
           _Sensor_isActive
           _Sensor_isCalibrated
           _Sensor_postAcquisitionProcess
             _Sensor_getScanGroupIndex
             _Sensor_isEnabled
             _Sensor_setActive
             _Sensor_setInactive
             _abs
         _Sensor_DefaultCallback
         _Sensor_RawSample_Update
           _Sensor_getScanGroupIndex
         _Sensor_isEnabled
         _Sensor_setSampled
     _MTOUCH_Sensor_Sampled_ResetAll
       _Sensor_Sampled_Reset
     _MTOUCH_Tick
       _MTOUCH_Button_Tick
         _Button_Tick_helper
     _MTOUCH_needReburst
   _RELAY_PROCESS
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _MTOUCH_Initialize
       _MTOUCH_Button_InitializeAll
         _MTOUCH_Button_Initialize
           _MTOUCH_Sensor_Calibrate
             ___bmul
         _memcpy
       _MTOUCH_Sensor_InitializeAll
         _MTOUCH_Sensor_Initialize
           _MTOUCH_Sensor_Calibrate
             ___bmul
           _MTOUCH_Sensor_Enable
             ___bmul
           _Sensor_Sampled_Reset
           ___bmul
       _MTOUCH_Sensor_Sampled_ResetAll
         _Sensor_Sampled_Reset
       _MTOUCH_Sensor_Scan_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR2_Initialize
     _WDT_Initialize
   _check_data
   _check_message
     _printf
       _vfprintf
         _vfpfcnvrt
           _ctoa
             _pad
               _fputc
                 _putch
                   _EUSART_Write
               _fputs
                 _fputc
                   _putch
                     _EUSART_Write
               _strlen
           _fputc
             _putch
               _EUSART_Write
   _printf
     _vfprintf
       _vfpfcnvrt
         _ctoa
           _pad
             _fputc
               _putch
                 _EUSART_Write
             _fputs
               _fputc
                 _putch
                   _EUSART_Write
             _strlen
         _fputc
           _putch
             _EUSART_Write
   _update_state
     _printf
       _vfprintf
         _vfpfcnvrt
           _ctoa
             _pad
               _fputc
                 _putch
                   _EUSART_Write
               _fputs
                 _fputc
                   _putch
                     _EUSART_Write
               _strlen
           _fputc
             _putch
               _EUSART_Write

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _EUSART_Transmit_ISR *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      D0       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     33      4F       6       98.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      50       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      2      24      10       45.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      D0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri Aug 23 11:36:37 2019

                       ?_EUSART_SetRxInterruptHandler 0071                       Sensor_loadADCSettings@adc_index 0072  
                        ?_MTOUCH_Sensor_RawSample_Get 0075                                          _update_state 09C8  
                                      ___bmul@product 0073                                          ?_LED_PROCESS 0070  
                                         __CFG_CP$OFF 0000                               ?_Sensor_autoCalibration 0070  
                          __end_of_Sensor_setInactive 1725                             _Sensor_setCalibratAcqTime 176E  
                                         __CFG_LVP$ON 0000                                                   l303 0416  
                                                 l305 042D                                                   l257 0482  
                                                 l522 063C                                                   l293 0376  
                                                 l286 0373                                                   l288 036F  
                                                 l740 0A34                                                   _GIE 005F  
                                                 _PR2 001B                                                   _abs 08DC  
                              ??_EUSART_RxDataHandler 0070                                                   _pad 0DA4  
                      ?_EUSART_SetFramingErrorHandler 0071                               ?_Sensor_loadADCSettings 0072  
                                     _TMR2_Initialize 173B                                          __CFG_BORV$LO 0000  
                                       DATA_PROCESS@x 0076                                                   wreg 0009  
                    ??_MTOUCH_Sensor_Sampled_ResetAll 0072                       ?_MTOUCH_Sensor_Sampled_ResetAll 0070  
                    __size_of_MTOUCH_Sensor_SampleAll 0015                        Sensor_getScanGroupIndex@sensor 0073  
                   __size_of_MTOUCH_Sensor_Initialize 0015                             ?_MTOUCH_Sensor_Initialize 0070  
                                        ?_EUSART_Read 0070                                                  l1020 09E5  
                                                l1103 0929                                                  l1105 093C  
                                                ?_abs 0071                                                  l1092 0923  
                                                l1194 0DBC                                                  l1099 0926  
                                                l1197 0DDC                                                  l1198 0DE8  
                                                l4210 0FF7                                                  l4204 0FDB  
                                                l4206 0FE3                                                  l4062 07BF  
                                                l3510 0A2A                                                  l3602 17EE  
                                                l3540 0B75                                                  l3612 1781  
                                                l3524 0A49                                                  l6100 00B0  
                                                l3534 0B64                                                  l4158 0A8A  
                                                l3536 0B73                                                  l3624 047E  
                                                l5304 02ED                                                  l3546 0B86  
                                                l3642 04EC                                                  l5306 02F3  
                                                l5314 02F5                                                  l6210 0258  
                                                l4604 0A4C                                                  l3644 04FE  
                                                l5420 040D                                                  l5404 03BE  
                                                l5308 0307                                                  l5500 0DB2  
                                                l6212 025C                                                  l5270 080B  
                                                l3670 075D                                                  l3662 072A  
                                                l3638 04D9                                                  l5342 0313  
                                                l5326 02FB                                                  l4702 09EC  
                                                l3574 0C29                                                  l5262 0A9B  
                                                l5510 0DBE                                                  l6222 0283  
                                                l6230 0294                                                  l6126 011A  
                                                l6150 0183                                                  ?_pad 0028  
                                                l3664 072E                                                  l5416 03F3  
                                                l5408 03D9                                                  l5504 0DBA  
                                                l6240 02AA                                                  l4730 0C97  
                                                l5266 0805                                                  l5338 0309  
                                                l3578 0C4C                                                  l3690 0904  
                                                l6218 0274                                                  l6154 018B  
                                                l6082 0084                                                  l3932 090D  
                                                l5452 0439                                                  l6172 01B7  
                                                l3934 0910                                                  l4742 0CB1  
                                                l4750 0CB9                                                  l4574 0954  
                                                l5462 0455                                                  l5358 033E  
                                                l5550 0F3B                                                  l5542 0F37  
                                                l5534 0F24                                                  l5622 0EC1  
                                                l6430 09F4                                                  l6158 0190  
                                                l6440 091B                                                  l4736 0CA3  
                                                l5712 0634                                                  l5456 0441  
                                                l5448 0431                                                  l5392 0379  
                                                l5384 036A                                                  l5368 0350  
                                                l5296 02D9                                                  l5552 0F4E  
                                                l5640 0EFC                                                  l5632 0EDC  
                                                l5616 0EB9                                                  l6432 06D6  
                                                l5800 0689                                                  l3688 08F8  
                                                l6088 008C                                                  l3938 0913  
                                                l4746 0CB6                                                  l5722 0E74  
                                                l5706 0600                                                  l6434 06DB  
                                                l5810 06A8                                                  l6426 09DD  
                                                l3948 092C                                                  l6436 0CC1  
                                                l5492 08C2                                                  l5468 0467  
                                                l5556 0F67                                                  l5644 0F05  
                                                l5636 0EEC                                                  l5628 0ED4  
                                                l4676 09E8                                                  l6428 0ADB  
                                                l6438 0934                                                  l5806 0698  
                                                l5822 06C9                                                  l5656 0883  
                                                l3992 0C88                                                  l5816 06B8  
                                                l5824 06EC                                                  l4696 09EA  
                                                l5592 0AEF                                                  l5752 0593  
                                                l5586 0D45                                                  l5690 0E09  
                                                l3986 0C7B                                                  l5674 0B16  
                                                l5594 0AF5                                                  l5746 0572  
                                                l5762 05A4                                                  l5684 179F  
                                                l5692 0E0D                                                  l3988 0C7D  
                                                l5916 097C                                                  l5756 0599  
                                                l5790 0964                                                  l5848 0D91  
                                                l5776 1789                                                  l5856 0B97  
                                                l5882 0890                                                  l5858 0BB4  
                                                l5970 0AC0                                                  l5962 09D7  
                                                l5876 0887                                                  l5980 0AD3  
                                                l5956 09C9                                                  l5894 17B3  
                                                l5974 0AC2                                                  l5958 09D0  
                                                STR_1 1800                                                  STR_2 1809  
                                                STR_3 1814                                                  STR_4 1819  
                                                STR_5 181E                         ?_Button_Reading_Update_Helper 0070  
                                                u2205 0512                                                  _LATA 010C  
                                                _LATB 010D                                                  u2135 0C4A  
                                                _LATC 010E                                                  u3040 0FC2  
                                                u2225 070E                                                  u3035 0F8C  
                                                u2235 0718                                                  u3045 0FBE  
                                                u2095 08E5                                                  u2255 074F  
                                                u3410 0952                                                  u3405 0944  
                                                u2835 078A                                                  u2845 07CC  
                                                u4525 0F55                                                  u5407 0129  
                                                u4545 0BC1                                                  u4465 0DC8  
                                                u5417 0136                                                  u4555 0B57  
                                                u5507 020E                                                  u5427 0143  
                                                u5347 00C1                                                  u5517 021B  
                                                u5437 0150                                                  u5357 00CE  
                                                u4735 0E33                                                  u5527 0228  
                                                u5447 015D                                                  u5367 00DB  
                                                u5537 0235                                                  u5457 016A  
                                                u5377 00E8                                                  u5467 01DA  
                                                u5387 00F5                                                  u4765 0614  
                                                u5477 01E7                                                  u5397 0102  
                                                u5487 01F4                                                  u5497 0201  
                                                u4895 0D59                            Button_State_Pressed@button 0024  
                                                _TMR2 001A                                 __end_of_check_message 0AE4  
                                                _WPUA 020C                                                  _WPUB 020D  
                   __size_of_Sensor_Acq_ExecutePacket 01BE                                        ??_LED_1_SetLow 0071  
                            _Sensor_getScanGroupIndex 0B62                             ?_Sensor_Acq_ExecutePacket 007B  
                                        __CFG_WRT$OFF 0000                                    _MTOUCH_needReburst 0002  
                                                abs@a 0071                                                  _dbuf 0120  
                                                _ctoa 0AE4                                                  _main 0059  
                __size_of_MTOUCH_Button_InitializeAll 001B                                                  _prec 00BE  
                                                _nout 00BC                                                  pad@i 002C  
                                                pad@p 0029                                                  fsr0h 0005  
                                                fsr1h 0007                                                  indf0 0000  
                                                fsr0l 0004                                                  indf1 0001  
                                                fsr1l 0006                                                  pad@w 002E  
                __size_of_MTOUCH_Sensor_InitializeAll 000D                                                  btemp 007E  
                                                start 0023                                     ___bmul@multiplier 0074  
                                       __CFG_MCLRE$ON 0000                                   ?_MTOUCH_needReburst 0070  
                      __end_of_Sensor_autoCalibration 0779  __end_ofSensor_Scanfrequency_Evaluation@frequency_hop 1814  
        Sensor_Scanfrequency_Evaluation@frequency_hop 180F                                         __CFG_LPBOR$ON 0000  
                            _myButtonReleasedCallback 174C                              ?_MTOUCH_Service_Mainloop 0070  
                    __size_of_MTOUCH_Button_isPressed 0019                         __size_of_Button_State_Pressed 005C  
                                               ??_abs 0073                                                 ??_pad 002B  
                         ?_Button_Baseline_Initialize 0070                 Sensor_postAcquisitionProcess@adcIndex 0078  
                       ??_MTOUCH_Sensor_RawSample_Get 0077                         Sensor_RawSample_Update@sensor 0077  
                       myButtonPressedCallback@button 0074                             __size_of_Sensor_isEnabled 0010  
                                       ?_EUSART_Write 0070                        __size_of_OSCILLATOR_Initialize 0006  
                       __end_of_OSCILLATOR_Initialize 170B     Sensor_Scanfrequency_Evaluation@best_packet_sample 0036  
                 __end_of_Sensor_isCalibratingAcqTime 173B                           _Sensor_isCalibratingAcqTime 1733  
                                               ?_ctoa 0031                                                 ?_main 0070  
                                       __CFG_WDTE$OFF 0000                        __end_of_Sensor_loadADCSettings 051F  
                                               _T2CON 001C                               __size_of_Button_Service 0050  
                                               i1l752 09C6                                                 i1l843 0021  
                                               i1l838 0015                                                 _RCREG 0199  
                                               _RCSTA 019D                                          vfpfcnvrt@fmt 0037  
                                               _TRISA 008C                                                 _TRISB 008D  
                                               _TRISC 008E                                       ??_LED_1_SetHigh 0071  
                                               _TXREG 019A                                                 _TXSTA 019E  
                     __size_of_Button_DefaultCallback 0001                                  ??_MTOUCH_needReburst 0071  
                     __size_of_Sensor_DefaultCallback 0001                                                 _blink 005F  
                                               _flags 00C0                               __size_of_Sensor_Service 0093  
               __end_of_MTOUCH_Sensor_Scan_Initialize 17E0                __size_of_MTOUCH_Sensor_Scan_Initialize 0010  
                       _MTOUCH_Sensor_Scan_Initialize 17D0                                        _WDT_Initialize 16CD  
                             Sensor_setSampled@sensor 0071                                                 _fputc 0C20  
                                               _fputs 0A97                                          LED_PROCESS@x 0073  
                                               pad@fp 0030                                                 _width 0057  
                                               ctoa@c 0031                                                 _putch 16D6  
                                               ctoa@w 0034                      __size_of_Button_State_NotPressed 0095  
                                               pclath 000A                                  _Sensor_Sampled_Reset 172C  
                                               status 0003                                                 wtemp0 007E  
                                     _TMR2_StartTimer 16B4                      __size_of_TMR2_LoadPeriodRegister 0005  
                           __size_of_Sensor_setActive 0007                                Sensor_isEnabled@sensor 0072  
                                     __initialization 0025                                          __end_of_ctoa 0B0D  
                                        __end_of_main 02B6                                  _Sensor_setCalibrated 1756  
                               __size_of_DATA_PROCESS 0041                                        ??_EUSART_Write 0071  
                             __end_of_TMR2_Initialize 1743                           ?_INTERRUPT_InterruptManager 0070  
                      ??_EUSART_SetRxInterruptHandler 0073                      __end_of_MTOUCH_Button_Initialize 0BEE  
                                              ??_ctoa 0033                                                ??_main 0142  
                             _MTOUCH_Sensor_Calibrate 17C0                             Sensor_Service@sensor_adc1 0044  
                           Sensor_Service@sensor_adc2 0045                               ??_Button_Reading_Update 007C  
                MTOUCH_Sensor_Sampled_ResetAll@sensor 0073                              ?_Button_Deviation_Update 0070  
                              __end_of_WDT_Initialize 16D1                                          ?_MTOUCH_Tick 0070  
                        Button_Baseline_Update@button 0077             __end_of_EUSART_DefaultFramingErrorHandler 16AC  
          __size_of_EUSART_DefaultFramingErrorHandler 0001                   ??_EUSART_DefaultFramingErrorHandler 0070  
                  ?_EUSART_DefaultFramingErrorHandler 0070                     _EUSART_DefaultFramingErrorHandler 16AB  
                          _EUSART_OverrunErrorHandler 00E7                  __size_of_MTOUCH_Sensor_RawSample_Get 0016  
                                              ?_fputc 0074                                                ?_fputs 0020  
                                              _APFCON 011D                                                _ANSELA 018C  
                                              ?_putch 0070                                                _ANSELB 018D  
                                              _ANSELC 018E                            __end_of_EUSART_is_rx_ready 16B4  
                                              _BORCON 0116                                                i1l4650 0C0F  
                                              i1l4644 0C01                                                i1l4654 0C1D  
                               ?_Sensor_Sampled_Reset 0070                                                _OSCCON 0099  
                                              _SPBRGH 019C                                                _SPBRGL 019B  
                                              _WDTCON 0097                     MTOUCH_Button_InitializeAll@button 0020  
                                        _DATA_PROCESS 0C8C                        ??_Button_Reading_Update_Helper 0079  
                              _Button_DefaultCallback 16AC                       __end_of_MTOUCH_Service_Mainloop 098D  
                                      __CFG_PWRTE$OFF 0000                                   _Sensor_isCalibrated 1743  
                              _Sensor_DefaultCallback 16AD                                          vfprintf@cfmt 0046  
                                       _packet_sample 0053                                                ___bmul 0803  
                               ?_Sensor_setCalibrated 0070                          Sensor_DefaultCallback@sensor 0071  
                                      __CFG_STVREN$ON 0000                      __size_of_myButtonPressedCallback 0014  
                                 _EUSART_Transmit_ISR 09AA                                                _memcpy 0B0D  
                                              _rxData 0063                      __end_of_MTOUCH_Button_ServiceAll 17C0  
                                __end_of_LED_1_SetLow 16C9                                                _printf 0814  
                                              pad@buf 0028                                  __size_of_LED_PROCESS 0019  
                                              ctoa@fp 0036                          Sensor_autoCalibration@sensor 007A  
                                              _strlen 08F3                                                fputc@c 0074  
                                              fputs@c 0024                                                fputs@i 0025  
                                              fputs@s 0027                               _MTOUCH_Sensor_SampleAll 0885  
                        Button_DefaultCallback@button 0074                                  ?_Sensor_isCalibrated 0070  
                                     ?_WDT_Initialize 0070                              ?_Sensor_RawSample_Update 0070  
                          __end_of_Sensor_Acquisition 0F07                                __size_of_RELAY_PROCESS 0019  
                             ?_Button_Baseline_Update 0070                                      __end_of_vfprintf 0BBD  
                 Sensor_postAcquisitionProcess@sensor 0079                               __end_of_TMR2_StartTimer 16B7  
                  __size_of_Sensor_setCalibratAcqTime 000D              __end_of_MTOUCH_Button_SetPressedCallback 16E7  
           __size_of_MTOUCH_Button_SetPressedCallback 0006                    ??_MTOUCH_Button_SetPressedCallback 0073  
                   ?_MTOUCH_Button_SetPressedCallback 0071                      _MTOUCH_Button_SetPressedCallback 16E1  
                            __size_of_Sensor_isActive 000D                                  ?_EUSART_Transmit_ISR 0070  
                     MTOUCH_Sensor_RawSample_Get@name 0078                   Sensor_getScanGroupIndex@sensorGroup 0074  
                                __size_of_EUSART_Read 0025                                     _SYSTEM_Initialize 0825  
                             __end_of__initialization 0055                   __size_of_Button_Baseline_Initialize 002B  
                      ?_MTOUCH_Sensor_Scan_Initialize 0070                       ??_Sensor_postAcquisitionProcess 0075  
                                  ?_SYSTEM_Initialize 0070                                   _Button_StateMachine 00D4  
                          __end_of_Button_Tick_helper 0A29                                     _update_state_flag 005D  
                       MTOUCH_Sensor_Calibrate@sensor 0076                  __end_of_EUSART_SetTxInterruptHandler 1705  
               __size_of_EUSART_SetTxInterruptHandler 0006                          _EUSART_SetTxInterruptHandler 16FF  
         Sensor_Acq_ExecutePacket@sensor1ForceEnabled 0024                                   ___bmul@multiplicand 0071  
                                      __pcstackCOMMON 0070                               _MTOUCH_Button_isPressed 093D  
                                        __pidataBANK0 0800                                          __pidataBANK1 084A  
         __end_of_MTOUCH_Button_SetNotPressedCallback 16E1          __size_of_MTOUCH_Button_SetNotPressedCallback 0006  
               ??_MTOUCH_Button_SetNotPressedCallback 0073                  ?_MTOUCH_Button_SetNotPressedCallback 0071  
                 _MTOUCH_Button_SetNotPressedCallback 16DB                                   ??_SYSTEM_Initialize 007C  
                          __end_of_MTOUCH_Button_Tick 16CD                                         __end_of_fputc 0C55  
                                       __end_of_fputs 0ABD                      __end_of_MTOUCH_Sensor_Initialize 08AF  
                                       __end_of_putch 16DB                             ??_MTOUCH_Sensor_Calibrate 0075  
                                    _Sensor_isEnabled 17E0                                      ?_TMR2_Initialize 0070  
                     __end_of_Button_Deviation_Update 1000                              Sensor_setInactive@sensor 0071  
                                      _Button_Service 0D54                      __end_of_Sensor_Acq_ExecutePacket 0474  
                          ?_Button_State_Initializing 0024                                  Button_Service@button 002C  
                                      _OPTION_REGbits 0095                                 ??_Sensor_isCalibrated 0071  
                          ??_Sensor_getScanGroupIndex 0071                                  _eusartRxStatusBuffer 00A0  
                      __end_of_Button_Baseline_Update 0800                   Sensor_Acq_ExecutePacket@sensor_adc1 002D  
                 Sensor_Acq_ExecutePacket@sensor_adc2 007B                              _MTOUCH_Button_Initialize 0BBD  
                     ??_EUSART_SetOverrunErrorHandler 0073                                        _Sensor_Service 065C  
                             _Button_State_NotPressed 05C7                         __size_of_MTOUCH_Sensor_Enable 0010  
                                  _Sensor_setInactive 171E                                     _sensor_scan_group 1821  
                                             ??_fputc 0077                             __end_of_SYSTEM_Initialize 0837  
                                   _lowpowerActivated 006A                                               ??_fputs 0021  
                               ??_EUSART_Transmit_ISR 0070                      MTOUCH_Sensor_isCalibrated@sensor 0076  
                              ??_Sensor_Sampled_Reset 0071                                               ??_putch 0073  
                                          __pbssBANK0 0053                                            __pbssBANK1 00A0  
                                          __pbssBANK2 0120                                            _check_data 09E6  
                                __end_of_EUSART_Write 0A4C                               _TMR2_LoadPeriodRegister 16D1  
                          ??_myButtonReleasedCallback 0075                          Sensor_loadADCSettings@sensor 0079  
                                 ?_Sensor_setInactive 0070                                      _Sensor_setActive 1717  
                         __size_of_EUSART_Receive_ISR 0032                            __end_of_mtouch_button_init 1010  
                                   _last_touch_status 0059           Sensor_Acq_ExecutePacket@sensor2ForceEnabled 0025  
                              ??_Sensor_setCalibrated 0071                                            __pmaintext 0059  
                                       _RELAY_PROCESS 0924                                               ?___bmul 0071  
                       ?_EUSART_SetTxInterruptHandler 0071                      _EUSART_TxDefaultInterruptHandler 00ED  
                                             _AD1CON0 0711                                               _AD1CON2 0713  
                                             _AD1CON3 0714                                               _AD2CON0 0791  
                                             _AD2CON2 0793                                               _AD2CON3 0794  
                                             _AAD1CAP 0719                                               _AAD1GRD 0718  
                                             _AAD2GRD 0798                        MTOUCH_Sensor_wasSampled@sensor 0076  
                                          __pintentry 0004                                __end_of_Button_Service 0DA4  
                                             ?_memcpy 0071                                               _BAUDCON 019F  
                                           _AD1ACQCON 0717                   __end_of_MTOUCH_Button_InitializeAll 0971  
                         _MTOUCH_Button_InitializeAll 0956                                             _AD2ACQCON 0797  
                        ??_EUSART_DefaultErrorHandler 0071                   __end_of_MTOUCH_Sensor_InitializeAll 1795  
                         _MTOUCH_Sensor_InitializeAll 1788                             ??_MTOUCH_Sensor_SampleAll 0046  
                                             ?_printf 0048                       __end_of_Sensor_RawSample_Update 0A97  
                                ??_Sensor_setInactive 0071                                               ?_strlen 0071  
                   __size_of_MTOUCH_Sensor_wasSampled 000E                             ?_MTOUCH_Sensor_wasSampled 0070  
                                       _eusartRxCount 0065                                             _AD1PRECON 0716  
                           Sensor_isCalibrated@sensor 0071                                             _AD2PRECON 0796  
                   __end_of_Button_State_Initializing 0E4F                                __end_of_Sensor_Service 06EF  
                             Sensor_Service@scanGroup 0042                              _MTOUCH_Button_ServiceAll 17B1  
                           __end_of_sensor_scan_group 1823                                    __size_of_vfpfcnvrt 00A8  
                       __size_of_EUSART_RxDataHandler 0017                      __size_of_MTOUCH_Service_Mainloop 001C  
                        __end_of_Button_State_Pressed 0EAB                               __size_of_TMR2_StopTimer 0003  
                            ??_EUSART_SetErrorHandler 0073                                      ?_TMR2_StartTimer 0070  
                    Button_Baseline_Initialize@button 0079                       Sensor_setCalibratAcqTime@sensor 0071  
                                __size_of_MTOUCH_Tick 0003                   Sensor_loadADCSettings@addressOffset 0078  
                __size_of_Sensor_isCalibratingAcqTime 0008                 Sensor_Acq_ExecutePacket@ADCOMCON_temp 0021  
                           ??_MTOUCH_Button_isPressed 0071                                            _count_conf 00C2  
                                   ??_Sensor_isActive 0071                   __size_of_EUSART_DefaultErrorHandler 0003  
                                      ?_RELAY_PROCESS 0070                 __end_of_Sensor_postAcquisitionProcess 0C8C  
              __size_of_Sensor_postAcquisitionProcess 0037                         _Sensor_postAcquisitionProcess 0C55  
                               __size_of_LED_1_SetLow 0004                               _myButtonPressedCallback 085D  
                             Sensor_Acquisition@retry 003D                                       __size_of___bmul 0011  
                                         _AD1CON0bits 0711                        MTOUCH_Button_Initialize@button 007A  
                                         _AD2CON0bits 0791                                             ?_vfprintf 0040  
                                     ?_Button_Service 0070            Sensor_Scanfrequency_Evaluation@sensor_adc1 0033  
          Sensor_Scanfrequency_Evaluation@sensor_adc2 002E                                       __size_of_memcpy 002A  
                                             __ptext1 09C8                                               __ptext2 0ABD  
                                             __ptext3 0814                                               __ptext4 0B8E  
                                             __ptext5 051F                                               __ptext6 0AE4  
                                             __ptext7 0DA4                                               __ptext8 08F3  
                                             __ptext9 0A97                                __size_of_check_message 0027  
                                     __size_of_printf 0011                           Button_Reading_Update@button 0020  
                                     __size_of_strlen 0018                              _MTOUCH_Sensor_Initialize 089A  
                               _OSCILLATOR_Initialize 1705                                             _T2CONbits 001C  
                                        __size_of_abs 0017                                          __size_of_pad 0050  
                           ??_Button_State_NotPressed 0025                                               _prcData 0062  
                                     ?_Sensor_Service 0070                              ??_PIN_MANAGER_Initialize 0071  
                      __size_of_Button_Reading_Update 000E                           __size_of_MTOUCH_needReburst 0002  
                               __end_of_LED_1_SetHigh 16C5                         __end_of_Button_Reading_Update 17A3  
                   MTOUCH_Sensor_InitializeAll@sensor 007A                              _Sensor_Acq_ExecutePacket 02B6  
                                    _callback_sampled 00DC                             ??_TMR2_LoadPeriodRegister 0071  
                     Sensor_RawSample_Update@adcIndex 0076                            __size_of_SYSTEM_Initialize 0012  
                                             clrloop0 170C                                      _callback_pressed 00DA  
                      MTOUCH_Sensor_Initialize@sensor 0078                                  end_of_initialization 0055  
                                         ?_check_data 0070                               ?_Button_DefaultCallback 0074  
               __end_of_EUSART_SetOverrunErrorHandler 16F9                __size_of_EUSART_SetOverrunErrorHandler 0006  
                       _EUSART_SetOverrunErrorHandler 16F3                                               memcpy@d 007A  
                                             memcpy@n 0073                                               memcpy@s 0077  
                                             fputc@fp 0076                                               init_ram 1711  
                                             fputs@fp 0020                                          _LED_1_SetLow 16C5  
                                             initloop 1712                               ?_Sensor_DefaultCallback 0071  
                       Sensor_Acquisition@sensor_adc1 003E                         Sensor_Acquisition@sensor_adc2 003B  
                    __size_of_Button_Deviation_Update 0083                                     _EUSART_Initialize 0CCD  
                        ??_MTOUCH_Sensor_isCalibrated 0075                                    ?_EUSART_Initialize 0070  
                                   __end_of_vfpfcnvrt 05C7                   __end_of_MTOUCH_Sensor_RawSample_Get 08C5  
                         _MTOUCH_Sensor_RawSample_Get 08AF                                             _RCSTAbits 019D  
                                  _EUSART_is_rx_ready 16B1                                            ??_vfprintf 0043  
                                             strlen@a 0074                                               strlen@s 0075  
                                 ??_EUSART_Initialize 0073                                      ??_WDT_Initialize 0071  
                      ??_EUSART_SetTxInterruptHandler 0073                                   ?_EUSART_is_rx_ready 0070  
                              Sensor_setActive@sensor 0071                                      __CFG_FOSC$INTOSC 0000  
   Sensor_Scanfrequency_Evaluation@best_sample_period 0034                         Button_Deviation_Update@button 0020  
                Sensor_Acq_ExecutePacket@AD1CON2_temp 0022                                 __size_of_EUSART_Write 0023  
            MTOUCH_Button_SetPressedCallback@callback 0071                            MTOUCH_Sensor_Enable@sensor 0076  
                Sensor_Acq_ExecutePacket@AD2CON2_temp 0023                                   _callback_notPressed 006C  
                 __size_of_MTOUCH_Sensor_isCalibrated 0014                        __end_of_Button_DefaultCallback 16AD  
                     __size_of_EUSART_SetErrorHandler 0006       Sensor_Scanfrequency_Evaluation@packet_noise_Max 0031  
                                  _sensor_globalFlags 0069                              __end_of_Sensor_isEnabled 17F0  
                          Sensor_setCalibrated@sensor 0071                        __end_of_Sensor_DefaultCallback 16AE  
                    __end_of_myButtonReleasedCallback 1756                             __end_of_EUSART_Initialize 0D0E  
                                ??_EUSART_is_rx_ready 0071                                         _check_message 0ABD  
                            ??_Sensor_autoCalibration 0075                            _Sensor_loadADCSettings$558 0076  
                                           _TXSTAbits 019E                                         _check_request 0060  
                                     ??_RELAY_PROCESS 0071                             ??_myButtonPressedCallback 0075  
                    __size_of_Sensor_RawSample_Update 0026                                    _Sensor_Acquisition 0EAB  
                            ??_Sensor_loadADCSettings 0073                                         ?_update_state 0070  
                                       ??_LED_PROCESS 0071                                  _Button_State_Pressed 0E4F  
                                      __end_of___bmul 0814                    __end_of_EUSART_DefaultErrorHandler 16B1  
                          _EUSART_DefaultErrorHandler 16AE                                   ?_Sensor_Acquisition 003B  
                                         vfpfcnvrt@ap 0038                                           vfpfcnvrt@fp 003F  
                          ??_MTOUCH_Button_Initialize 0077           MTOUCH_Button_SetNotPressedCallback@callback 0071  
                     ??_MTOUCH_Sensor_Scan_Initialize 0071                        ?_Sensor_postAcquisitionProcess 0070  
                                        _EUSART_Write 0A29                                   __size_of_check_data 0020  
                                  _Button_Tick_helper 0A06                                        __end_of_memcpy 0B37  
                              ?_OSCILLATOR_Initialize 0070                              __end_of_Sensor_setActive 171E  
                    TMR2_LoadPeriodRegister@periodVal 0071                                        __end_of_printf 0825  
                         ??_Button_State_Initializing 0025                                        __end_of_strlen 090B  
                                 start_initialization 0025                               _MTOUCH_Service_Mainloop 0971  
                     __size_of_PIN_MANAGER_Initialize 001D                                    _MTOUCH_Button_Tick 16C9  
                                 ?_Button_Tick_helper 0070                                           __end_of_abs 08F3  
                                         __end_of_pad 0DF4                                        _TMR2_StopTimer 16B7  
                                       ??_EUSART_Read 0071          EUSART_SetRxInterruptHandler@interruptHandler 0071  
        EUSART_SetTxInterruptHandler@interruptHandler 0071                                           putch@txData 0073  
                                ??_Sensor_Acquisition 003C                                        ?_check_message 0070  
                                 ?_MTOUCH_Button_Tick 0070                       Button_State_Initializing@button 0024  
                      Sensor_autoCalibration@adcIndex 0079                        ?_EUSART_SetOverrunErrorHandler 0071  
                    __end_of_MTOUCH_Sensor_wasSampled 17B1                                  ??_Button_Tick_helper 0071  
                        __end_of_MTOUCH_Sensor_Enable 1800                                           vfprintf@fmt 0040  
                                        _packet_noise 005B                                        ??_update_state 007C  
                          _EUSART_FramingErrorHandler 00E9                                              ??___bmul 0072  
                               ?_Button_State_Pressed 0024                                _EUSART_SetErrorHandler 16E7  
                          ??_MTOUCH_Button_ServiceAll 002D                                           __pdataBANK0 006C  
                                         __pdataBANK1 00D4                                        check_message@x 0052  
                                            ??_memcpy 0075                           __end_of_Sensor_isCalibrated 174C  
                        ??_Button_Baseline_Initialize 0020                                         _sample_period 006E  
                                ??_MTOUCH_Button_Tick 0074                                    _mtouch_button_init 1000  
                          Sensor_Sampled_Reset@sensor 0071                                              ??_printf 004C  
                                            ??_strlen 0073                          ?_Sensor_isCalibratingAcqTime 0070  
                     __end_of_myButtonPressedCallback 0871                                   __end_of_LED_PROCESS 0924  
                         __end_of_EUSART_Transmit_ISR 09C8                                __end_of_TMR2_StopTimer 16BA  
                                         __pbssCOMMON 007C                                             ___latbits 0002  
                                       __pcstackBANK0 0020                                         __pcstackBANK2 0142  
                            __size_of_TMR2_Initialize 0008                                       _Sensor_isActive 177B  
                      MTOUCH_Button_ServiceAll@button 002E                                   Sensor_Service@error 0043  
                          __end_of_EUSART_Receive_ISR 0C20                         __size_of_Sensor_Sampled_Reset 0007  
                          __size_of_EUSART_Initialize 0041                               _Button_Deviation_Update 0F7D  
                          ?_Sensor_setCalibratAcqTime 0070                      _EUSART_RxDefaultInterruptHandler 00EB  
                                 __end_of_EUSART_Read 0A71                             _Button_State_Initializing 0DF4  
                  __end_of_MTOUCH_Sensor_isCalibrated 0885                            _MTOUCH_Sensor_isCalibrated 0871  
                                           __pnvBANK1 00E7                                             __pnvBANK2 0140  
                     __size_of_Sensor_autoCalibration 008A                     __size_of_Sensor_getScanGroupIndex 002C  
                                   _Sensor_setSampled 1725                             ?_Sensor_getScanGroupIndex 0070  
                        __end_of_EUSART_RxDataHandler 08DC                                _PIN_MANAGER_Initialize 098D  
                                    ??_Button_Service 0029                              ?_MTOUCH_Sensor_Calibrate 0070  
                                EUSART_Read@readValue 0072                                    ?_Sensor_setSampled 0070  
                  Button_Reading_Update_Helper@button 007B                            ??_MTOUCH_Sensor_Initialize 0077  
                       __size_of_Sensor_setCalibrated 000C                       __size_of_Sensor_loadADCSettings 00AB  
                                            _AAD1CON2 0713                                              _AAD1CON3 0714  
                                            _AAD2CON3 0794                                              _AAD1RES0 071A  
                                        _eusartRxHead 007C                                              _AAD2RES0 079A  
                                        _eusartTxHead 0068                                          _eusartRxTail 0066  
                                        _eusartTxTail 0067                                      ??_Sensor_Service 003F  
                          ??_Sensor_Acq_ExecutePacket 0020                          ??_INTERRUPT_InterruptManager 0071  
                                 ??_Sensor_setSampled 0071                     __size_of_myButtonReleasedCallback 000A  
                                         _blink_count 005E                             ?_myButtonReleasedCallback 0074  
                           ??_MTOUCH_Service_Mainloop 0048                                     __size_of_vfprintf 002F  
                                            _ADCOMCON 0712                               _eusartTxBufferRemaining 00EF  
                         __size_of_Sensor_setInactive 0007                        Sensor_Acq_ExecutePacket@last_a 0028  
                      Sensor_Acq_ExecutePacket@last_b 002A                                       ?_TMR2_StopTimer 0070  
                       ??_Sensor_isCalibratingAcqTime 0071                                         ??_MTOUCH_Tick 0074  
                                     ??_check_message 0050                                        __size_of_fputc 0035  
                                      __size_of_fputs 0026                                        __size_of_putch 0005  
                                        ??_check_data 0071                                        _eusartRxBuffer 00A8  
                                      _eusartTxBuffer 00B0                             __end_of_Sensor_setSampled 172C  
                                            _LATAbits 010C                EUSART_SetErrorHandler@interruptHandler 0071  
                                            _LATCbits 010E                                         ?_DATA_PROCESS 0070  
                             _Sensor_RawSample_Update 0A71                     __end_of_Sensor_setCalibratAcqTime 177B  
                                           clear_ram0 170B                                              _PIE1bits 0091  
                                   _eusartRxLastError 0064                              __size_of_TMR2_StartTimer 0003  
                 __size_of_INTERRUPT_InterruptManager 001F                                              _PIR1bits 0011  
                     ??_EUSART_SetFramingErrorHandler 0073                Sensor_Acq_ExecutePacket@packet_counter 002C  
                                            _PIR2bits 0012                                ??_Button_State_Pressed 0025  
              __end_of_MTOUCH_Sensor_Sampled_ResetAll 084A               __size_of_MTOUCH_Sensor_Sampled_ResetAll 0013  
                      _MTOUCH_Sensor_Sampled_ResetAll 0837                              ?_MTOUCH_Sensor_SampleAll 0070  
           __end_of_EUSART_DefaultOverrunErrorHandler 16C1            __size_of_EUSART_DefaultOverrunErrorHandler 0004  
                 ??_EUSART_DefaultOverrunErrorHandler 0070                    ?_EUSART_DefaultOverrunErrorHandler 0070  
                   _EUSART_DefaultOverrunErrorHandler 16BD                    Sensor_Acq_ExecutePacket@ADxIF_flag 0026  
                                         _LED_PROCESS 090B                              _MTOUCH_Sensor_wasSampled 17A3  
                                  _mtouch_time_toScan 006B                                             _vfpfcnvrt 051F  
                            ??_Button_Baseline_Update 0071                                    __end_of_check_data 0A06  
                             __end_of_Sensor_isActive 1788                                _Sensor_autoCalibration 06EF  
                          __end_of_MTOUCH_needReburst 0004                        myButtonReleasedCallback@button 0074  
                              _Sensor_loadADCSettings 0474                                  _MTOUCH_Sensor_Enable 17F0  
                                         _EUSART_Read 0A4C                                  __end_of_update_state 09E6  
                                          vfpfcnvrt@c 003E                              Button_Tick_helper@button 0073  
                           ??_Button_Deviation_Update 0071                                 _Button_Reading_Update 1795  
                            ?_MTOUCH_Button_isPressed 0070                                     ?_Sensor_isEnabled 0070  
                                      ??_DATA_PROCESS 0074                                     ??_TMR2_Initialize 0071  
                                 __end_of_MTOUCH_Tick 16BD                                     _MTOUCH_Initialize 1762  
                     __end_of_MTOUCH_Sensor_Calibrate 17D0                                    ??_Sensor_isEnabled 0071  
                                  ?_MTOUCH_Initialize 0070                Sensor_postAcquisitionProcess@deviation 0076  
                                           memcpy@tmp 0076                                            vfprintf@ap 0042  
                                          vfprintf@fp 0045                                            _APFCONbits 011D  
                              __size_of_LED_1_SetHigh 0004                               ??_OSCILLATOR_Initialize 0071  
                  __end_of_Button_Baseline_Initialize 0B62                            _Button_Baseline_Initialize 0B37  
                                 _EUSART_ErrorHandler 0140                                   ??_MTOUCH_Initialize 007C  
                         ?_EUSART_DefaultErrorHandler 0070                                            ?_vfpfcnvrt 0037  
                            ?_Button_State_NotPressed 0024                                           check_data@x 0073  
                                  Button_Service@name 002B                                     ?_Sensor_setActive 0070  
                            ?_TMR2_LoadPeriodRegister 0070                                 Sensor_isActive@sensor 0071  
                Sensor_Scanfrequency_Evaluation@retry 0035                                    ??_Sensor_setActive 0071  
                                _EUSART_RxDataHandler 08C5                                 ?_MTOUCH_Sensor_Enable 0070  
                                            __ptext10 0C20                                              __ptext11 16D6  
                                            __ptext20 1788                                              __ptext12 0A29  
                                            __ptext21 089A                                              __ptext13 09E6  
                                            __ptext30 16E7                                              __ptext22 17F0  
                                            __ptext14 0825                                              __ptext31 0971  
                                            __ptext23 0956                                              __ptext15 16CD  
                                            __ptext40 1725                                              __ptext32 0002  
                                            __ptext24 0B0D                                              __ptext16 173B  
                                            __ptext41 0A71                                              __ptext33 16BA  
                                            __ptext25 0CCD                                              __ptext17 098D  
                                            __ptext50 16B4                                              __ptext42 16AD  
                                            __ptext34 16C9                                              __ptext26 16FF  
                                            __ptext18 1705                                              __ptext51 16D1  
                                            __ptext43 0EAB                                              __ptext35 0A06  
                                            __ptext27 16F9                                              __ptext19 1762  
                                            __ptext60 1733                                              __ptext52 0474  
                                            __ptext44 0C55                                              __ptext36 0837  
                                            __ptext28 16F3                                              __ptext61 0B62  
                                            __ptext53 1743                                              __ptext45 171E  
                                            __ptext37 172C                                              __ptext29 16ED  
                                            __ptext70 085D                                              __ptext62 17D0  
                                            __ptext54 17E0                                              __ptext46 1717  
                                            __ptext38 0885                                              __ptext71 16AC  
                                            __ptext63 17B1                                              __ptext55 177B  
                                            __ptext47 0F07                                              __ptext39 065C  
                                            __ptext80 0803                                              __ptext72 174C  
                                            __ptext64 0D54                                              __ptext56 06EF  
                                            __ptext48 02B6                                              __ptext81 0F7D  
                                            __ptext73 0BBD                                              __ptext65 17A3  
                                            __ptext57 08DC                                              __ptext49 16B7  
                                            __ptext90 16C5                                              __ptext82 093D  
                                            __ptext74 17C0                                              __ptext66 0871  
                                            __ptext58 1756                                              __ptext91 16C1  
                                            __ptext83 16E1                                              __ptext75 0779  
                                            __ptext67 05C7                                              __ptext59 176E  
                                            __ptext84 16DB                                              __ptext76 0B37  
                                            __ptext68 0DF4                                              __ptext93 09AA  
                                            __ptext85 16B1                                              __ptext77 1795  
                                            __ptext69 0E4F                                              __ptext94 0BEE  
                                            __ptext86 0A4C                                              __ptext78 0D0E  
                                            __ptext95 16BD                                              __ptext87 0C8C  
                                            __ptext79 08AF                                              __ptext96 16AB  
                                            __ptext88 0924                                              __ptext97 16AE  
                                            __ptext89 090B                                              __ptext98 08C5  
                           __end_of_MTOUCH_Initialize 176E                             ??_Sensor_RawSample_Update 0075  
                          __size_of_Sensor_setSampled 0007                           __size_of_EUSART_is_rx_ready 0003  
                                       __size_of_ctoa 0029                                         __size_of_main 025D  
                     __end_of_MTOUCH_Sensor_SampleAll 089A                      Sensor_Scanfrequency_Evaluation@i 003A  
                             ?_EUSART_SetErrorHandler 0071                                 __end_of_RELAY_PROCESS 093D  
       EUSART_SetOverrunErrorHandler@interruptHandler 0071                                              int$flags 007E  
                                            _vfprintf 0B8E                    __size_of_Button_State_Initializing 005B  
                                   ??_TMR2_StartTimer 0071                    __end_of_INTERRUPT_InterruptManager 0023  
                          _INTERRUPT_InterruptManager 0004                                             printf@fmt 0048  
               __end_of_EUSART_SetFramingErrorHandler 16F3                __size_of_EUSART_SetFramingErrorHandler 0006  
                       _EUSART_SetFramingErrorHandler 16ED                                        RELAY_PROCESS@x 0073  
                     __size_of_Button_Baseline_Update 0087                          ?_MTOUCH_Button_InitializeAll 0070  
                        MTOUCH_Sensor_SampleAll@group 0047                          ?_MTOUCH_Sensor_InitializeAll 0070  
                                    ?_Sensor_isActive 0070                                         _mtouch_button 00C4  
                                          _INTCONbits 000B                                 ?_EUSART_RxDataHandler 0070  
                                       _mtouch_sensor 00DE                                              memcpy@d1 0079  
                                            memcpy@s1 0071                       __end_of_MTOUCH_Button_isPressed 0956  
                    __end_of_Sensor_getScanGroupIndex 0B8E                                     __CFG_BOREN$NSLEEP 0000  
                                         _MTOUCH_Tick 16BA                                ?_Button_Reading_Update 0070  
                                       _LED_1_SetHigh 16C1                      Button_Deviation_Update@deviation 0021  
                             __size_of_WDT_Initialize 0004                          MTOUCH_Button_Initialize@name 0079  
                   __size_of_MTOUCH_Button_Initialize 0031                                              intlevel1 0000  
                           ?_MTOUCH_Button_Initialize 0070                           __size_of_Sensor_Acquisition 005C  
                            ?_myButtonPressedCallback 0074               __end_of_Sensor_Scanfrequency_Evaluation 0F7D  
            __size_of_Sensor_Scanfrequency_Evaluation 0076                     ??_Sensor_Scanfrequency_Evaluation 002F  
                    ?_Sensor_Scanfrequency_Evaluation 002E                       _Sensor_Scanfrequency_Evaluation 0F07  
                             ?_PIN_MANAGER_Initialize 0070                                         _timeout_count 00B8  
                         ??_Sensor_setCalibratAcqTime 0071                        __end_of_EUSART_SetErrorHandler 16ED  
                                   __CFG_CLKOUTEN$OFF 0000                           ?_MTOUCH_Sensor_isCalibrated 0070  
                __end_of_EUSART_SetRxInterruptHandler 16FF                 __size_of_EUSART_SetRxInterruptHandler 0006  
                        _EUSART_SetRxInterruptHandler 16F9                                         _config_status 0061  
                         __size_of_Button_Tick_helper 0023                       __end_of_Button_State_NotPressed 065C  
                                            printf@ap 004F                                    _EUSART_Receive_ISR 0BEE  
       EUSART_SetFramingErrorHandler@interruptHandler 0071                          __end_of_Sensor_Sampled_Reset 1733  
                                         ??_vfpfcnvrt 0039                                      ??_TMR2_StopTimer 0071  
                     __end_of_TMR2_LoadPeriodRegister 16D6                           __size_of_MTOUCH_Button_Tick 0004  
                                       __pstringtext1 180F                                         __pstringtext2 1821  
                                       __pstringtext3 1000                                         __pstringtext4 1800  
                                       __pstringtext5 1809                                         __pstringtext6 1814  
                                       __pstringtext7 1819                                         __pstringtext8 181E  
                                       __pstringtext9 0000                                  __end_of_DATA_PROCESS 0CCD  
                                 ?_EUSART_Receive_ISR 0070                                 __size_of_update_state 001E  
                       ??_MTOUCH_Button_InitializeAll 007B                              ??_Button_DefaultCallback 0075  
                       ??_MTOUCH_Sensor_InitializeAll 0079                  Sensor_Acq_ExecutePacket@activeSensor 0027  
                    __size_of_MTOUCH_Sensor_Calibrate 0010                                ??_MTOUCH_Sensor_Enable 0075  
                   Sensor_isCalibratingAcqTime@sensor 0071                          __size_of_Sensor_isCalibrated 0009  
                            ??_Sensor_DefaultCallback 0072                          __end_of_Sensor_setCalibrated 1762  
                                      ?_LED_1_SetHigh 0070                  __end_of_Button_Reading_Update_Helper 0D54  
               __size_of_Button_Reading_Update_Helper 0046                          _Button_Reading_Update_Helper 0D0E  
                   __size_of_MTOUCH_Button_ServiceAll 000F                             ?_MTOUCH_Button_ServiceAll 0070  
                       Button_State_NotPressed@button 0024                                    EUSART_Write@txData 0072  
                        __size_of_EUSART_Transmit_ISR 001E                            __size_of_MTOUCH_Initialize 000C  
                      __end_of_PIN_MANAGER_Initialize 09AA                                _Button_Baseline_Update 0779  
                                       ?_LED_1_SetLow 0070                           MTOUCH_Button_isPressed@name 0072  
                                ??_EUSART_Receive_ISR 0071                            ??_MTOUCH_Sensor_wasSampled 0075  
